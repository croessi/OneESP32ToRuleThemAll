fan:
  - platform: template
    name: ${property}
    id: ${property}
    speed_count: 3
    on_speed_set:
      - lambda: |-
          const auto fan_speed = std::min(3, id(${property}).speed);
          sendData(Kessel, propertyManager.getPropertyAddress("k${property}"), fan_speed);
    on_state:
      - lambda: |-
          if(id(${property}).state) {
            sendData(Kessel, propertyManager.getPropertyAddress("k${property}"), id(${property}).speed);
          } else {
            sendData(Kessel, propertyManager.getPropertyAddress("k${property}"), 0U);
          }

esphome:
  on_boot:
    priority: -100
    then:
      - lambda: |-
          CallbackHandler::instance().addCallback(std::make_pair(Kessel,propertyManager.getPropertyAddress("k${property}")),[](const SimpleVariant& value){
              const auto fan_speed = std::min(static_cast<std::uint16_t>(3U),value.get<std::uint16_t>());
              if(fan_speed == 0) {
                auto call = id(${property}).turn_off();
                call.perform();
              } else {
                auto call = id(${property}).turn_on();
                // only speeds between 1 and speed_count are allowed
                call.set_speed(fan_speed);
                call.perform();
              }
          });  
          queueRequest(Kessel, propertyManager.getPropertyAddress("k${property}"));
