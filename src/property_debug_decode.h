#if !defined(PROPERTY_DEBUG_H)
#define PROPERTY_DEBUG_H

#include "property.h"
char* getPropertyName(Property prop) {
    static char buffer[60];
    switch (prop) {
        case Property::kINDEX_NOT_FOUND: std::strcpy(buffer,"INDEX_NOT_FOUND"); break;
        case Property::kFEHLERMELDUNG: std::strcpy(buffer,"FEHLERMELDUNG"); break;
        case Property::kKESSELSOLLTEMP: std::strcpy(buffer,"KESSELSOLLTEMP"); break;
        case Property::kSPEICHERSOLLTEMP: std::strcpy(buffer,"SPEICHERSOLLTEMP"); break;
        case Property::kVORLAUFSOLLTEMP: std::strcpy(buffer,"VORLAUFSOLLTEMP"); break;
        case Property::kRAUMSOLLTEMP_I: std::strcpy(buffer,"RAUMSOLLTEMP_I"); break;
        case Property::kRAUMSOLLTEMP_II: std::strcpy(buffer,"RAUMSOLLTEMP_II"); break;
        case Property::kRAUMSOLLTEMP_III: std::strcpy(buffer,"RAUMSOLLTEMP_III"); break;
        case Property::kRAUMSOLLTEMP_NACHT: std::strcpy(buffer,"RAUMSOLLTEMP_NACHT"); break;
        case Property::kUHRZEIT: std::strcpy(buffer,"UHRZEIT"); break;
        case Property::kDATUM: std::strcpy(buffer,"DATUM"); break;
        case Property::kGERAETE_ID: std::strcpy(buffer,"GERAETE_ID"); break;
        case Property::kAUSSENTEMP: std::strcpy(buffer,"AUSSENTEMP"); break;
        case Property::kSAMMLERISTTEMP: std::strcpy(buffer,"SAMMLERISTTEMP"); break;
        case Property::kSPEICHERISTTEMP: std::strcpy(buffer,"SPEICHERISTTEMP"); break;
        case Property::kVORLAUFISTTEMP: std::strcpy(buffer,"VORLAUFISTTEMP"); break;
        case Property::kGERAETEKONFIGURATION: std::strcpy(buffer,"GERAETEKONFIGURATION"); break;
        case Property::kRAUMISTTEMP: std::strcpy(buffer,"RAUMISTTEMP"); break;
        case Property::kVERSTELLTE_RAUMSOLLTEMP: std::strcpy(buffer,"VERSTELLTE_RAUMSOLLTEMP"); break;
        case Property::kEINSTELL_SPEICHERSOLLTEMP: std::strcpy(buffer,"EINSTELL_SPEICHERSOLLTEMP"); break;
        case Property::kVERDAMPFERTEMP: std::strcpy(buffer,"VERDAMPFERTEMP"); break;
        case Property::kSAMMLERSOLLTEMP: std::strcpy(buffer,"SAMMLERSOLLTEMP"); break;
        case Property::kRUECKLAUFISTTEMP: std::strcpy(buffer,"RUECKLAUFISTTEMP"); break;
        case Property::kSPEICHER_UNTEN_TEMP: std::strcpy(buffer,"SPEICHER_UNTEN_TEMP"); break;
        case Property::kSOLARZONENTEMP: std::strcpy(buffer,"SOLARZONENTEMP"); break;
        case Property::kSPEICHER_OBEN_TEMP: std::strcpy(buffer,"SPEICHER_OBEN_TEMP"); break;
        case Property::kKUNDENKENNUNG: std::strcpy(buffer,"KUNDENKENNUNG"); break;
        case Property::kKOLLEKTORTEMP: std::strcpy(buffer,"KOLLEKTORTEMP"); break;
        case Property::kFESTSTOFFKESSELTEMP: std::strcpy(buffer,"FESTSTOFFKESSELTEMP"); break;
        case Property::kWASSERDRUCK: std::strcpy(buffer,"WASSERDRUCK"); break;
        case Property::kMIN_TEMP_KESSEL: std::strcpy(buffer,"MIN_TEMP_KESSEL"); break;
        case Property::kANFAHRTEMP: std::strcpy(buffer,"ANFAHRTEMP"); break;
        case Property::kHYSTERESEZEIT: std::strcpy(buffer,"HYSTERESEZEIT"); break;
        case Property::kMAX_HYSTERESE: std::strcpy(buffer,"MAX_HYSTERESE"); break;
        case Property::kPPL: std::strcpy(buffer,"PPL"); break;
        case Property::kSPEICHERSPERRE: std::strcpy(buffer,"SPEICHERSPERRE"); break;
        case Property::kSPERRZEIT: std::strcpy(buffer,"SPERRZEIT"); break;
        case Property::kHYSTERESE2: std::strcpy(buffer,"HYSTERESE2"); break;
        case Property::kMAX_TEMP_KESSEL: std::strcpy(buffer,"MAX_TEMP_KESSEL"); break;
        case Property::kMAX_TEMP_HZK: std::strcpy(buffer,"MAX_TEMP_HZK"); break;
        case Property::kKP: std::strcpy(buffer,"KP"); break;
        case Property::kTN: std::strcpy(buffer,"TN"); break;
        case Property::kMISCHERLAUFZEIT: std::strcpy(buffer,"MISCHERLAUFZEIT"); break;
        case Property::kMODGRAD: std::strcpy(buffer,"MODGRAD"); break;
        case Property::kKESSELUEBERHOEHUNG_WW: std::strcpy(buffer,"KESSELUEBERHOEHUNG_WW"); break;
        case Property::kSTAENDIGE_MINIMALBEGRENZUNG: std::strcpy(buffer,"STAENDIGE_MINIMALBEGRENZUNG"); break;
        case Property::kACCESS_EEPROM: std::strcpy(buffer,"ACCESS_EEPROM"); break;
        case Property::kMINDESTABTAUZEIT: std::strcpy(buffer,"MINDESTABTAUZEIT"); break;
        case Property::kACCESS_XRAM: std::strcpy(buffer,"ACCESS_XRAM"); break;
        case Property::kACCESS_IRAM: std::strcpy(buffer,"ACCESS_IRAM"); break;
        case Property::kMIN_WASSERDRUCK: std::strcpy(buffer,"MIN_WASSERDRUCK"); break;
        case Property::kLEISTUNGSKORREKTUR: std::strcpy(buffer,"LEISTUNGSKORREKTUR"); break;
        case Property::kKOLLEKTORTEMP_2: std::strcpy(buffer,"KOLLEKTORTEMP_2"); break;
        case Property::kMULTIFUNKTION_ISTTEMP: std::strcpy(buffer,"MULTIFUNKTION_ISTTEMP"); break;
        case Property::kBRENNER: std::strcpy(buffer,"BRENNER"); break;
        case Property::kHZK_PUMPE: std::strcpy(buffer,"HZK_PUMPE"); break;
        case Property::kSPL_PUMPE: std::strcpy(buffer,"SPL_PUMPE"); break;
        case Property::kDCF: std::strcpy(buffer,"DCF"); break;
        case Property::kMISCHER_AUF: std::strcpy(buffer,"MISCHER_AUF"); break;
        case Property::kMISCHER_ZU: std::strcpy(buffer,"MISCHER_ZU"); break;
        case Property::kHEIZKREIS_STATUS: std::strcpy(buffer,"HEIZKREIS_STATUS"); break;
        case Property::kSPEICHER_STATUS: std::strcpy(buffer,"SPEICHER_STATUS"); break;
        case Property::kSCHALTERSTELLUNG: std::strcpy(buffer,"SCHALTERSTELLUNG"); break;
        case Property::kANFAHRENT: std::strcpy(buffer,"ANFAHRENT"); break;
        case Property::kTEILVORRANG_WW: std::strcpy(buffer,"TEILVORRANG_WW"); break;
        case Property::kSPEICHERBEDARF: std::strcpy(buffer,"SPEICHERBEDARF"); break;
        case Property::kSCHALTFKT_IWS: std::strcpy(buffer,"SCHALTFKT_IWS"); break;
        case Property::kABTAUUNGAKTIV: std::strcpy(buffer,"ABTAUUNGAKTIV"); break;
        case Property::kWAERMEPUMPEN_STATUS: std::strcpy(buffer,"WAERMEPUMPEN_STATUS"); break;
        case Property::kKESSELSTATUS: std::strcpy(buffer,"KESSELSTATUS"); break;
        case Property::kSAMMLER_PUMPE: std::strcpy(buffer,"SAMMLER_PUMPE"); break;
        case Property::kZIRK_PUMPE: std::strcpy(buffer,"ZIRK_PUMPE"); break;
        case Property::kMISCHERSTATUS: std::strcpy(buffer,"MISCHERSTATUS"); break;
        case Property::kSONDERKREIS_STATUS: std::strcpy(buffer,"SONDERKREIS_STATUS"); break;
        case Property::kBETRIEBSART: std::strcpy(buffer,"BETRIEBSART"); break;
        case Property::kIO_TEST: std::strcpy(buffer,"IO_TEST"); break;
        case Property::kRESET_KONFIGURATION: std::strcpy(buffer,"RESET_KONFIGURATION"); break;
        case Property::kPARTY_EIN_AUS: std::strcpy(buffer,"PARTY_EIN_AUS"); break;
        case Property::kECO_EIN_AUS: std::strcpy(buffer,"ECO_EIN_AUS"); break;
        case Property::kWAHLUMSCHALTUNG: std::strcpy(buffer,"WAHLUMSCHALTUNG"); break;
        case Property::kHEIZKREIS_STATUS_PROGSTELL: std::strcpy(buffer,"HEIZKREIS_STATUS_PROGSTELL"); break;
        case Property::kFERIENBETRIEB: std::strcpy(buffer,"FERIENBETRIEB"); break;
        case Property::kDREHZAHLREG_JA_NEIN: std::strcpy(buffer,"DREHZAHLREG_JA_NEIN"); break;
        case Property::kANFORDERUNG_LEISTUNGSZWANG: std::strcpy(buffer,"ANFORDERUNG_LEISTUNGSZWANG"); break;
        case Property::kANTILEG_AKTIV: std::strcpy(buffer,"ANTILEG_AKTIV"); break;
        case Property::kBITSCHALTER: std::strcpy(buffer,"BITSCHALTER"); break;
        case Property::kEVU_SPERRE_AKTIV: std::strcpy(buffer,"EVU_SPERRE_AKTIV"); break;
        case Property::kFEUCHTE: std::strcpy(buffer,"FEUCHTE"); break;
        case Property::kPUFFERTEMP_OBEN1: std::strcpy(buffer,"PUFFERTEMP_OBEN1"); break;
        case Property::kPUFFERTEMP_MITTE1: std::strcpy(buffer,"PUFFERTEMP_MITTE1"); break;
        case Property::kPUFFERTEMP_UNTEN1: std::strcpy(buffer,"PUFFERTEMP_UNTEN1"); break;
        case Property::kPUFFERTEMP_OBEN2: std::strcpy(buffer,"PUFFERTEMP_OBEN2"); break;
        case Property::kPUFFERTEMP_MITTE2: std::strcpy(buffer,"PUFFERTEMP_MITTE2"); break;
        case Property::kPUFFERTEMP_UNTEN2: std::strcpy(buffer,"PUFFERTEMP_UNTEN2"); break;
        case Property::kPUFFERTEMP_OBEN3: std::strcpy(buffer,"PUFFERTEMP_OBEN3"); break;
        case Property::kPUFFERTEMP_MITTE3: std::strcpy(buffer,"PUFFERTEMP_MITTE3"); break;
        case Property::kPUFFERTEMP_UNTEN3: std::strcpy(buffer,"PUFFERTEMP_UNTEN3"); break;
        case Property::kEINSTRAHLUNGS_SENSOR: std::strcpy(buffer,"EINSTRAHLUNGS_SENSOR"); break;
        case Property::kECO_AKZEPTANZ_WW: std::strcpy(buffer,"ECO_AKZEPTANZ_WW"); break;
        case Property::kECO_AKZEPTANZ_RAUM: std::strcpy(buffer,"ECO_AKZEPTANZ_RAUM"); break;
        case Property::kSOLAR_AKT_VOLUMENSTROM: std::strcpy(buffer,"SOLAR_AKT_VOLUMENSTROM"); break;
        case Property::kSOLAR_DURCHSCHNITT_VOLUMENSTROM: std::strcpy(buffer,"SOLAR_DURCHSCHNITT_VOLUMENSTROM"); break;
        case Property::kSOLAR_AKT_LEISTUNG_W: std::strcpy(buffer,"SOLAR_AKT_LEISTUNG_W"); break;
        case Property::kSOLAR_TAGESERTRAG_WH: std::strcpy(buffer,"SOLAR_TAGESERTRAG_WH"); break;
        case Property::kSOLAR_TAGESERTRAG_KWH: std::strcpy(buffer,"SOLAR_TAGESERTRAG_KWH"); break;
        case Property::kSOLAR_GESAMTERTRAG_WH: std::strcpy(buffer,"SOLAR_GESAMTERTRAG_WH"); break;
        case Property::kSOLAR_GESAMTERTRAG_KWH: std::strcpy(buffer,"SOLAR_GESAMTERTRAG_KWH"); break;
        case Property::kSOLAR_GESAMTERTRAG_MWH: std::strcpy(buffer,"SOLAR_GESAMTERTRAG_MWH"); break;
        case Property::kMODGRAD_IST: std::strcpy(buffer,"MODGRAD_IST"); break;
        case Property::kECO_AKZEPTANZ_PUFFER: std::strcpy(buffer,"ECO_AKZEPTANZ_PUFFER"); break;
        case Property::kGESAMT_MODGRAD: std::strcpy(buffer,"GESAMT_MODGRAD"); break;
        case Property::kMIN_MOD_KASKADE: std::strcpy(buffer,"MIN_MOD_KASKADE"); break;
        case Property::kFEUCHTE_HYSTERESE: std::strcpy(buffer,"FEUCHTE_HYSTERESE"); break;
        case Property::kLOAD_STANDARD: std::strcpy(buffer,"LOAD_STANDARD"); break;
        case Property::kONL_CODENUMMER: std::strcpy(buffer,"ONL_CODENUMMER"); break;
        case Property::kSYSTEM_RESET: std::strcpy(buffer,"SYSTEM_RESET"); break;
        case Property::kCAN_FEHLERMELDUNG: std::strcpy(buffer,"CAN_FEHLERMELDUNG"); break;
        case Property::kBUSKONFIGURATION: std::strcpy(buffer,"BUSKONFIGURATION"); break;
        case Property::kINITIALISIERUNG: std::strcpy(buffer,"INITIALISIERUNG"); break;
        case Property::kUNGUELTIG: std::strcpy(buffer,"UNGUELTIG"); break;
        case Property::kANTILEGIONELLEN: std::strcpy(buffer,"ANTILEGIONELLEN"); break;
        case Property::kAUSSENFUEHLER_VERSORGUNG: std::strcpy(buffer,"AUSSENFUEHLER_VERSORGUNG"); break;
        case Property::kAUFHEIZOPTIMIERUNG: std::strcpy(buffer,"AUFHEIZOPTIMIERUNG"); break;
        case Property::kFERIENDAUER_TAGE: std::strcpy(buffer,"FERIENDAUER_TAGE"); break;
        case Property::kRAUMFUEHLERKORREKTUR: std::strcpy(buffer,"RAUMFUEHLERKORREKTUR"); break;
        case Property::kAUSSENTEMPVERZOEGERUNG: std::strcpy(buffer,"AUSSENTEMPVERZOEGERUNG"); break;
        case Property::kCODENUMMER: std::strcpy(buffer,"CODENUMMER"); break;
        case Property::kHEIZKURVE: std::strcpy(buffer,"HEIZKURVE"); break;
        case Property::kRAUMEINFLUSS: std::strcpy(buffer,"RAUMEINFLUSS"); break;
        case Property::kMAX_VORVERLEGUNG: std::strcpy(buffer,"MAX_VORVERLEGUNG"); break;
        case Property::kHZK_KURVENABSTAND: std::strcpy(buffer,"HZK_KURVENABSTAND"); break;
        case Property::kPROGRAMMSCHALTER: std::strcpy(buffer,"PROGRAMMSCHALTER"); break;
        case Property::kSPRACHE: std::strcpy(buffer,"SPRACHE"); break;
        case Property::kAKTIVES_HEIZPROGRAMM: std::strcpy(buffer,"AKTIVES_HEIZPROGRAMM"); break;
        case Property::kHEIZKURVENADAPTION: std::strcpy(buffer,"HEIZKURVENADAPTION"); break;
        case Property::kHEIZGRENZE_TAG: std::strcpy(buffer,"HEIZGRENZE_TAG"); break;
        case Property::kHEIZGRENZE_NACHT: std::strcpy(buffer,"HEIZGRENZE_NACHT"); break;
        case Property::kECO_BETRIEB: std::strcpy(buffer,"ECO_BETRIEB"); break;
        case Property::kAUSWAHL_STANDARDTEMP: std::strcpy(buffer,"AUSWAHL_STANDARDTEMP"); break;
        case Property::kESTRICHFUNKTION: std::strcpy(buffer,"ESTRICHFUNKTION"); break;
        case Property::kFERIENANFANG_TAG: std::strcpy(buffer,"FERIENANFANG_TAG"); break;
        case Property::kFERIENANFANG_MONAT: std::strcpy(buffer,"FERIENANFANG_MONAT"); break;
        case Property::kFERIENANFANG_JAHR: std::strcpy(buffer,"FERIENANFANG_JAHR"); break;
        case Property::kFERIENENDE_TAG: std::strcpy(buffer,"FERIENENDE_TAG"); break;
        case Property::kFERIENENDE_MONAT: std::strcpy(buffer,"FERIENENDE_MONAT"); break;
        case Property::kFERIENENDE_JAHR: std::strcpy(buffer,"FERIENENDE_JAHR"); break;
        case Property::kWOCHENTAG: std::strcpy(buffer,"WOCHENTAG"); break;
        case Property::kTAG: std::strcpy(buffer,"TAG"); break;
        case Property::kMONAT: std::strcpy(buffer,"MONAT"); break;
        case Property::kJAHR: std::strcpy(buffer,"JAHR"); break;
        case Property::kSTUNDE: std::strcpy(buffer,"STUNDE"); break;
        case Property::kMINUTE: std::strcpy(buffer,"MINUTE"); break;
        case Property::kSEKUNDE: std::strcpy(buffer,"SEKUNDE"); break;
        case Property::kBAUWEISE: std::strcpy(buffer,"BAUWEISE"); break;
        case Property::kVORLAUF_NENN_SOLLWERT: std::strcpy(buffer,"VORLAUF_NENN_SOLLWERT"); break;
        case Property::kVORLAUF_REDUZIER_SOLLWERT: std::strcpy(buffer,"VORLAUF_REDUZIER_SOLLWERT"); break;
        case Property::kMIN_TEMP_HZK: std::strcpy(buffer,"MIN_TEMP_HZK"); break;
        case Property::kFERIEN_ABSENKTEMP: std::strcpy(buffer,"FERIEN_ABSENKTEMP"); break;
        case Property::kAUSSCHALTZEITOPTI: std::strcpy(buffer,"AUSSCHALTZEITOPTI"); break;
        case Property::kMAX_PUMPENDREHZAHL: std::strcpy(buffer,"MAX_PUMPENDREHZAHL"); break;
        case Property::kMIN_PUMPENDREHZAHL: std::strcpy(buffer,"MIN_PUMPENDREHZAHL"); break;
        case Property::kBETRIEBSNIVEAU_PWMPUMPE: std::strcpy(buffer,"BETRIEBSNIVEAU_PWMPUMPE"); break;
        case Property::kHZK_PUMPE_ABSENK: std::strcpy(buffer,"HZK_PUMPE_ABSENK"); break;
        case Property::kWW_SOLLWERT_REDUZIERT: std::strcpy(buffer,"WW_SOLLWERT_REDUZIERT"); break;
        case Property::kWW_MAXTEMP: std::strcpy(buffer,"WW_MAXTEMP"); break;
        case Property::kWARMWASSERMODE: std::strcpy(buffer,"WARMWASSERMODE"); break;
        case Property::kADAPT_INFO: std::strcpy(buffer,"ADAPT_INFO"); break;
        case Property::kKESSELSOLLTEMP_2WE: std::strcpy(buffer,"KESSELSOLLTEMP_2WE"); break;
        case Property::kDURCHFLUSS_CH: std::strcpy(buffer,"DURCHFLUSS_CH"); break;
        case Property::kSTANDBY_GEBLAESE_DREHZAHL: std::strcpy(buffer,"STANDBY_GEBLAESE_DREHZAHL"); break;
        case Property::kBENOETIGTE_AUFHEIZZEIT: std::strcpy(buffer,"BENOETIGTE_AUFHEIZZEIT"); break;
        case Property::kABWESENHEITSTEMP: std::strcpy(buffer,"ABWESENHEITSTEMP"); break;
        case Property::kEINSTELL_SPEICHERSOLLTEMP3: std::strcpy(buffer,"EINSTELL_SPEICHERSOLLTEMP3"); break;
        case Property::kK_OS_OBERE_GEBLAESE_DREHZAHL: std::strcpy(buffer,"K_OS_OBERE_GEBLAESE_DREHZAHL"); break;
        case Property::kWW_HYSTERSE: std::strcpy(buffer,"WW_HYSTERSE"); break;
        case Property::kHZK_MODE: std::strcpy(buffer,"HZK_MODE"); break;
        case Property::kHZK_NACHLAUF: std::strcpy(buffer,"HZK_NACHLAUF"); break;
        case Property::kTAKTSPERRE: std::strcpy(buffer,"TAKTSPERRE"); break;
        case Property::kEINMAL_WW_AKTIV: std::strcpy(buffer,"EINMAL_WW_AKTIV"); break;
        case Property::kABGASTEMP: std::strcpy(buffer,"ABGASTEMP"); break;
        case Property::kKUNDEN_KENNUNG: std::strcpy(buffer,"KUNDEN_KENNUNG"); break;
        case Property::kHERSTELLER_KENNUNG: std::strcpy(buffer,"HERSTELLER_KENNUNG"); break;
        case Property::kGERAETE_KENNUNG: std::strcpy(buffer,"GERAETE_KENNUNG"); break;
        case Property::kK_OS_MAX_VL_AENDERUNG: std::strcpy(buffer,"K_OS_MAX_VL_AENDERUNG"); break;
        case Property::kK_OS_MAX_DREHZAHLAENDERUNG: std::strcpy(buffer,"K_OS_MAX_DREHZAHLAENDERUNG"); break;
        case Property::kK_OS_FREIGABEDREHZAHL: std::strcpy(buffer,"K_OS_FREIGABEDREHZAHL"); break;
        case Property::kK_OS_SOFTSTARTZEIT: std::strcpy(buffer,"K_OS_SOFTSTARTZEIT"); break;
        case Property::kRUECKLAUF_HYSTERESE: std::strcpy(buffer,"RUECKLAUF_HYSTERESE"); break;
        case Property::kMIN_PUMPENLEISTUNG: std::strcpy(buffer,"MIN_PUMPENLEISTUNG"); break;
        case Property::kMAX_PUMPENLEISTUNG: std::strcpy(buffer,"MAX_PUMPENLEISTUNG"); break;
        case Property::kPUMPENLEISTUNG_WW: std::strcpy(buffer,"PUMPENLEISTUNG_WW"); break;
        case Property::kPUMPENLEISTUNG_STANDBY: std::strcpy(buffer,"PUMPENLEISTUNG_STANDBY"); break;
        case Property::kK_OS_OBERE_GEBLAESE_DREHZAHL_WW: std::strcpy(buffer,"K_OS_OBERE_GEBLAESE_DREHZAHL_WW"); break;
        case Property::kK_OS_UNTERE_GEBLAESE_DREHZAHL: std::strcpy(buffer,"K_OS_UNTERE_GEBLAESE_DREHZAHL"); break;
        case Property::kGERAETEKONFIGURATION_2: std::strcpy(buffer,"GERAETEKONFIGURATION_2"); break;
        case Property::kQQ_BEI_TRANSPARENT_MODE: std::strcpy(buffer,"QQ_BEI_TRANSPARENT_MODE"); break;
        case Property::kNON_FAILSAVE_CRC: std::strcpy(buffer,"NON_FAILSAVE_CRC"); break;
        case Property::kFAILSAVE_CRC: std::strcpy(buffer,"FAILSAVE_CRC"); break;
        case Property::kDATEN_GESCHRIEBEN: std::strcpy(buffer,"DATEN_GESCHRIEBEN"); break;
        case Property::kK_OS_GRENZE_OBERE_GEBLAESEDREHZAHL: std::strcpy(buffer,"K_OS_GRENZE_OBERE_GEBLAESEDREHZAHL"); break;
        case Property::kKESSELREGLER_P_ANTEIL: std::strcpy(buffer,"KESSELREGLER_P_ANTEIL"); break;
        case Property::kKESSELREGLER_I_ANTEIL: std::strcpy(buffer,"KESSELREGLER_I_ANTEIL"); break;
        case Property::kK_OS_FREIGABEDREHZAHL_SPEICHER_KOMBI: std::strcpy(buffer,"K_OS_FREIGABEDREHZAHL_SPEICHER_KOMBI"); break;
        case Property::kDURCHLAUFREGLER_2_PUNKT_UEBERHOEHUNG: std::strcpy(buffer,"DURCHLAUFREGLER_2_PUNKT_UEBERHOEHUNG"); break;
        case Property::kK_OS_TURBINENPARAMETRIERUNG: std::strcpy(buffer,"K_OS_TURBINENPARAMETRIERUNG"); break;
        case Property::kFAKTOR_DURCHLAUFUEBERHOEHUNG: std::strcpy(buffer,"FAKTOR_DURCHLAUFUEBERHOEHUNG"); break;
        case Property::kZAPFBEGINN: std::strcpy(buffer,"ZAPFBEGINN"); break;
        case Property::kDURCHLAUFREGLER_P_ANTEIL: std::strcpy(buffer,"DURCHLAUFREGLER_P_ANTEIL"); break;
        case Property::kDURCHLAUFREGLER_I_ANTEIL: std::strcpy(buffer,"DURCHLAUFREGLER_I_ANTEIL"); break;
        case Property::kWW_SCHNELL_START_TEMPERATUR: std::strcpy(buffer,"WW_SCHNELL_START_TEMPERATUR"); break;
        case Property::kGASART: std::strcpy(buffer,"GASART"); break;
        case Property::kDURCHFLUSS_WW: std::strcpy(buffer,"DURCHFLUSS_WW"); break;
        case Property::kPWM_SIGNAL_PUMPE: std::strcpy(buffer,"PWM_SIGNAL_PUMPE"); break;
        case Property::kGEBLAESE_SOLLWERT: std::strcpy(buffer,"GEBLAESE_SOLLWERT"); break;
        case Property::kGEBLAESEDREHZAHL: std::strcpy(buffer,"GEBLAESEDREHZAHL"); break;
        case Property::kIO_ISTWERT: std::strcpy(buffer,"IO_ISTWERT"); break;
        case Property::kINDIKATOR: std::strcpy(buffer,"INDIKATOR"); break;
        case Property::kK_OS_EINGANGSZUSTAND_KM351: std::strcpy(buffer,"K_OS_EINGANGSZUSTAND_KM351"); break;
        case Property::kK_OS_AUSGANGSZUSTAND_KM351: std::strcpy(buffer,"K_OS_AUSGANGSZUSTAND_KM351"); break;
        case Property::kK_OS_STATUS_KM351: std::strcpy(buffer,"K_OS_STATUS_KM351"); break;
        case Property::kFEUERUNGSAUTOMAT_STATUS: std::strcpy(buffer,"FEUERUNGSAUTOMAT_STATUS"); break;
        case Property::kBETRIEBS_STATUS: std::strcpy(buffer,"BETRIEBS_STATUS"); break;
        case Property::kZUSTAND_BCC: std::strcpy(buffer,"ZUSTAND_BCC"); break;
        case Property::kBUSKENNUNG: std::strcpy(buffer,"BUSKENNUNG"); break;
        case Property::kK_OS_GERAETEKONFIGURATON: std::strcpy(buffer,"K_OS_GERAETEKONFIGURATON"); break;
        case Property::kTROCKENLAUFFUNKTION: std::strcpy(buffer,"TROCKENLAUFFUNKTION"); break;
        case Property::kMISCHERLEISTUNGSSOLLWERT: std::strcpy(buffer,"MISCHERLEISTUNGSSOLLWERT"); break;
        case Property::kKONFIG_LEISTUNGSSOLLWERT: std::strcpy(buffer,"KONFIG_LEISTUNGSSOLLWERT"); break;
        case Property::kTELEFONKONTAKT: std::strcpy(buffer,"TELEFONKONTAKT"); break;
        case Property::kHEIZ_ZEIT_STATUS: std::strcpy(buffer,"HEIZ_ZEIT_STATUS"); break;
        case Property::kWW_NACHLAUFZEIT: std::strcpy(buffer,"WW_NACHLAUFZEIT"); break;
        case Property::kMAX_WW_LADEZEIT: std::strcpy(buffer,"MAX_WW_LADEZEIT"); break;
        case Property::kMAX_WW_TEMP: std::strcpy(buffer,"MAX_WW_TEMP"); break;
        case Property::kPARAMETER_ZIRKULATIONSPUMPE: std::strcpy(buffer,"PARAMETER_ZIRKULATIONSPUMPE"); break;
        case Property::kFERNBEDIENUNGSZUORDNUNG: std::strcpy(buffer,"FERNBEDIENUNGSZUORDNUNG"); break;
        case Property::kMITTELLUNGSZEIT: std::strcpy(buffer,"MITTELLUNGSZEIT"); break;
        case Property::kEINSTELL_MODULATIONS_SPERRZEIT: std::strcpy(buffer,"EINSTELL_MODULATIONS_SPERRZEIT"); break;
        case Property::kBRENNERART: std::strcpy(buffer,"BRENNERART"); break;
        case Property::kBRENNERSTUFEN_WW: std::strcpy(buffer,"BRENNERSTUFEN_WW"); break;
        case Property::kSOMMER_WINTERZEITUMSTELLUNG: std::strcpy(buffer,"SOMMER_WINTERZEITUMSTELLUNG"); break;
        case Property::kFEIERTAGS_PROGRAMM: std::strcpy(buffer,"FEIERTAGS_PROGRAMM"); break;
        case Property::kFEIER_DAUER: std::strcpy(buffer,"FEIER_DAUER"); break;
        case Property::kUNTERE_GRENZE_MINKESSELTEMP: std::strcpy(buffer,"UNTERE_GRENZE_MINKESSELTEMP"); break;
        case Property::kSERVICE_MINUTEN: std::strcpy(buffer,"SERVICE_MINUTEN"); break;
        case Property::kKONFIG_KONTAKT_OHNE_SPF: std::strcpy(buffer,"KONFIG_KONTAKT_OHNE_SPF"); break;
        case Property::kMODULATIONSDYNAMIK: std::strcpy(buffer,"MODULATIONSDYNAMIK"); break;
        case Property::kMISCHERPARAMETER: std::strcpy(buffer,"MISCHERPARAMETER"); break;
        case Property::kRUECKLAUFTEMPERATURANHEBUNG: std::strcpy(buffer,"RUECKLAUFTEMPERATURANHEBUNG"); break;
        case Property::kBRENNSTOFFVERBRAUCH_PAR_BR1: std::strcpy(buffer,"BRENNSTOFFVERBRAUCH_PAR_BR1"); break;
        case Property::kBRENNSTOFFVERBRAUCH_PAR_BR2: std::strcpy(buffer,"BRENNSTOFFVERBRAUCH_PAR_BR2"); break;
        case Property::kMAX_ABGASTEMP: std::strcpy(buffer,"MAX_ABGASTEMP"); break;
        case Property::kEINSCHALTTEMPERATUR_DIFFERENZ: std::strcpy(buffer,"EINSCHALTTEMPERATUR_DIFFERENZ"); break;
        case Property::kAUSSCHALTTEMPERATUR_DIFFERENZ: std::strcpy(buffer,"AUSSCHALTTEMPERATUR_DIFFERENZ"); break;
        case Property::kBRENNSTOFFVERBRAUCH_BRENNER1: std::strcpy(buffer,"BRENNSTOFFVERBRAUCH_BRENNER1"); break;
        case Property::kBRENNSTOFFVERBRAUCH_BRENNER2: std::strcpy(buffer,"BRENNSTOFFVERBRAUCH_BRENNER2"); break;
        case Property::kMIN_SOLAR_SPEICHERTEMP: std::strcpy(buffer,"MIN_SOLAR_SPEICHERTEMP"); break;
        case Property::kSOFTWARE_NUMMER: std::strcpy(buffer,"SOFTWARE_NUMMER"); break;
        case Property::kSOFTWARE_VERSION: std::strcpy(buffer,"SOFTWARE_VERSION"); break;
        case Property::kSPEICHER_ZEIT_STATUS: std::strcpy(buffer,"SPEICHER_ZEIT_STATUS"); break;
        case Property::kINFO_TYP: std::strcpy(buffer,"INFO_TYP"); break;
        case Property::kMISCHERPARAMETER_ZU: std::strcpy(buffer,"MISCHERPARAMETER_ZU"); break;
        case Property::kWW_BETRIEB: std::strcpy(buffer,"WW_BETRIEB"); break;
        case Property::kMULTIFUNKTIONS_SCHALTHYSTERESE: std::strcpy(buffer,"MULTIFUNKTIONS_SCHALTHYSTERESE"); break;
        case Property::kMULTIFUNKTIONS_SCHALTTEMP: std::strcpy(buffer,"MULTIFUNKTIONS_SCHALTTEMP"); break;
        case Property::kPC_CODENUMMER: std::strcpy(buffer,"PC_CODENUMMER"); break;
        case Property::kMAX_WASSERDRUCK: std::strcpy(buffer,"MAX_WASSERDRUCK"); break;
        case Property::kAUSGANG_KM_OS: std::strcpy(buffer,"AUSGANG_KM_OS"); break;
        case Property::kEINGANG_KM_OS: std::strcpy(buffer,"EINGANG_KM_OS"); break;
        case Property::kK_OS_UNTERE_GEBLAESE_DREHZAHL_WW: std::strcpy(buffer,"K_OS_UNTERE_GEBLAESE_DREHZAHL_WW"); break;
        case Property::kK_OS_GEBLAESE_DREHZAHL_WW: std::strcpy(buffer,"K_OS_GEBLAESE_DREHZAHL_WW"); break;
        case Property::kK_OS_KASKADENRELAIS_EINSCHALTVERZOEGERUNG: std::strcpy(buffer,"K_OS_KASKADENRELAIS_EINSCHALTVERZOEGERUNG"); break;
        case Property::kK_OS_KASKADENRELAIS_AUSSCHALTLEISTUNG: std::strcpy(buffer,"K_OS_KASKADENRELAIS_AUSSCHALTLEISTUNG"); break;
        case Property::kEINGANG_SPANNUNG: std::strcpy(buffer,"EINGANG_SPANNUNG"); break;
        case Property::kEINGANG_STROM: std::strcpy(buffer,"EINGANG_STROM"); break;
        case Property::kDONGLE_NR: std::strcpy(buffer,"DONGLE_NR"); break;
        case Property::kBIVALENTPARALLELTEMPERATUR_HZG: std::strcpy(buffer,"BIVALENTPARALLELTEMPERATUR_HZG"); break;
        case Property::kBIVALENTPARALLELTEMPERATUR_WW: std::strcpy(buffer,"BIVALENTPARALLELTEMPERATUR_WW"); break;
        case Property::kBIVALENZALTERNATIVTEMPERATUR_HZG: std::strcpy(buffer,"BIVALENZALTERNATIVTEMPERATUR_HZG"); break;
        case Property::kBIVALENZALTERNATIVTEMPERATUR_WW: std::strcpy(buffer,"BIVALENZALTERNATIVTEMPERATUR_WW"); break;
        case Property::kQUELLENSOLLTEMPERATUR: std::strcpy(buffer,"QUELLENSOLLTEMPERATUR"); break;
        case Property::kSOLLTEMP_ANZEIGE_0_1: std::strcpy(buffer,"SOLLTEMP_ANZEIGE_0_1"); break;
        case Property::kSOLLTEMP_ANZEIGE_0_2: std::strcpy(buffer,"SOLLTEMP_ANZEIGE_0_2"); break;
        case Property::kSOLLTEMP_ANZEIGE_0_3: std::strcpy(buffer,"SOLLTEMP_ANZEIGE_0_3"); break;
        case Property::kSOLLTEMP_ANZEIGE_1_1: std::strcpy(buffer,"SOLLTEMP_ANZEIGE_1_1"); break;
        case Property::kSOLLTEMP_ANZEIGE_1_2: std::strcpy(buffer,"SOLLTEMP_ANZEIGE_1_2"); break;
        case Property::kSOLLTEMP_ANZEIGE_1_3: std::strcpy(buffer,"SOLLTEMP_ANZEIGE_1_3"); break;
        case Property::kAUSSENTEMPERATUR_WARMWASSER: std::strcpy(buffer,"AUSSENTEMPERATUR_WARMWASSER"); break;
        case Property::kSOLARDIFFERENZ: std::strcpy(buffer,"SOLARDIFFERENZ"); break;
        case Property::kSOLARTEMP_MAX: std::strcpy(buffer,"SOLARTEMP_MAX"); break;
        case Property::kESTRICH_STEIGUNG_PRO_TAG: std::strcpy(buffer,"ESTRICH_STEIGUNG_PRO_TAG"); break;
        case Property::kESTRICH_SOCKELTEMPERATUR: std::strcpy(buffer,"ESTRICH_SOCKELTEMPERATUR"); break;
        case Property::kESTRICH_HALTEN_SOCKELTEMPERATUR: std::strcpy(buffer,"ESTRICH_HALTEN_SOCKELTEMPERATUR"); break;
        case Property::kESTRICH_MAX_TEMPERATUR: std::strcpy(buffer,"ESTRICH_MAX_TEMPERATUR"); break;
        case Property::kESTRICH_HALTEN_MAX_TEMPERATUR: std::strcpy(buffer,"ESTRICH_HALTEN_MAX_TEMPERATUR"); break;
        case Property::kSW_AUSSENTEMP: std::strcpy(buffer,"SW_AUSSENTEMP"); break;
        case Property::kFESTWERT: std::strcpy(buffer,"FESTWERT"); break;
        case Property::kGESAMTERTRAG_WATT: std::strcpy(buffer,"GESAMTERTRAG_WATT"); break;
        case Property::kGESAMTERTRAG_KWATT: std::strcpy(buffer,"GESAMTERTRAG_KWATT"); break;
        case Property::kGESAMTERTRAG_MWATT: std::strcpy(buffer,"GESAMTERTRAG_MWATT"); break;
        case Property::kLAUFZEIT_WP1: std::strcpy(buffer,"LAUFZEIT_WP1"); break;
        case Property::kLAUFZEIT_WP2: std::strcpy(buffer,"LAUFZEIT_WP2"); break;
        case Property::kLAUFZEIT_WP3: std::strcpy(buffer,"LAUFZEIT_WP3"); break;
        case Property::kLAUFZEIT_WP4: std::strcpy(buffer,"LAUFZEIT_WP4"); break;
        case Property::kLAUFZEIT_WP5: std::strcpy(buffer,"LAUFZEIT_WP5"); break;
        case Property::kLAUFZEIT_WP6: std::strcpy(buffer,"LAUFZEIT_WP6"); break;
        case Property::kLAUFZEIT_SOLAR: std::strcpy(buffer,"LAUFZEIT_SOLAR"); break;
        case Property::kLAUFZEIT_2WE: std::strcpy(buffer,"LAUFZEIT_2WE"); break;
        case Property::kSTILLSTANDZEIT_0: std::strcpy(buffer,"STILLSTANDZEIT_0"); break;
        case Property::kSTILLSTANDZEIT_1: std::strcpy(buffer,"STILLSTANDZEIT_1"); break;
        case Property::kSTILLSTANDZEIT_2: std::strcpy(buffer,"STILLSTANDZEIT_2"); break;
        case Property::kSTILLSTANDZEIT_3: std::strcpy(buffer,"STILLSTANDZEIT_3"); break;
        case Property::kSTILLSTANDZEIT_4: std::strcpy(buffer,"STILLSTANDZEIT_4"); break;
        case Property::kSTILLSTANDZEIT_5: std::strcpy(buffer,"STILLSTANDZEIT_5"); break;
        case Property::kPUMPENSTATUS: std::strcpy(buffer,"PUMPENSTATUS"); break;
        case Property::kEVU: std::strcpy(buffer,"EVU"); break;
        case Property::kQUELLE_IST: std::strcpy(buffer,"QUELLE_IST"); break;
        case Property::kPUFFERSOLL: std::strcpy(buffer,"PUFFERSOLL"); break;
        case Property::kWPVORLAUFIST: std::strcpy(buffer,"WPVORLAUFIST"); break;
        case Property::kHILFSKESSELSOLL: std::strcpy(buffer,"HILFSKESSELSOLL"); break;
        case Property::kFUEHLER_1: std::strcpy(buffer,"FUEHLER_1"); break;
        case Property::kFUEHLER_2: std::strcpy(buffer,"FUEHLER_2"); break;
        case Property::kVOLUMENSTROM: std::strcpy(buffer,"VOLUMENSTROM"); break;
        case Property::kERTRAG_AKT: std::strcpy(buffer,"ERTRAG_AKT"); break;
        case Property::kERTRAG_TAG_W: std::strcpy(buffer,"ERTRAG_TAG_W"); break;
        case Property::kERTRAG_TAG_KW: std::strcpy(buffer,"ERTRAG_TAG_KW"); break;
        case Property::kKESSELREGLER_D_ANTEIL: std::strcpy(buffer,"KESSELREGLER_D_ANTEIL"); break;
        case Property::kDURCHLAUFREGLER_D_ANTEIL: std::strcpy(buffer,"DURCHLAUFREGLER_D_ANTEIL"); break;
        case Property::kFUEHLERFROSTSCHUTZ: std::strcpy(buffer,"FUEHLERFROSTSCHUTZ"); break;
        case Property::kPUMPENSTEUERUNG_dT: std::strcpy(buffer,"PUMPENSTEUERUNG_dT"); break;
        case Property::kSOLL_DIFFERENZ_RUECKLAUF: std::strcpy(buffer,"SOLL_DIFFERENZ_RUECKLAUF"); break;
        case Property::kMAX_DIFFERENZ_RUECKLAUF: std::strcpy(buffer,"MAX_DIFFERENZ_RUECKLAUF"); break;
        case Property::kK_OS_GEBLAESEREGLERANPASSUNG: std::strcpy(buffer,"K_OS_GEBLAESEREGLERANPASSUNG"); break;
        case Property::kK_OS_START_PWM: std::strcpy(buffer,"K_OS_START_PWM"); break;
        case Property::kGEBLAESEREGLER_P_ANTEIL: std::strcpy(buffer,"GEBLAESEREGLER_P_ANTEIL"); break;
        case Property::kGEBLAESEREGLER_I_ANTEIL: std::strcpy(buffer,"GEBLAESEREGLER_I_ANTEIL"); break;
        case Property::kMAX_HEIZUNG_TEMP: std::strcpy(buffer,"MAX_HEIZUNG_TEMP"); break;
        case Property::kMAX_POS_GEBLAESEANSTIEG: std::strcpy(buffer,"MAX_POS_GEBLAESEANSTIEG"); break;
        case Property::kMAX_NEG_GEBLAESEANSTIEG: std::strcpy(buffer,"MAX_NEG_GEBLAESEANSTIEG"); break;
        case Property::kSTEP_dT_REGELUNG: std::strcpy(buffer,"STEP_dT_REGELUNG"); break;
        case Property::kABSENKZEIT: std::strcpy(buffer,"ABSENKZEIT"); break;
        case Property::kSCHALTPROG_0_6: std::strcpy(buffer,"SCHALTPROG_0_6"); break;
        case Property::kSCHALTPROG_6_12: std::strcpy(buffer,"SCHALTPROG_6_12"); break;
        case Property::kSCHALTPROG_12_18: std::strcpy(buffer,"SCHALTPROG_12_18"); break;
        case Property::kSCHALTPROG_18_24: std::strcpy(buffer,"SCHALTPROG_18_24"); break;
        case Property::kFEHLERLISTEN_EINTRAG: std::strcpy(buffer,"FEHLERLISTEN_EINTRAG"); break;
        case Property::kFEHLERART: std::strcpy(buffer,"FEHLERART"); break;
        case Property::kZUFALLSZAHL: std::strcpy(buffer,"ZUFALLSZAHL"); break;
        case Property::kDONGELKEY1: std::strcpy(buffer,"DONGELKEY1"); break;
        case Property::kDONGELKEY2: std::strcpy(buffer,"DONGELKEY2"); break;
        case Property::kK_OS_PUMPENLEISTUNG_VORSPUELUNG: std::strcpy(buffer,"K_OS_PUMPENLEISTUNG_VORSPUELUNG"); break;
        case Property::kK_OS_PUMPENTAKTUNG_PAUSE: std::strcpy(buffer,"K_OS_PUMPENTAKTUNG_PAUSE"); break;
        case Property::kK_OS_PUMPENTAKTUNG_PULS: std::strcpy(buffer,"K_OS_PUMPENTAKTUNG_PULS"); break;
        case Property::kK_OS_NEG_HYSTERESE_VORL: std::strcpy(buffer,"K_OS_NEG_HYSTERESE_VORL"); break;
        case Property::kK_OS_WW_SCHNELLSTARTTEMPERATUR: std::strcpy(buffer,"K_OS_WW_SCHNELLSTARTTEMPERATUR"); break;
        case Property::kK_OS_DYN_KESSELHYSTERESE_ZEIT: std::strcpy(buffer,"K_OS_DYN_KESSELHYSTERESE_ZEIT"); break;
        case Property::kK_OS_DYN_KESSELHYSTERESE_DELTA: std::strcpy(buffer,"K_OS_DYN_KESSELHYSTERESE_DELTA"); break;
        case Property::kK_OS_WARMWASSER_HYSTERESE: std::strcpy(buffer,"K_OS_WARMWASSER_HYSTERESE"); break;
        case Property::kK_OS_TOLERANZZEIT_SW_KONTROLLE: std::strcpy(buffer,"K_OS_TOLERANZZEIT_SW_KONTROLLE"); break;
        case Property::kK_OS_TOLERANZZEIT_NON_ZERO_CHECK: std::strcpy(buffer,"K_OS_TOLERANZZEIT_NON_ZERO_CHECK"); break;
        case Property::kK_OS_LEISTUNG_KASKADENRELAIS_EIN: std::strcpy(buffer,"K_OS_LEISTUNG_KASKADENRELAIS_EIN"); break;
        case Property::kK_OS_AUSSCHALTVERZ_KASKADENRELAIS: std::strcpy(buffer,"K_OS_AUSSCHALTVERZ_KASKADENRELAIS"); break;
        case Property::kK_OS_FS_OPTIONEN: std::strcpy(buffer,"K_OS_FS_OPTIONEN"); break;
        case Property::kK_OS_FS_GEBLAESEREGELUNG: std::strcpy(buffer,"K_OS_FS_GEBLAESEREGELUNG"); break;
        case Property::kK_OS_FS_VORSPUELZEIT: std::strcpy(buffer,"K_OS_FS_VORSPUELZEIT"); break;
        case Property::kK_OS_FS_SICHERHEITSZEIT: std::strcpy(buffer,"K_OS_FS_SICHERHEITSZEIT"); break;
        case Property::kK_OS_FS_NACHSPUELZEIT: std::strcpy(buffer,"K_OS_FS_NACHSPUELZEIT"); break;
        case Property::kK_OS_FS_VORZUENDZEIT: std::strcpy(buffer,"K_OS_FS_VORZUENDZEIT"); break;
        case Property::kK_OS_FS_FLAMMENSTABILISIERUNGSZEIT: std::strcpy(buffer,"K_OS_FS_FLAMMENSTABILISIERUNGSZEIT"); break;
        case Property::kK_OS_FS_ZUENDDREHZAHL: std::strcpy(buffer,"K_OS_FS_ZUENDDREHZAHL"); break;
        case Property::kK_OS_FS_VORSPUELDREHZAHL: std::strcpy(buffer,"K_OS_FS_VORSPUELDREHZAHL"); break;
        case Property::kK_OS_FS_NACHSPUELDREHZAHL: std::strcpy(buffer,"K_OS_FS_NACHSPUELDREHZAHL"); break;
        case Property::kK_OS_FS_ANZAHL_STARTVERSUCHE: std::strcpy(buffer,"K_OS_FS_ANZAHL_STARTVERSUCHE"); break;
        case Property::kK_OS_FS_MINIMALE_DREHZAHL: std::strcpy(buffer,"K_OS_FS_MINIMALE_DREHZAHL"); break;
        case Property::kK_OS_FS_MAXIMALE_DREHZAHL: std::strcpy(buffer,"K_OS_FS_MAXIMALE_DREHZAHL"); break;
        case Property::kK_OS_FS_STB_KESSELTEMPERATUR: std::strcpy(buffer,"K_OS_FS_STB_KESSELTEMPERATUR"); break;
        case Property::kK_OS_FS_STW_KESSELTEMPERATUR: std::strcpy(buffer,"K_OS_FS_STW_KESSELTEMPERATUR"); break;
        case Property::kK_OS_FS_ASTB_ABSCHALTTEMPERATUR_ABGAS: std::strcpy(buffer,"K_OS_FS_ASTB_ABSCHALTTEMPERATUR_ABGAS"); break;
        case Property::kK_OS_FS_OFFSET_FLAMMENVERSTAERKER: std::strcpy(buffer,"K_OS_FS_OFFSET_FLAMMENVERSTAERKER"); break;
        case Property::kK_OS_FS_ABSCHALTSCHWELLE_FLAMMENVERST: std::strcpy(buffer,"K_OS_FS_ABSCHALTSCHWELLE_FLAMMENVERST"); break;
        case Property::kK_OS_FS_EINSCHALTSCHWELLE_FLAMMENVERST: std::strcpy(buffer,"K_OS_FS_EINSCHALTSCHWELLE_FLAMMENVERST"); break;
        case Property::kK_OS_FS_MAXIMALE_DREHZAHLGRENZE: std::strcpy(buffer,"K_OS_FS_MAXIMALE_DREHZAHLGRENZE"); break;
        case Property::kK_OS_FS_CRC: std::strcpy(buffer,"K_OS_FS_CRC"); break;
        case Property::kK_OS_DONGLE_NR_LO: std::strcpy(buffer,"K_OS_DONGLE_NR_LO"); break;
        case Property::kK_OS_DONGLE_NR_HI: std::strcpy(buffer,"K_OS_DONGLE_NR_HI"); break;
        case Property::kK_OS_FIRMWARE_01: std::strcpy(buffer,"K_OS_FIRMWARE_01"); break;
        case Property::kK_OS_FIRMWARE_02: std::strcpy(buffer,"K_OS_FIRMWARE_02"); break;
        case Property::kK_OS_FIRMWARE_03: std::strcpy(buffer,"K_OS_FIRMWARE_03"); break;
        case Property::kK_OS_FIRMWARE_04: std::strcpy(buffer,"K_OS_FIRMWARE_04"); break;
        case Property::kK_OS_FIRMWARE_05: std::strcpy(buffer,"K_OS_FIRMWARE_05"); break;
        case Property::kK_OS_BRENNERSTARTS_LO_MID: std::strcpy(buffer,"K_OS_BRENNERSTARTS_LO_MID"); break;
        case Property::kK_OS_BRENNERSTARTS_HI: std::strcpy(buffer,"K_OS_BRENNERSTARTS_HI"); break;
        case Property::kK_OS_NETZBETRIEB_LO_HI: std::strcpy(buffer,"K_OS_NETZBETRIEB_LO_HI"); break;
        case Property::kK_OS_NETZBETRIEB_HI: std::strcpy(buffer,"K_OS_NETZBETRIEB_HI"); break;
        case Property::kK_OS_BRENNERBETRIEB_LO_HI: std::strcpy(buffer,"K_OS_BRENNERBETRIEB_LO_HI"); break;
        case Property::kK_OS_STOERMELDUNG_1: std::strcpy(buffer,"K_OS_STOERMELDUNG_1"); break;
        case Property::kK_OS_STUNDEN_TAGESZAEHLER_1: std::strcpy(buffer,"K_OS_STUNDEN_TAGESZAEHLER_1"); break;
        case Property::kK_OS_STOERMELDUNG_2: std::strcpy(buffer,"K_OS_STOERMELDUNG_2"); break;
        case Property::kK_OS_STUNDEN_TAGESZAEHLER_2: std::strcpy(buffer,"K_OS_STUNDEN_TAGESZAEHLER_2"); break;
        case Property::kK_OS_STOERMELDUNG_3: std::strcpy(buffer,"K_OS_STOERMELDUNG_3"); break;
        case Property::kK_OS_STUNDEN_TAGESZAEHLER_3: std::strcpy(buffer,"K_OS_STUNDEN_TAGESZAEHLER_3"); break;
        case Property::kK_OS_STOERMELDUNG_4: std::strcpy(buffer,"K_OS_STOERMELDUNG_4"); break;
        case Property::kK_OS_STUNDEN_TAGESZAEHLER_4: std::strcpy(buffer,"K_OS_STUNDEN_TAGESZAEHLER_4"); break;
        case Property::kK_OS_STOERMELDUNG_5: std::strcpy(buffer,"K_OS_STOERMELDUNG_5"); break;
        case Property::kK_OS_STUNDEN_TAGESZAEHLER_5: std::strcpy(buffer,"K_OS_STUNDEN_TAGESZAEHLER_5"); break;
        case Property::kK_OS_STOERMELDUNG_6: std::strcpy(buffer,"K_OS_STOERMELDUNG_6"); break;
        case Property::kK_OS_STUNDEN_TAGESZAEHLER_6: std::strcpy(buffer,"K_OS_STUNDEN_TAGESZAEHLER_6"); break;
        case Property::kK_OS_STOERMELDUNG_7: std::strcpy(buffer,"K_OS_STOERMELDUNG_7"); break;
        case Property::kK_OS_STUNDEN_TAGESZAEHLER_7: std::strcpy(buffer,"K_OS_STUNDEN_TAGESZAEHLER_7"); break;
        case Property::kK_OS_STOERMELDUNG_8: std::strcpy(buffer,"K_OS_STOERMELDUNG_8"); break;
        case Property::kK_OS_STUNDEN_TAGESZAEHLER_8: std::strcpy(buffer,"K_OS_STUNDEN_TAGESZAEHLER_8"); break;
        case Property::kK_OS_STOERMELDUNG_9: std::strcpy(buffer,"K_OS_STOERMELDUNG_9"); break;
        case Property::kK_OS_STUNDEN_TAGESZAEHLER_9: std::strcpy(buffer,"K_OS_STUNDEN_TAGESZAEHLER_9"); break;
        case Property::kK_OS_STOERMELDUNG_10: std::strcpy(buffer,"K_OS_STOERMELDUNG_10"); break;
        case Property::kK_OS_STUNDEN_TAGESZAEHLER_10: std::strcpy(buffer,"K_OS_STUNDEN_TAGESZAEHLER_10"); break;
        case Property::kK_OS_20S_ZAEHLER: std::strcpy(buffer,"K_OS_20S_ZAEHLER"); break;
        case Property::kDEBUG_MEMORY_POINTER: std::strcpy(buffer,"DEBUG_MEMORY_POINTER"); break;
        case Property::kDEBUG_MEMORY_WERT_INT8: std::strcpy(buffer,"DEBUG_MEMORY_WERT_INT8"); break;
        case Property::kDEBUG_MEMORY_WERT_INT16: std::strcpy(buffer,"DEBUG_MEMORY_WERT_INT16"); break;
        case Property::kDEBUG_EEPROM_POINTER: std::strcpy(buffer,"DEBUG_EEPROM_POINTER"); break;
        case Property::kDEBUG_EEPROM_WERT_INT8: std::strcpy(buffer,"DEBUG_EEPROM_WERT_INT8"); break;
        case Property::kDEBUG_EEPROM_WERT_INT16: std::strcpy(buffer,"DEBUG_EEPROM_WERT_INT16"); break;
        case Property::kTARGET_COMPILING_DATE: std::strcpy(buffer,"TARGET_COMPILING_DATE"); break;
        case Property::kTARGET_COMPILING_TIME: std::strcpy(buffer,"TARGET_COMPILING_TIME"); break;
        case Property::kENTRIEGELN_FA: std::strcpy(buffer,"ENTRIEGELN_FA"); break;
        case Property::kLAUFZEIT_DHC1: std::strcpy(buffer,"LAUFZEIT_DHC1"); break;
        case Property::kLAUFZEIT_DHC2: std::strcpy(buffer,"LAUFZEIT_DHC2"); break;
        case Property::kGEBLAESEKUEHLUNG: std::strcpy(buffer,"GEBLAESEKUEHLUNG"); break;
        case Property::kVORLAUFSOLL_GEBLAESE: std::strcpy(buffer,"VORLAUFSOLL_GEBLAESE"); break;
        case Property::kRAUMSOLL_GEBLAESE: std::strcpy(buffer,"RAUMSOLL_GEBLAESE"); break;
        case Property::kHYSTERESE_GEBLAESE: std::strcpy(buffer,"HYSTERESE_GEBLAESE"); break;
        case Property::kFLAECHENKUEHLUNG: std::strcpy(buffer,"FLAECHENKUEHLUNG"); break;
        case Property::kVORLAUFSOLL_FLAECHE: std::strcpy(buffer,"VORLAUFSOLL_FLAECHE"); break;
        case Property::kRAUMSOLL_FLAECHE: std::strcpy(buffer,"RAUMSOLL_FLAECHE"); break;
        case Property::kHYSTERESE_FLAECHE: std::strcpy(buffer,"HYSTERESE_FLAECHE"); break;
        case Property::kWWKORREKTUR: std::strcpy(buffer,"WWKORREKTUR"); break;
        case Property::kTAUPUNKT_TEMP: std::strcpy(buffer,"TAUPUNKT_TEMP"); break;
        case Property::kHEISSGAS_TEMP: std::strcpy(buffer,"HEISSGAS_TEMP"); break;
        case Property::kHDSENSOR_TEMP: std::strcpy(buffer,"HDSENSOR_TEMP"); break;
        case Property::kTASTENSPERRE: std::strcpy(buffer,"TASTENSPERRE"); break;
        case Property::kMASCHINENDRUCK: std::strcpy(buffer,"MASCHINENDRUCK"); break;
        case Property::kEXT_RAUMFUEHLER: std::strcpy(buffer,"EXT_RAUMFUEHLER"); break;
        case Property::kWARTUNGSMELDUNGSZEIT: std::strcpy(buffer,"WARTUNGSMELDUNGSZEIT"); break;
        case Property::kGEBLAESE_ZUENDDREHZAHL: std::strcpy(buffer,"GEBLAESE_ZUENDDREHZAHL"); break;
        case Property::kGEBLAESE_VORSPUELDREHZAHL: std::strcpy(buffer,"GEBLAESE_VORSPUELDREHZAHL"); break;
        case Property::kMIN_DURCHFLUSS_FA: std::strcpy(buffer,"MIN_DURCHFLUSS_FA"); break;
        case Property::kDURCHFLUSS_SCHUTZ_FA: std::strcpy(buffer,"DURCHFLUSS_SCHUTZ_FA"); break;
        case Property::kHYSTERESE_MOD_KESSEL: std::strcpy(buffer,"HYSTERESE_MOD_KESSEL"); break;
        case Property::kGERAETEFOLGE_1: std::strcpy(buffer,"GERAETEFOLGE_1"); break;
        case Property::kGERAETEFOLGE_2: std::strcpy(buffer,"GERAETEFOLGE_2"); break;
        case Property::kGERAETEFOLGE_3: std::strcpy(buffer,"GERAETEFOLGE_3"); break;
        case Property::kGERAETEFOLGE_4: std::strcpy(buffer,"GERAETEFOLGE_4"); break;
        case Property::kSAMMLERKONSTANT_TEMP: std::strcpy(buffer,"SAMMLERKONSTANT_TEMP"); break;
        case Property::kUMSCHALTUNG_SPEICHERVORRANG: std::strcpy(buffer,"UMSCHALTUNG_SPEICHERVORRANG"); break;
        case Property::kDT_MAX_PARALLELBETRIEB: std::strcpy(buffer,"DT_MAX_PARALLELBETRIEB"); break;
        case Property::kOFFSET_TIME_MISCHERRELAIS: std::strcpy(buffer,"OFFSET_TIME_MISCHERRELAIS"); break;
        case Property::kSYSTEMAUSWAHL: std::strcpy(buffer,"SYSTEMAUSWAHL"); break;
        case Property::kTEMPERATURWAECHTER_TEMP: std::strcpy(buffer,"TEMPERATURWAECHTER_TEMP"); break;
        case Property::kGESPEICHERTE_FEHLER_LOESCHEN: std::strcpy(buffer,"GESPEICHERTE_FEHLER_LOESCHEN"); break;
        case Property::kFEHLERSTATISTIK_FELDINDEX: std::strcpy(buffer,"FEHLERSTATISTIK_FELDINDEX"); break;
        case Property::kFEHLERSTATISTIK_FEHLERNUMMER: std::strcpy(buffer,"FEHLERSTATISTIK_FEHLERNUMMER"); break;
        case Property::kFEHLERSTATISTIK_FEHLERANZAHL: std::strcpy(buffer,"FEHLERSTATISTIK_FEHLERANZAHL"); break;
        case Property::kWW_ECO: std::strcpy(buffer,"WW_ECO"); break;
        case Property::kANZEIGE_HEIZPROG_NACH_HEIZKREIS: std::strcpy(buffer,"ANZEIGE_HEIZPROG_NACH_HEIZKREIS"); break;
        case Property::kSAMMEL_SOLAR_STATUS: std::strcpy(buffer,"SAMMEL_SOLAR_STATUS"); break;
        case Property::kMODULATION_SOLLWERT_SOLAR_1: std::strcpy(buffer,"MODULATION_SOLLWERT_SOLAR_1"); break;
        case Property::kMODULATION_SOLLWERT_SOLAR_2: std::strcpy(buffer,"MODULATION_SOLLWERT_SOLAR_2"); break;
        case Property::kMIN_TEMP_KESSEL_HEIZBETRIEB: std::strcpy(buffer,"MIN_TEMP_KESSEL_HEIZBETRIEB"); break;
        case Property::kMAX_TEMP_KESSEL_HEIZBETRIEB: std::strcpy(buffer,"MAX_TEMP_KESSEL_HEIZBETRIEB"); break;
        case Property::kHZK_PUMPENDREHZAHL_SOLLWERT: std::strcpy(buffer,"HZK_PUMPENDREHZAHL_SOLLWERT"); break;
        case Property::kWEICHENISTTEMP: std::strcpy(buffer,"WEICHENISTTEMP"); break;
        case Property::kKUEHLMODE: std::strcpy(buffer,"KUEHLMODE"); break;
        case Property::kKUEHLDYNAMIK_FLAECHE: std::strcpy(buffer,"KUEHLDYNAMIK_FLAECHE"); break;
        case Property::kKUEHLDYNAMIK_GEBLAESE: std::strcpy(buffer,"KUEHLDYNAMIK_GEBLAESE"); break;
        case Property::kMIN_WW_TEMP: std::strcpy(buffer,"MIN_WW_TEMP"); break;
        case Property::kRAUMEINFLUSS_PAR_ON_OFF: std::strcpy(buffer,"RAUMEINFLUSS_PAR_ON_OFF"); break;
        case Property::kRUECKLAUFKONFIGURATION: std::strcpy(buffer,"RUECKLAUFKONFIGURATION"); break;
        case Property::kBYPASSPUMPEN_STATUS: std::strcpy(buffer,"BYPASSPUMPEN_STATUS"); break;
        case Property::kSPG_KURVE: std::strcpy(buffer,"SPG_KURVE"); break;
        case Property::kSPG_KURVE_U1: std::strcpy(buffer,"SPG_KURVE_U1"); break;
        case Property::kSPG_KURVE_U2: std::strcpy(buffer,"SPG_KURVE_U2"); break;
        case Property::kSPG_KURVE_T1: std::strcpy(buffer,"SPG_KURVE_T1"); break;
        case Property::kSPG_KURVE_T2: std::strcpy(buffer,"SPG_KURVE_T2"); break;
        case Property::kSPG_KURVE_U_AUS: std::strcpy(buffer,"SPG_KURVE_U_AUS"); break;
        case Property::kWE1_TYP: std::strcpy(buffer,"WE1_TYP"); break;
        case Property::kWE_REGELUNGSTYP: std::strcpy(buffer,"WE_REGELUNGSTYP"); break;
        case Property::kWE1_PELLET: std::strcpy(buffer,"WE1_PELLET"); break;
        case Property::kWE1_BUS: std::strcpy(buffer,"WE1_BUS"); break;
        case Property::kWE2_TYP: std::strcpy(buffer,"WE2_TYP"); break;
        case Property::kHZ_PUFFER: std::strcpy(buffer,"HZ_PUFFER"); break;
        case Property::kWE2_SPEICHER: std::strcpy(buffer,"WE2_SPEICHER"); break;
        case Property::kWE2_MAXTEMP: std::strcpy(buffer,"WE2_MAXTEMP"); break;
        case Property::kWE2_MINTEMP: std::strcpy(buffer,"WE2_MINTEMP"); break;
        case Property::kKESSELMODGRAD_BEI_WW: std::strcpy(buffer,"KESSELMODGRAD_BEI_WW"); break;
        case Property::kMIN_WE_MODGRAD: std::strcpy(buffer,"MIN_WE_MODGRAD"); break;
        case Property::kTN_KASKADE: std::strcpy(buffer,"TN_KASKADE"); break;
        case Property::kQUOTIENT_KASKADE_AUF: std::strcpy(buffer,"QUOTIENT_KASKADE_AUF"); break;
        case Property::kQUOTIENT_KASKADE_AB: std::strcpy(buffer,"QUOTIENT_KASKADE_AB"); break;
        case Property::kANZAHL_START_KESSEL: std::strcpy(buffer,"ANZAHL_START_KESSEL"); break;
        case Property::kAKTIVE_FOLGE: std::strcpy(buffer,"AKTIVE_FOLGE"); break;
        case Property::kWARTUNG_BETRIEBS_STD: std::strcpy(buffer,"WARTUNG_BETRIEBS_STD"); break;
        case Property::kBUSABSCHLUSS: std::strcpy(buffer,"BUSABSCHLUSS"); break;
        case Property::kFUNKTION_MFR_INDEX: std::strcpy(buffer,"FUNKTION_MFR_INDEX"); break;
        case Property::kFKT_MFR_FUNKTION: std::strcpy(buffer,"FKT_MFR_FUNKTION"); break;
        case Property::kFKT_MFR_SCHALTTEMP: std::strcpy(buffer,"FKT_MFR_SCHALTTEMP"); break;
        case Property::kFKT_MFR_HYSTERESE: std::strcpy(buffer,"FKT_MFR_HYSTERESE"); break;
        case Property::kBRENNER_INDEX: std::strcpy(buffer,"BRENNER_INDEX"); break;
        case Property::kBRENNER_LEISTUNG: std::strcpy(buffer,"BRENNER_LEISTUNG"); break;
        case Property::kBRENNER_STARTS: std::strcpy(buffer,"BRENNER_STARTS"); break;
        case Property::kBRENNER_LAUFZEIT: std::strcpy(buffer,"BRENNER_LAUFZEIT"); break;
        case Property::kABGELAUFENE_WARTUNGSZEIT: std::strcpy(buffer,"ABGELAUFENE_WARTUNGSZEIT"); break;
        case Property::kPUMPENSTOPP_MIT_RAUMREGLER: std::strcpy(buffer,"PUMPENSTOPP_MIT_RAUMREGLER"); break;
        case Property::kABSENKSTOP: std::strcpy(buffer,"ABSENKSTOP"); break;
        case Property::kAUSSENTEMP_MAX: std::strcpy(buffer,"AUSSENTEMP_MAX"); break;
        case Property::kAUSSENTEMP_MIN: std::strcpy(buffer,"AUSSENTEMP_MIN"); break;
        case Property::kANZAHL_STARTVERSUCHE: std::strcpy(buffer,"ANZAHL_STARTVERSUCHE"); break;
        case Property::kFA_STATUS: std::strcpy(buffer,"FA_STATUS"); break;
        case Property::kFERNBEDIENUNG: std::strcpy(buffer,"FERNBEDIENUNG"); break;
        case Property::kWW_DURCHLADEN: std::strcpy(buffer,"WW_DURCHLADEN"); break;
        case Property::kEXT_SOLLTEMP: std::strcpy(buffer,"EXT_SOLLTEMP"); break;
        case Property::kRUECKLAUFISTTEMP_2: std::strcpy(buffer,"RUECKLAUFISTTEMP_2"); break;
        case Property::kANFORDERUNG_KONSTANTTEMPERATUR: std::strcpy(buffer,"ANFORDERUNG_KONSTANTTEMPERATUR"); break;
        case Property::kMATERIALNUMMER_LOW: std::strcpy(buffer,"MATERIALNUMMER_LOW"); break;
        case Property::kMATERIALNUMMER_HIGH: std::strcpy(buffer,"MATERIALNUMMER_HIGH"); break;
        case Property::kPUMPENDREHZAHL_HEIZEN : std::strcpy(buffer,"PUMPENDREHZAHL_HEIZEN "); break;
        case Property::kLEISTUNG_PUMPE_HZK: std::strcpy(buffer,"LEISTUNG_PUMPE_HZK"); break;
        case Property::kLEISTUNG_PUMPE_SPL: std::strcpy(buffer,"LEISTUNG_PUMPE_SPL"); break;
        case Property::kLEISTUNG_PUMPE_WW_PRI: std::strcpy(buffer,"LEISTUNG_PUMPE_WW_PRI"); break;
        case Property::kSOLARPUMPEN_STATUS_1: std::strcpy(buffer,"SOLARPUMPEN_STATUS_1"); break;
        case Property::kSOLARPUMPEN_STATUS_2: std::strcpy(buffer,"SOLARPUMPEN_STATUS_2"); break;
        case Property::kLADEPUMPE_PUFFER_1: std::strcpy(buffer,"LADEPUMPE_PUFFER_1"); break;
        case Property::kLADEPUMPE_PUFFER_2: std::strcpy(buffer,"LADEPUMPE_PUFFER_2"); break;
        case Property::kLADEPUMPE_PUFFER_3: std::strcpy(buffer,"LADEPUMPE_PUFFER_3"); break;
        case Property::kVOLUMENSTROM_SOLARPUMPE_1: std::strcpy(buffer,"VOLUMENSTROM_SOLARPUMPE_1"); break;
        case Property::kVOLUMENSTROM_SOLARPUMPE_2: std::strcpy(buffer,"VOLUMENSTROM_SOLARPUMPE_2"); break;
        case Property::kSOLARPUMPE_DREHZAHL_SOLL_1: std::strcpy(buffer,"SOLARPUMPE_DREHZAHL_SOLL_1"); break;
        case Property::kSOLARPUMPE_DREHZAHL_MAX_1: std::strcpy(buffer,"SOLARPUMPE_DREHZAHL_MAX_1"); break;
        case Property::kSOLARPUMPE_DREHZAHL_MIN_1: std::strcpy(buffer,"SOLARPUMPE_DREHZAHL_MIN_1"); break;
        case Property::kSOLARPUMPE_DREHZAHLDYNAMIK_1: std::strcpy(buffer,"SOLARPUMPE_DREHZAHLDYNAMIK_1"); break;
        case Property::kKOLLEKTORANZAHL: std::strcpy(buffer,"KOLLEKTORANZAHL"); break;
        case Property::kPRIO_1_PUFFER: std::strcpy(buffer,"PRIO_1_PUFFER"); break;
        case Property::kPRIO_2_PUFFER: std::strcpy(buffer,"PRIO_2_PUFFER"); break;
        case Property::kPRIO_3_PUFFER: std::strcpy(buffer,"PRIO_3_PUFFER"); break;
        case Property::kWE_GEFUNDEN: std::strcpy(buffer,"WE_GEFUNDEN"); break;
        case Property::kWE_KONFIG_OK: std::strcpy(buffer,"WE_KONFIG_OK"); break;
        case Property::kBUS_SCAN: std::strcpy(buffer,"BUS_SCAN"); break;
        case Property::kWE2_ISTTEMP: std::strcpy(buffer,"WE2_ISTTEMP"); break;
        case Property::kWE_KONFIGURATION: std::strcpy(buffer,"WE_KONFIGURATION"); break;
        case Property::kVOLUMENSTROM_PUMPE_HZK: std::strcpy(buffer,"VOLUMENSTROM_PUMPE_HZK"); break;
        case Property::kVOLUMENSTROM_PUMPE_SPL: std::strcpy(buffer,"VOLUMENSTROM_PUMPE_SPL"); break;
        case Property::kVOLUMENSTROM_PUMPE_WW_PRI: std::strcpy(buffer,"VOLUMENSTROM_PUMPE_WW_PRI"); break;
        case Property::kSOLAR_WOCHENERTRAG_WH: std::strcpy(buffer,"SOLAR_WOCHENERTRAG_WH"); break;
        case Property::kSOLAR_WOCHENERTRAG_KWH: std::strcpy(buffer,"SOLAR_WOCHENERTRAG_KWH"); break;
        case Property::kSOLAR_WOCHENERTRAG_MWH: std::strcpy(buffer,"SOLAR_WOCHENERTRAG_MWH"); break;
        case Property::kSOLAR_JAHRESERTRAG_WH: std::strcpy(buffer,"SOLAR_JAHRESERTRAG_WH"); break;
        case Property::kSOLAR_JAHRESERTRAG_KWH: std::strcpy(buffer,"SOLAR_JAHRESERTRAG_KWH"); break;
        case Property::kSOLAR_JAHRESERTRAG_MWH: std::strcpy(buffer,"SOLAR_JAHRESERTRAG_MWH"); break;
        case Property::kSOLAR_UMSCHALTVENTIL_1: std::strcpy(buffer,"SOLAR_UMSCHALTVENTIL_1"); break;
        case Property::kSOLAR_UMSCHALTVENTIL_2: std::strcpy(buffer,"SOLAR_UMSCHALTVENTIL_2"); break;
        case Property::kSOLAR_UMSCHALTVENTIL_3: std::strcpy(buffer,"SOLAR_UMSCHALTVENTIL_3"); break;
        case Property::kSOLARPUMPENDREHZAL_1: std::strcpy(buffer,"SOLARPUMPENDREHZAL_1"); break;
        case Property::kSOLARPUMPENDREHZAL_2: std::strcpy(buffer,"SOLARPUMPENDREHZAL_2"); break;
        case Property::kSOLARPUMPENDREHZAL_3: std::strcpy(buffer,"SOLARPUMPENDREHZAL_3"); break;
        case Property::kSOLAR_BETRIEBSSTATUS: std::strcpy(buffer,"SOLAR_BETRIEBSSTATUS"); break;
        case Property::kANFORDERUNG_NACHHEIZUNG: std::strcpy(buffer,"ANFORDERUNG_NACHHEIZUNG"); break;
        case Property::kMODUL_IDENTIFIKATION: std::strcpy(buffer,"MODUL_IDENTIFIKATION"); break;
        case Property::kAEE_STATUS: std::strcpy(buffer,"AEE_STATUS"); break;
        case Property::kKOLLEKTORSCHUTZFUNKTION: std::strcpy(buffer,"KOLLEKTORSCHUTZFUNKTION"); break;
        case Property::kKOLLEKTORMAXTEMP: std::strcpy(buffer,"KOLLEKTORMAXTEMP"); break;
        case Property::kSOLARSPEICHER_ZUORDNUNG: std::strcpy(buffer,"SOLARSPEICHER_ZUORDNUNG"); break;
        case Property::kDURCHFLUSSMENGE_SOLAR: std::strcpy(buffer,"DURCHFLUSSMENGE_SOLAR"); break;
        case Property::kSOLARPUMPENBETRIEBSSTUNDEN1: std::strcpy(buffer,"SOLARPUMPENBETRIEBSSTUNDEN1"); break;
        case Property::kSOLARPUMPENBETRIEBSSTUNDEN2: std::strcpy(buffer,"SOLARPUMPENBETRIEBSSTUNDEN2"); break;
        case Property::kSOLARRUECKLAUFTEMP: std::strcpy(buffer,"SOLARRUECKLAUFTEMP"); break;
        case Property::kSOLAR_MONATRSERTRAG_W_1: std::strcpy(buffer,"SOLAR_MONATRSERTRAG_W_1"); break;
        case Property::kSOLAR_MONATRSERTRAG_W_2: std::strcpy(buffer,"SOLAR_MONATRSERTRAG_W_2"); break;
        case Property::kSOLAR_MONATRSERTRAG_W_3: std::strcpy(buffer,"SOLAR_MONATRSERTRAG_W_3"); break;
        case Property::kSOLAR_MONATRSERTRAG_W_4: std::strcpy(buffer,"SOLAR_MONATRSERTRAG_W_4"); break;
        case Property::kSOLAR_MONATRSERTRAG_W_5: std::strcpy(buffer,"SOLAR_MONATRSERTRAG_W_5"); break;
        case Property::kSOLAR_MONATRSERTRAG_W_6: std::strcpy(buffer,"SOLAR_MONATRSERTRAG_W_6"); break;
        case Property::kSOLAR_MONATRSERTRAG_W_7: std::strcpy(buffer,"SOLAR_MONATRSERTRAG_W_7"); break;
        case Property::kSOLAR_MONATRSERTRAG_W_8: std::strcpy(buffer,"SOLAR_MONATRSERTRAG_W_8"); break;
        case Property::kSOLAR_MONATRSERTRAG_W_9: std::strcpy(buffer,"SOLAR_MONATRSERTRAG_W_9"); break;
        case Property::kSOLAR_MONATRSERTRAG_W_10: std::strcpy(buffer,"SOLAR_MONATRSERTRAG_W_10"); break;
        case Property::kSOLAR_MONATRSERTRAG_W_11: std::strcpy(buffer,"SOLAR_MONATRSERTRAG_W_11"); break;
        case Property::kSOLAR_MONATRSERTRAG_W_12: std::strcpy(buffer,"SOLAR_MONATRSERTRAG_W_12"); break;
        case Property::kSOLAR_MONATRSERTRAG_KW_1: std::strcpy(buffer,"SOLAR_MONATRSERTRAG_KW_1"); break;
        case Property::kSOLAR_MONATRSERTRAG_KW_2: std::strcpy(buffer,"SOLAR_MONATRSERTRAG_KW_2"); break;
        case Property::kSOLAR_MONATRSERTRAG_KW_3: std::strcpy(buffer,"SOLAR_MONATRSERTRAG_KW_3"); break;
        case Property::kSOLAR_MONATRSERTRAG_KW_4: std::strcpy(buffer,"SOLAR_MONATRSERTRAG_KW_4"); break;
        case Property::kSOLAR_MONATRSERTRAG_KW_5: std::strcpy(buffer,"SOLAR_MONATRSERTRAG_KW_5"); break;
        case Property::kSOLAR_MONATRSERTRAG_KW_6: std::strcpy(buffer,"SOLAR_MONATRSERTRAG_KW_6"); break;
        case Property::kSOLAR_MONATRSERTRAG_KW_7: std::strcpy(buffer,"SOLAR_MONATRSERTRAG_KW_7"); break;
        case Property::kSOLAR_MONATRSERTRAG_KW_8: std::strcpy(buffer,"SOLAR_MONATRSERTRAG_KW_8"); break;
        case Property::kSOLAR_MONATRSERTRAG_KW_9: std::strcpy(buffer,"SOLAR_MONATRSERTRAG_KW_9"); break;
        case Property::kSOLAR_MONATRSERTRAG_KW_10: std::strcpy(buffer,"SOLAR_MONATRSERTRAG_KW_10"); break;
        case Property::kSOLAR_MONATRSERTRAG_KW_11: std::strcpy(buffer,"SOLAR_MONATRSERTRAG_KW_11"); break;
        case Property::kSOLAR_MONATRSERTRAG_KW_12: std::strcpy(buffer,"SOLAR_MONATRSERTRAG_KW_12"); break;
        case Property::kSOLAR_MONATRSERTRAG_MW_1: std::strcpy(buffer,"SOLAR_MONATRSERTRAG_MW_1"); break;
        case Property::kSOLAR_MONATRSERTRAG_MW_2: std::strcpy(buffer,"SOLAR_MONATRSERTRAG_MW_2"); break;
        case Property::kSOLAR_MONATRSERTRAG_MW_3: std::strcpy(buffer,"SOLAR_MONATRSERTRAG_MW_3"); break;
        case Property::kSOLAR_MONATRSERTRAG_MW_4: std::strcpy(buffer,"SOLAR_MONATRSERTRAG_MW_4"); break;
        case Property::kSOLAR_MONATRSERTRAG_MW_5: std::strcpy(buffer,"SOLAR_MONATRSERTRAG_MW_5"); break;
        case Property::kSOLAR_MONATRSERTRAG_MW_6: std::strcpy(buffer,"SOLAR_MONATRSERTRAG_MW_6"); break;
        case Property::kSOLAR_MONATRSERTRAG_MW_7: std::strcpy(buffer,"SOLAR_MONATRSERTRAG_MW_7"); break;
        case Property::kSOLAR_MONATRSERTRAG_MW_8: std::strcpy(buffer,"SOLAR_MONATRSERTRAG_MW_8"); break;
        case Property::kSOLAR_MONATRSERTRAG_MW_9: std::strcpy(buffer,"SOLAR_MONATRSERTRAG_MW_9"); break;
        case Property::kSOLAR_MONATRSERTRAG_MW_10: std::strcpy(buffer,"SOLAR_MONATRSERTRAG_MW_10"); break;
        case Property::kSOLAR_MONATRSERTRAG_MW_11: std::strcpy(buffer,"SOLAR_MONATRSERTRAG_MW_11"); break;
        case Property::kSOLAR_MONATRSERTRAG_MW_12: std::strcpy(buffer,"SOLAR_MONATRSERTRAG_MW_12"); break;
        case Property::kSOLAR_JAHRESERTRAG_W_1: std::strcpy(buffer,"SOLAR_JAHRESERTRAG_W_1"); break;
        case Property::kSOLAR_JAHRESERTRAG_W_2: std::strcpy(buffer,"SOLAR_JAHRESERTRAG_W_2"); break;
        case Property::kSOLAR_JAHRESERTRAG_W_3: std::strcpy(buffer,"SOLAR_JAHRESERTRAG_W_3"); break;
        case Property::kSOLAR_JAHRESERTRAG_W_4: std::strcpy(buffer,"SOLAR_JAHRESERTRAG_W_4"); break;
        case Property::kSOLAR_JAHRESERTRAG_W_5: std::strcpy(buffer,"SOLAR_JAHRESERTRAG_W_5"); break;
        case Property::kSOLAR_JAHRESERTRAG_KW_1: std::strcpy(buffer,"SOLAR_JAHRESERTRAG_KW_1"); break;
        case Property::kSOLAR_JAHRESERTRAG_KW_2: std::strcpy(buffer,"SOLAR_JAHRESERTRAG_KW_2"); break;
        case Property::kSOLAR_JAHRESERTRAG_KW_3: std::strcpy(buffer,"SOLAR_JAHRESERTRAG_KW_3"); break;
        case Property::kSOLAR_JAHRESERTRAG_KW_4: std::strcpy(buffer,"SOLAR_JAHRESERTRAG_KW_4"); break;
        case Property::kSOLAR_JAHRESERTRAG_KW_5: std::strcpy(buffer,"SOLAR_JAHRESERTRAG_KW_5"); break;
        case Property::kSOLAR_JAHRESERTRAG_MW_1: std::strcpy(buffer,"SOLAR_JAHRESERTRAG_MW_1"); break;
        case Property::kSOLAR_JAHRESERTRAG_MW_2: std::strcpy(buffer,"SOLAR_JAHRESERTRAG_MW_2"); break;
        case Property::kSOLAR_JAHRESERTRAG_MW_3: std::strcpy(buffer,"SOLAR_JAHRESERTRAG_MW_3"); break;
        case Property::kSOLAR_JAHRESERTRAG_MW_4: std::strcpy(buffer,"SOLAR_JAHRESERTRAG_MW_4"); break;
        case Property::kSOLAR_JAHRESERTRAG_MW_5: std::strcpy(buffer,"SOLAR_JAHRESERTRAG_MW_5"); break;
        case Property::kSPARBETRIEB_BIVALENZ: std::strcpy(buffer,"SPARBETRIEB_BIVALENZ"); break;
        case Property::kWARTEZEIT_DHC: std::strcpy(buffer,"WARTEZEIT_DHC"); break;
        case Property::kSTUFEN_DHC: std::strcpy(buffer,"STUFEN_DHC"); break;
        case Property::kFREIGEGEBENE_DHC_STUFEN: std::strcpy(buffer,"FREIGEGEBENE_DHC_STUFEN"); break;
        case Property::kVERDAMPFERTEMP_LUEFTUNG: std::strcpy(buffer,"VERDAMPFERTEMP_LUEFTUNG"); break;
        case Property::kFROSTSCHUTZTEMP_LUEFTUNG: std::strcpy(buffer,"FROSTSCHUTZTEMP_LUEFTUNG"); break;
        case Property::kMINDESTVOLUMENSTROM_LUEFTUNG: std::strcpy(buffer,"MINDESTVOLUMENSTROM_LUEFTUNG"); break;
        case Property::kABSENKVOLUMENSTROM_LUEFTUNG: std::strcpy(buffer,"ABSENKVOLUMENSTROM_LUEFTUNG"); break;
        case Property::kNORMALVOLUMENSTROM_LUEFTUNG: std::strcpy(buffer,"NORMALVOLUMENSTROM_LUEFTUNG"); break;
        case Property::kPARTYVOLUMENSTROM_LUEFTUNG: std::strcpy(buffer,"PARTYVOLUMENSTROM_LUEFTUNG"); break;
        case Property::kNACHTKUEHLUNG_LUEFTUNG: std::strcpy(buffer,"NACHTKUEHLUNG_LUEFTUNG"); break;
        case Property::kSOMMERBETRIEB_LUEFTUNG: std::strcpy(buffer,"SOMMERBETRIEB_LUEFTUNG"); break;
        case Property::kFILTER_RESET_NACH_LAUFZEIT: std::strcpy(buffer,"FILTER_RESET_NACH_LAUFZEIT"); break;
        case Property::kINTEGRAL_REGELABWEICHUNG: std::strcpy(buffer,"INTEGRAL_REGELABWEICHUNG"); break;
        case Property::kREGELABWEICHUNG: std::strcpy(buffer,"REGELABWEICHUNG"); break;
        case Property::kPROGRAMMSCHALTER_LUEFTUNG: std::strcpy(buffer,"PROGRAMMSCHALTER_LUEFTUNG"); break;
        case Property::kABLUFTTEMPERATUR_SOLL: std::strcpy(buffer,"ABLUFTTEMPERATUR_SOLL"); break;
        case Property::kLAUFZEIT_DHC3: std::strcpy(buffer,"LAUFZEIT_DHC3"); break;
        case Property::kLAUFZEIT_FILTER: std::strcpy(buffer,"LAUFZEIT_FILTER"); break;
        case Property::kEINSCHALTTEMPERATUR_DIFFERENZ2: std::strcpy(buffer,"EINSCHALTTEMPERATUR_DIFFERENZ2"); break;
        case Property::kAUSSCHALTTEMPERATUR_DIFFERENZ2: std::strcpy(buffer,"AUSSCHALTTEMPERATUR_DIFFERENZ2"); break;
        case Property::kSOLARSPEICHER_ZUORDNUNG2: std::strcpy(buffer,"SOLARSPEICHER_ZUORDNUNG2"); break;
        case Property::kDREHZAHLREGELUNG_SOLARPUMPE1: std::strcpy(buffer,"DREHZAHLREGELUNG_SOLARPUMPE1"); break;
        case Property::kDREHZAHLREGELUNG_SOLARPUMPE2: std::strcpy(buffer,"DREHZAHLREGELUNG_SOLARPUMPE2"); break;
        case Property::kBRENNERSPERRZEIT_BEI_RUECKLAUFANHEBUNG_SOLAR: std::strcpy(buffer,"BRENNERSPERRZEIT_BEI_RUECKLAUFANHEBUNG_SOLAR"); break;
        case Property::kEINSCHALTDIFFERENZ_RUECKLAUFANHEBUNG_SOLAR: std::strcpy(buffer,"EINSCHALTDIFFERENZ_RUECKLAUFANHEBUNG_SOLAR"); break;
        case Property::kAUSSCHALTDIFFERENZ_RUECKLAUFANHEBUNG_SOLAR: std::strcpy(buffer,"AUSSCHALTDIFFERENZ_RUECKLAUFANHEBUNG_SOLAR"); break;
        case Property::kSPEICHERVORRANG_FUER_2_SPEICHER_SOLARANLAGEN: std::strcpy(buffer,"SPEICHERVORRANG_FUER_2_SPEICHER_SOLARANLAGEN"); break;
        case Property::kSP_PARALLELBETR_TEMP_DIFF_SOLAR: std::strcpy(buffer,"SP_PARALLELBETR_TEMP_DIFF_SOLAR"); break;
        case Property::kEINSCHALT_KOLLEKTEMP_BEI_SOLBYPASS_SCHALT: std::strcpy(buffer,"EINSCHALT_KOLLEKTEMP_BEI_SOLBYPASS_SCHALT"); break;
        case Property::kSP_UMSCHICHTUNG_BEI_ANTILEG_BETRIEB: std::strcpy(buffer,"SP_UMSCHICHTUNG_BEI_ANTILEG_BETRIEB"); break;
        case Property::kVERFLUESSIGERTEMP: std::strcpy(buffer,"VERFLUESSIGERTEMP"); break;
        case Property::kOEL_VERBRAUCH_LOW: std::strcpy(buffer,"OEL_VERBRAUCH_LOW"); break;
        case Property::kOEL_VERBRAUCH_HIGH: std::strcpy(buffer,"OEL_VERBRAUCH_HIGH"); break;
        case Property::kMIN_MODULATIONSSTROM_ERDGAS: std::strcpy(buffer,"MIN_MODULATIONSSTROM_ERDGAS"); break;
        case Property::kMAX_MODULATIONSSTROM_HEIZUNG_ERDGAS: std::strcpy(buffer,"MAX_MODULATIONSSTROM_HEIZUNG_ERDGAS"); break;
        case Property::kMAX_MODULATIONSSTROM_WW_ERDGAS: std::strcpy(buffer,"MAX_MODULATIONSSTROM_WW_ERDGAS"); break;
        case Property::kMIN_MODULATIONSSTROM_FLUESSIGGAS: std::strcpy(buffer,"MIN_MODULATIONSSTROM_FLUESSIGGAS"); break;
        case Property::kMAX_MODULATIONSSTROM_HEIZUNG_FLUESSIGGAS: std::strcpy(buffer,"MAX_MODULATIONSSTROM_HEIZUNG_FLUESSIGGAS"); break;
        case Property::kMAX_MODULATIONSSTROM_WW_FLUESSIGGAS: std::strcpy(buffer,"MAX_MODULATIONSSTROM_WW_FLUESSIGGAS"); break;
        case Property::kPRUEFSTATUS: std::strcpy(buffer,"PRUEFSTATUS"); break;
        case Property::kHARDWARE_NUMMER: std::strcpy(buffer,"HARDWARE_NUMMER"); break;
        case Property::kGERAETEKONFIGURATION_3: std::strcpy(buffer,"GERAETEKONFIGURATION_3"); break;
        case Property::kAFB_PROGRAMMSCHALTER: std::strcpy(buffer,"AFB_PROGRAMMSCHALTER"); break;
        case Property::kAFB_VORHANDEN: std::strcpy(buffer,"AFB_VORHANDEN"); break;
        case Property::kAFB_SOLLWERTVERSTELLUNG: std::strcpy(buffer,"AFB_SOLLWERTVERSTELLUNG"); break;
        case Property::kAFB_TELEFONKONTAKT: std::strcpy(buffer,"AFB_TELEFONKONTAKT"); break;
        case Property::kAFB_RAUMISTTEMPERATUR: std::strcpy(buffer,"AFB_RAUMISTTEMPERATUR"); break;
        case Property::kK_OS_WEICHENREGLER_I_ANTEIL: std::strcpy(buffer,"K_OS_WEICHENREGLER_I_ANTEIL"); break;
        case Property::kK_OS_WEICHENREGLER_P_ANTEIL: std::strcpy(buffer,"K_OS_WEICHENREGLER_P_ANTEIL"); break;
        case Property::kK_OS_WARTEZEIT_NACH_VORSPUELEN: std::strcpy(buffer,"K_OS_WARTEZEIT_NACH_VORSPUELEN"); break;
        case Property::kK_OS_KESSELLEISTUNG_PUMPENLEISTUNG_MAX: std::strcpy(buffer,"K_OS_KESSELLEISTUNG_PUMPENLEISTUNG_MAX"); break;
        case Property::kK_OS_GEBLAESE_ABTASTRATE: std::strcpy(buffer,"K_OS_GEBLAESE_ABTASTRATE"); break;
        case Property::kK_OS_ZUENDSTELLUNG: std::strcpy(buffer,"K_OS_ZUENDSTELLUNG"); break;
        case Property::kK_FEHLERZAEHLER_01: std::strcpy(buffer,"K_FEHLERZAEHLER_01"); break;
        case Property::kK_FEHLERZAEHLER_02: std::strcpy(buffer,"K_FEHLERZAEHLER_02"); break;
        case Property::kK_FEHLERZAEHLER_03: std::strcpy(buffer,"K_FEHLERZAEHLER_03"); break;
        case Property::kK_FEHLERZAEHLER_04: std::strcpy(buffer,"K_FEHLERZAEHLER_04"); break;
        case Property::kK_FEHLERZAEHLER_05: std::strcpy(buffer,"K_FEHLERZAEHLER_05"); break;
        case Property::kK_FEHLERZAEHLER_06: std::strcpy(buffer,"K_FEHLERZAEHLER_06"); break;
        case Property::kK_FEHLERZAEHLER_07: std::strcpy(buffer,"K_FEHLERZAEHLER_07"); break;
        case Property::kK_FEHLERZAEHLER_08: std::strcpy(buffer,"K_FEHLERZAEHLER_08"); break;
        case Property::kK_FEHLERZAEHLER_09: std::strcpy(buffer,"K_FEHLERZAEHLER_09"); break;
        case Property::kK_FEHLERZAEHLER_10: std::strcpy(buffer,"K_FEHLERZAEHLER_10"); break;
        case Property::kK_FEHLERZAEHLER_11: std::strcpy(buffer,"K_FEHLERZAEHLER_11"); break;
        case Property::kK_FEHLERZAEHLER_12: std::strcpy(buffer,"K_FEHLERZAEHLER_12"); break;
        case Property::kK_FEHLERZAEHLER_13: std::strcpy(buffer,"K_FEHLERZAEHLER_13"); break;
        case Property::kK_FEHLERZAEHLER_14: std::strcpy(buffer,"K_FEHLERZAEHLER_14"); break;
        case Property::kK_FEHLERZAEHLER_15: std::strcpy(buffer,"K_FEHLERZAEHLER_15"); break;
        case Property::kK_FEHLERZAEHLER_16: std::strcpy(buffer,"K_FEHLERZAEHLER_16"); break;
        case Property::kK_FEHLERZAEHLER_17: std::strcpy(buffer,"K_FEHLERZAEHLER_17"); break;
        case Property::kK_FEHLERZAEHLER_18: std::strcpy(buffer,"K_FEHLERZAEHLER_18"); break;
        case Property::kK_FEHLERZAEHLER_19: std::strcpy(buffer,"K_FEHLERZAEHLER_19"); break;
        case Property::kK_FEHLERZAEHLER_20: std::strcpy(buffer,"K_FEHLERZAEHLER_20"); break;
        case Property::kK_FEHLERZAEHLER_21: std::strcpy(buffer,"K_FEHLERZAEHLER_21"); break;
        case Property::kK_FEHLERZAEHLER_22: std::strcpy(buffer,"K_FEHLERZAEHLER_22"); break;
        case Property::kK_FEHLERZAEHLER_23: std::strcpy(buffer,"K_FEHLERZAEHLER_23"); break;
        case Property::kK_FEHLERZAEHLER_24: std::strcpy(buffer,"K_FEHLERZAEHLER_24"); break;
        case Property::kK_FEHLERZAEHLER_25: std::strcpy(buffer,"K_FEHLERZAEHLER_25"); break;
        case Property::kK_OS_STOERMELDUNG_POINTER: std::strcpy(buffer,"K_OS_STOERMELDUNG_POINTER"); break;
        case Property::kK_OS_STOERMELDUNG_11: std::strcpy(buffer,"K_OS_STOERMELDUNG_11"); break;
        case Property::kK_OS_STOERMELDUNG_12: std::strcpy(buffer,"K_OS_STOERMELDUNG_12"); break;
        case Property::kK_OS_STOERMELDUNG_13: std::strcpy(buffer,"K_OS_STOERMELDUNG_13"); break;
        case Property::kK_OS_STOERMELDUNG_14: std::strcpy(buffer,"K_OS_STOERMELDUNG_14"); break;
        case Property::kK_OS_STOERMELDUNG_15: std::strcpy(buffer,"K_OS_STOERMELDUNG_15"); break;
        case Property::kK_OS_STOERMELDUNG_16: std::strcpy(buffer,"K_OS_STOERMELDUNG_16"); break;
        case Property::kK_OS_STOERMELDUNG_17: std::strcpy(buffer,"K_OS_STOERMELDUNG_17"); break;
        case Property::kK_OS_STOERMELDUNG_18: std::strcpy(buffer,"K_OS_STOERMELDUNG_18"); break;
        case Property::kK_OS_STOERMELDUNG_19: std::strcpy(buffer,"K_OS_STOERMELDUNG_19"); break;
        case Property::kK_OS_STOERMELDUNG_20: std::strcpy(buffer,"K_OS_STOERMELDUNG_20"); break;
        case Property::kK_OS_DUMMY: std::strcpy(buffer,"K_OS_DUMMY"); break;
        case Property::kK_OS_STARTBEDINGUNGEN_1: std::strcpy(buffer,"K_OS_STARTBEDINGUNGEN_1"); break;
        case Property::kK_OS_STARTBEDINGUNGEN_2: std::strcpy(buffer,"K_OS_STARTBEDINGUNGEN_2"); break;
        case Property::kK_OS_STARTBEDINGUNGEN_3: std::strcpy(buffer,"K_OS_STARTBEDINGUNGEN_3"); break;
        case Property::kK_OS_SAMLERIST_FUEHLER: std::strcpy(buffer,"K_OS_SAMLERIST_FUEHLER"); break;
        case Property::kKESSELISTTEMP_2: std::strcpy(buffer,"KESSELISTTEMP_2"); break;
        case Property::kWW_AUSLAUFTEMPERATUR: std::strcpy(buffer,"WW_AUSLAUFTEMPERATUR"); break;
        case Property::kMODULATIONSSTROM_GASVENTIL: std::strcpy(buffer,"MODULATIONSSTROM_GASVENTIL"); break;
        case Property::kMAX_VORVERLEGUNG_MIN: std::strcpy(buffer,"MAX_VORVERLEGUNG_MIN"); break;
        case Property::kWE1_GRADIENTENUEBERWACHUNG: std::strcpy(buffer,"WE1_GRADIENTENUEBERWACHUNG"); break;
        case Property::kWE2_GRADIENTENUEBERWACHUNG: std::strcpy(buffer,"WE2_GRADIENTENUEBERWACHUNG"); break;
        case Property::kBUSKENNUNG_2: std::strcpy(buffer,"BUSKENNUNG_2"); break;
        case Property::kBUSKENNUNG_3: std::strcpy(buffer,"BUSKENNUNG_3"); break;
        case Property::kZIRKULATIONSTEMP: std::strcpy(buffer,"ZIRKULATIONSTEMP"); break;
        case Property::kZUSCHALTSPERRE_KASKADE_PAR: std::strcpy(buffer,"ZUSCHALTSPERRE_KASKADE_PAR"); break;
        case Property::kHYSTERESE_ZUSCHALTSPERRE: std::strcpy(buffer,"HYSTERESE_ZUSCHALTSPERRE"); break;
        case Property::kKSOLL_RUECKLANHEB_HOLZKESSEL1: std::strcpy(buffer,"KSOLL_RUECKLANHEB_HOLZKESSEL1"); break;
        case Property::kKSOLL_RUECKLANHEB_HYST1: std::strcpy(buffer,"KSOLL_RUECKLANHEB_HYST1"); break;
        case Property::kKSOLL_RUECKLANHEB_HOLZKESSEL2: std::strcpy(buffer,"KSOLL_RUECKLANHEB_HOLZKESSEL2"); break;
        case Property::kKSOLL_RUECKLANHEB_HYST2: std::strcpy(buffer,"KSOLL_RUECKLANHEB_HYST2"); break;
        case Property::kLADEPUMPE_PUFFER_DREHZAL_1: std::strcpy(buffer,"LADEPUMPE_PUFFER_DREHZAL_1"); break;
        case Property::kLADEPUMPE_PUFFER_DREHZAL_2: std::strcpy(buffer,"LADEPUMPE_PUFFER_DREHZAL_2"); break;
        case Property::kLADEPUMPE_PUFFER_DREHZAL_3: std::strcpy(buffer,"LADEPUMPE_PUFFER_DREHZAL_3"); break;
        case Property::kMISCHER_ABTASTZEIT: std::strcpy(buffer,"MISCHER_ABTASTZEIT"); break;
        case Property::kMISCHER_BETRIEBSART: std::strcpy(buffer,"MISCHER_BETRIEBSART"); break;
        case Property::kHD_EVE_GRENZWERT_VND: std::strcpy(buffer,"HD_EVE_GRENZWERT_VND"); break;
        case Property::kANZAHL_KUEHLUNGSSTUFEN: std::strcpy(buffer,"ANZAHL_KUEHLUNGSSTUFEN"); break;
        case Property::kKONFIGURATION_KUEHLUNG: std::strcpy(buffer,"KONFIGURATION_KUEHLUNG"); break;
        case Property::kMISCHER_KP: std::strcpy(buffer,"MISCHER_KP"); break;
        case Property::kMISCHER_TN: std::strcpy(buffer,"MISCHER_TN"); break;
        case Property::kMISCHER_TV: std::strcpy(buffer,"MISCHER_TV"); break;
        case Property::kPERIODENDAUER_ABTAUEN: std::strcpy(buffer,"PERIODENDAUER_ABTAUEN"); break;
        case Property::kRELATIVE_ABTAUDAUER1: std::strcpy(buffer,"RELATIVE_ABTAUDAUER1"); break;
        case Property::kRELATIVE_ABTAUDAUER2: std::strcpy(buffer,"RELATIVE_ABTAUDAUER2"); break;
        case Property::kMAX_ABTAUDAUER_VERDAMPFER: std::strcpy(buffer,"MAX_ABTAUDAUER_VERDAMPFER"); break;
        case Property::kWE1_TYP_NEU: std::strcpy(buffer,"WE1_TYP_NEU"); break;
        case Property::kBUSSYSTEM: std::strcpy(buffer,"BUSSYSTEM"); break;
        case Property::kWAERMEERTRAG_RUECKGE_TAG_WH: std::strcpy(buffer,"WAERMEERTRAG_RUECKGE_TAG_WH"); break;
        case Property::kWAERMEERTRAG_RUECKGE_TAG_KWH: std::strcpy(buffer,"WAERMEERTRAG_RUECKGE_TAG_KWH"); break;
        case Property::kWAERMEERTRAG_RUECKGE_SUMME_KWH: std::strcpy(buffer,"WAERMEERTRAG_RUECKGE_SUMME_KWH"); break;
        case Property::kWAERMEERTRAG_RUECKGE_SUMME_MWH: std::strcpy(buffer,"WAERMEERTRAG_RUECKGE_SUMME_MWH"); break;
        case Property::kSOLAR_MAX_DREHZAHL_TEMP: std::strcpy(buffer,"SOLAR_MAX_DREHZAHL_TEMP"); break;
        case Property::kSOLAR_KOLLEKTOR_FREIGABETEMP: std::strcpy(buffer,"SOLAR_KOLLEKTOR_FREIGABETEMP"); break;
        case Property::kSOLAR_KOLLEKTOR_SPERRTEMP: std::strcpy(buffer,"SOLAR_KOLLEKTOR_SPERRTEMP"); break;
        case Property::kSOLAR_FREIGABETEMP_2WE: std::strcpy(buffer,"SOLAR_FREIGABETEMP_2WE"); break;
        case Property::kSOLAR_MAX_TEMP_2WE: std::strcpy(buffer,"SOLAR_MAX_TEMP_2WE"); break;
        case Property::kSOLAR_KOLLEKTORSCHUTZTEMP: std::strcpy(buffer,"SOLAR_KOLLEKTORSCHUTZTEMP"); break;
        case Property::kSOLAR_SCHALTSCHWELLE_RUECKKUEHLUNG: std::strcpy(buffer,"SOLAR_SCHALTSCHWELLE_RUECKKUEHLUNG"); break;
        case Property::kSOLAR_ZIRKPUMPE_EINSCHALTZEIT: std::strcpy(buffer,"SOLAR_ZIRKPUMPE_EINSCHALTZEIT"); break;
        case Property::kSOLAR_ZIRKPUMPE_AUSSCHALTZEIT: std::strcpy(buffer,"SOLAR_ZIRKPUMPE_AUSSCHALTZEIT"); break;
        case Property::kSOLAR_NACHHEIZEN_EINSCHALTZEIT: std::strcpy(buffer,"SOLAR_NACHHEIZEN_EINSCHALTZEIT"); break;
        case Property::kSOLAR_NACHHEIZEN_AUSSCHALTZEIT: std::strcpy(buffer,"SOLAR_NACHHEIZEN_AUSSCHALTZEIT"); break;
        case Property::kSOLAR_ANLAGENAUSWAHL: std::strcpy(buffer,"SOLAR_ANLAGENAUSWAHL"); break;
        case Property::kSOLAR_TOLERANZ_SOLARERTRAG: std::strcpy(buffer,"SOLAR_TOLERANZ_SOLARERTRAG"); break;
        case Property::kSOLAR_MIN_RUECKLAUFTEMP: std::strcpy(buffer,"SOLAR_MIN_RUECKLAUFTEMP"); break;
        case Property::kSOLAR_VOLUMENSTROMVERTEILUNG_WMZ: std::strcpy(buffer,"SOLAR_VOLUMENSTROMVERTEILUNG_WMZ"); break;
        case Property::kSOLAR_IMPULSRATE_EINHEIT_WMZ: std::strcpy(buffer,"SOLAR_IMPULSRATE_EINHEIT_WMZ"); break;
        case Property::kSOLAR_ZUSATZRELAISFUNKTION2: std::strcpy(buffer,"SOLAR_ZUSATZRELAISFUNKTION2"); break;
        case Property::kSOLAR_ZUSATZRELAISFUNKTION: std::strcpy(buffer,"SOLAR_ZUSATZRELAISFUNKTION"); break;
        case Property::kSOLAR_MAX_DREHZAHL: std::strcpy(buffer,"SOLAR_MAX_DREHZAHL"); break;
        case Property::kSOLAR_MIN_DREHZAHL: std::strcpy(buffer,"SOLAR_MIN_DREHZAHL"); break;
        case Property::kSOLAR_HAND_DREHZAHLSOLL: std::strcpy(buffer,"SOLAR_HAND_DREHZAHLSOLL"); break;
        case Property::kSOLAR_BETRIEBSART_DREHZAHL: std::strcpy(buffer,"SOLAR_BETRIEBSART_DREHZAHL"); break;
        case Property::kSOLAR_THERMOSTATFUNKTION_EINSCHALTTEMP: std::strcpy(buffer,"SOLAR_THERMOSTATFUNKTION_EINSCHALTTEMP"); break;
        case Property::kSOLAR_THERMOSTATFUNKTION_AUSSCHALTDIFFERENZ: std::strcpy(buffer,"SOLAR_THERMOSTATFUNKTION_AUSSCHALTDIFFERENZ"); break;
        case Property::kSOLAR_ROEHRENKOLLEKTORFUNKTION: std::strcpy(buffer,"SOLAR_ROEHRENKOLLEKTORFUNKTION"); break;
        case Property::kSOLAR_FROSTSCHUTZFUNKTION: std::strcpy(buffer,"SOLAR_FROSTSCHUTZFUNKTION"); break;
        case Property::kSOLAR_SPEICHERLADUNG_ERFOLGREICH: std::strcpy(buffer,"SOLAR_SPEICHERLADUNG_ERFOLGREICH"); break;
        case Property::kEINSCHALTTEMPERATUR_DIFFERENZ3: std::strcpy(buffer,"EINSCHALTTEMPERATUR_DIFFERENZ3"); break;
        case Property::kAUSSCHALTTEMPERATUR_DIFFERENZ3: std::strcpy(buffer,"AUSSCHALTTEMPERATUR_DIFFERENZ3"); break;
        case Property::kMAXTEMP_ERDSONDE: std::strcpy(buffer,"MAXTEMP_ERDSONDE"); break;
        case Property::kMAXTEMP_ERDSONDE_WIEDEREIN: std::strcpy(buffer,"MAXTEMP_ERDSONDE_WIEDEREIN"); break;
        case Property::kMAXTEMP_SCHWIMMBAD: std::strcpy(buffer,"MAXTEMP_SCHWIMMBAD"); break;
        case Property::kMAXTEMP_SCHWIMMBAD_WIEDEREIN: std::strcpy(buffer,"MAXTEMP_SCHWIMMBAD_WIEDEREIN"); break;
        case Property::kSOLAR_HAND_DREHZAHL2_SOLL: std::strcpy(buffer,"SOLAR_HAND_DREHZAHL2_SOLL"); break;
        case Property::kDURCHFLUSSMENGE_SOLAR_SOLL: std::strcpy(buffer,"DURCHFLUSSMENGE_SOLAR_SOLL"); break;
        case Property::kDURCHFLUSSMENGE_SOLAR2: std::strcpy(buffer,"DURCHFLUSSMENGE_SOLAR2"); break;
        case Property::kDURCHFLUSSMENGE_SOLAR2_SOLL: std::strcpy(buffer,"DURCHFLUSSMENGE_SOLAR2_SOLL"); break;
        case Property::kKUEHL_FREIGABE_TEMPERATUR: std::strcpy(buffer,"KUEHL_FREIGABE_TEMPERATUR"); break;
        case Property::kKUEHL_VORLAUFSOLLTEMP: std::strcpy(buffer,"KUEHL_VORLAUFSOLLTEMP"); break;
        case Property::kKUEHL_RUECKLAUFSOLLTEMP: std::strcpy(buffer,"KUEHL_RUECKLAUFSOLLTEMP"); break;
        case Property::kSOLAR_HYSTERESE_NACHHEIZUNG: std::strcpy(buffer,"SOLAR_HYSTERESE_NACHHEIZUNG"); break;
        case Property::kUMLADUNG_PUMPEMSTATUS1: std::strcpy(buffer,"UMLADUNG_PUMPEMSTATUS1"); break;
        case Property::kUMLADUNG_PUMPEMSTATUS2: std::strcpy(buffer,"UMLADUNG_PUMPEMSTATUS2"); break;
        case Property::kHF_FELDSTAERKE: std::strcpy(buffer,"HF_FELDSTAERKE"); break;
        case Property::kKUEHLDYNAMIK_FLAECHE_PASSIV: std::strcpy(buffer,"KUEHLDYNAMIK_FLAECHE_PASSIV"); break;
        case Property::kKUEHLDYNAMIK_GEBLAESE_PASSIV: std::strcpy(buffer,"KUEHLDYNAMIK_GEBLAESE_PASSIV"); break;
        case Property::kMANAGER_SYSTEM_INFOS: std::strcpy(buffer,"MANAGER_SYSTEM_INFOS"); break;
        case Property::kQUELLENPUMPEN_STATUS: std::strcpy(buffer,"QUELLENPUMPEN_STATUS"); break;
        case Property::kKUEHL_AUSGANG: std::strcpy(buffer,"KUEHL_AUSGANG"); break;
        case Property::kWERKSTEST_BESTANDEN: std::strcpy(buffer,"WERKSTEST_BESTANDEN"); break;
        case Property::kKESSEL_1_STUFE_1_LEISTUNG: std::strcpy(buffer,"KESSEL_1_STUFE_1_LEISTUNG"); break;
        case Property::kKESSEL_2_STUFE_1_LEISTUNG: std::strcpy(buffer,"KESSEL_2_STUFE_1_LEISTUNG"); break;
        case Property::kKESSEL_3_STUFE_1_LEISTUNG: std::strcpy(buffer,"KESSEL_3_STUFE_1_LEISTUNG"); break;
        case Property::kKESSEL_4_STUFE_1_LEISTUNG: std::strcpy(buffer,"KESSEL_4_STUFE_1_LEISTUNG"); break;
        case Property::kKESSEL_5_STUFE_1_LEISTUNG: std::strcpy(buffer,"KESSEL_5_STUFE_1_LEISTUNG"); break;
        case Property::kKESSEL_6_STUFE_1_LEISTUNG: std::strcpy(buffer,"KESSEL_6_STUFE_1_LEISTUNG"); break;
        case Property::kKESSEL_7_STUFE_1_LEISTUNG: std::strcpy(buffer,"KESSEL_7_STUFE_1_LEISTUNG"); break;
        case Property::kKESSEL_8_STUFE_1_LEISTUNG: std::strcpy(buffer,"KESSEL_8_STUFE_1_LEISTUNG"); break;
        case Property::kKESSEL_9_STUFE_1_LEISTUNG: std::strcpy(buffer,"KESSEL_9_STUFE_1_LEISTUNG"); break;
        case Property::kKESSEL_10_STUFE_1_LEISTUNG: std::strcpy(buffer,"KESSEL_10_STUFE_1_LEISTUNG"); break;
        case Property::kKESSEL_11_STUFE_1_LEISTUNG: std::strcpy(buffer,"KESSEL_11_STUFE_1_LEISTUNG"); break;
        case Property::kKESSEL_12_STUFE_1_LEISTUNG: std::strcpy(buffer,"KESSEL_12_STUFE_1_LEISTUNG"); break;
        case Property::kKESSEL_13_STUFE_1_LEISTUNG: std::strcpy(buffer,"KESSEL_13_STUFE_1_LEISTUNG"); break;
        case Property::kKESSEL_14_STUFE_1_LEISTUNG: std::strcpy(buffer,"KESSEL_14_STUFE_1_LEISTUNG"); break;
        case Property::kKESSEL_15_STUFE_1_LEISTUNG: std::strcpy(buffer,"KESSEL_15_STUFE_1_LEISTUNG"); break;
        case Property::kKESSEL_16_STUFE_1_LEISTUNG: std::strcpy(buffer,"KESSEL_16_STUFE_1_LEISTUNG"); break;
        case Property::kKESSEL_1_STUFE_2_LEISTUNG: std::strcpy(buffer,"KESSEL_1_STUFE_2_LEISTUNG"); break;
        case Property::kKESSEL_2_STUFE_2_LEISTUNG: std::strcpy(buffer,"KESSEL_2_STUFE_2_LEISTUNG"); break;
        case Property::kKESSEL_3_STUFE_2_LEISTUNG: std::strcpy(buffer,"KESSEL_3_STUFE_2_LEISTUNG"); break;
        case Property::kKESSEL_4_STUFE_2_LEISTUNG: std::strcpy(buffer,"KESSEL_4_STUFE_2_LEISTUNG"); break;
        case Property::kKESSEL_5_STUFE_2_LEISTUNG: std::strcpy(buffer,"KESSEL_5_STUFE_2_LEISTUNG"); break;
        case Property::kKESSEL_6_STUFE_2_LEISTUNG: std::strcpy(buffer,"KESSEL_6_STUFE_2_LEISTUNG"); break;
        case Property::kKESSEL_7_STUFE_2_LEISTUNG: std::strcpy(buffer,"KESSEL_7_STUFE_2_LEISTUNG"); break;
        case Property::kKESSEL_8_STUFE_2_LEISTUNG: std::strcpy(buffer,"KESSEL_8_STUFE_2_LEISTUNG"); break;
        case Property::kKESSEL_9_STUFE_2_LEISTUNG: std::strcpy(buffer,"KESSEL_9_STUFE_2_LEISTUNG"); break;
        case Property::kKESSEL_10_STUFE_2_LEISTUNG: std::strcpy(buffer,"KESSEL_10_STUFE_2_LEISTUNG"); break;
        case Property::kKESSEL_11_STUFE_2_LEISTUNG: std::strcpy(buffer,"KESSEL_11_STUFE_2_LEISTUNG"); break;
        case Property::kKESSEL_12_STUFE_2_LEISTUNG: std::strcpy(buffer,"KESSEL_12_STUFE_2_LEISTUNG"); break;
        case Property::kKESSEL_13_STUFE_2_LEISTUNG: std::strcpy(buffer,"KESSEL_13_STUFE_2_LEISTUNG"); break;
        case Property::kKESSEL_14_STUFE_2_LEISTUNG: std::strcpy(buffer,"KESSEL_14_STUFE_2_LEISTUNG"); break;
        case Property::kKESSEL_15_STUFE_2_LEISTUNG: std::strcpy(buffer,"KESSEL_15_STUFE_2_LEISTUNG"); break;
        case Property::kKESSEL_16_STUFE_2_LEISTUNG: std::strcpy(buffer,"KESSEL_16_STUFE_2_LEISTUNG"); break;
        case Property::kKESSEL_1_STUFE_1_STARTS: std::strcpy(buffer,"KESSEL_1_STUFE_1_STARTS"); break;
        case Property::kKESSEL_2_STUFE_1_STARTS: std::strcpy(buffer,"KESSEL_2_STUFE_1_STARTS"); break;
        case Property::kKESSEL_3_STUFE_1_STARTS: std::strcpy(buffer,"KESSEL_3_STUFE_1_STARTS"); break;
        case Property::kKESSEL_4_STUFE_1_STARTS: std::strcpy(buffer,"KESSEL_4_STUFE_1_STARTS"); break;
        case Property::kKESSEL_5_STUFE_1_STARTS: std::strcpy(buffer,"KESSEL_5_STUFE_1_STARTS"); break;
        case Property::kKESSEL_6_STUFE_1_STARTS: std::strcpy(buffer,"KESSEL_6_STUFE_1_STARTS"); break;
        case Property::kKESSEL_7_STUFE_1_STARTS: std::strcpy(buffer,"KESSEL_7_STUFE_1_STARTS"); break;
        case Property::kKESSEL_8_STUFE_1_STARTS: std::strcpy(buffer,"KESSEL_8_STUFE_1_STARTS"); break;
        case Property::kKESSEL_9_STUFE_1_STARTS: std::strcpy(buffer,"KESSEL_9_STUFE_1_STARTS"); break;
        case Property::kKESSEL_10_STUFE_1_STARTS: std::strcpy(buffer,"KESSEL_10_STUFE_1_STARTS"); break;
        case Property::kKESSEL_11_STUFE_1_STARTS: std::strcpy(buffer,"KESSEL_11_STUFE_1_STARTS"); break;
        case Property::kKESSEL_12_STUFE_1_STARTS: std::strcpy(buffer,"KESSEL_12_STUFE_1_STARTS"); break;
        case Property::kKESSEL_13_STUFE_1_STARTS: std::strcpy(buffer,"KESSEL_13_STUFE_1_STARTS"); break;
        case Property::kKESSEL_14_STUFE_1_STARTS: std::strcpy(buffer,"KESSEL_14_STUFE_1_STARTS"); break;
        case Property::kKESSEL_15_STUFE_1_STARTS: std::strcpy(buffer,"KESSEL_15_STUFE_1_STARTS"); break;
        case Property::kKESSEL_16_STUFE_1_STARTS: std::strcpy(buffer,"KESSEL_16_STUFE_1_STARTS"); break;
        case Property::kKESSEL_1_STUFE_2_STARTS: std::strcpy(buffer,"KESSEL_1_STUFE_2_STARTS"); break;
        case Property::kKESSEL_2_STUFE_2_STARTS: std::strcpy(buffer,"KESSEL_2_STUFE_2_STARTS"); break;
        case Property::kKESSEL_3_STUFE_2_STARTS: std::strcpy(buffer,"KESSEL_3_STUFE_2_STARTS"); break;
        case Property::kKESSEL_4_STUFE_2_STARTS: std::strcpy(buffer,"KESSEL_4_STUFE_2_STARTS"); break;
        case Property::kKESSEL_5_STUFE_2_STARTS: std::strcpy(buffer,"KESSEL_5_STUFE_2_STARTS"); break;
        case Property::kKESSEL_6_STUFE_2_STARTS: std::strcpy(buffer,"KESSEL_6_STUFE_2_STARTS"); break;
        case Property::kKESSEL_7_STUFE_2_STARTS: std::strcpy(buffer,"KESSEL_7_STUFE_2_STARTS"); break;
        case Property::kKESSEL_8_STUFE_2_STARTS: std::strcpy(buffer,"KESSEL_8_STUFE_2_STARTS"); break;
        case Property::kKESSEL_9_STUFE_2_STARTS: std::strcpy(buffer,"KESSEL_9_STUFE_2_STARTS"); break;
        case Property::kKESSEL_10_STUFE_2_STARTS: std::strcpy(buffer,"KESSEL_10_STUFE_2_STARTS"); break;
        case Property::kKESSEL_11_STUFE_2_STARTS: std::strcpy(buffer,"KESSEL_11_STUFE_2_STARTS"); break;
        case Property::kKESSEL_12_STUFE_2_STARTS: std::strcpy(buffer,"KESSEL_12_STUFE_2_STARTS"); break;
        case Property::kKESSEL_13_STUFE_2_STARTS: std::strcpy(buffer,"KESSEL_13_STUFE_2_STARTS"); break;
        case Property::kKESSEL_14_STUFE_2_STARTS: std::strcpy(buffer,"KESSEL_14_STUFE_2_STARTS"); break;
        case Property::kKESSEL_15_STUFE_2_STARTS: std::strcpy(buffer,"KESSEL_15_STUFE_2_STARTS"); break;
        case Property::kKESSEL_16_STUFE_2_STARTS: std::strcpy(buffer,"KESSEL_16_STUFE_2_STARTS"); break;
        case Property::kKESSEL_1_STUFEN_1_STARTS_UEBERLAUF: std::strcpy(buffer,"KESSEL_1_STUFEN_1_STARTS_UEBERLAUF"); break;
        case Property::kKESSEL_2_STUFEN_1_STARTS_UEBERLAUF: std::strcpy(buffer,"KESSEL_2_STUFEN_1_STARTS_UEBERLAUF"); break;
        case Property::kKESSEL_3_STUFEN_1_STARTS_UEBERLAUF: std::strcpy(buffer,"KESSEL_3_STUFEN_1_STARTS_UEBERLAUF"); break;
        case Property::kKESSEL_4_STUFEN_1_STARTS_UEBERLAUF: std::strcpy(buffer,"KESSEL_4_STUFEN_1_STARTS_UEBERLAUF"); break;
        case Property::kKESSEL_5_STUFEN_1_STARTS_UEBERLAUF: std::strcpy(buffer,"KESSEL_5_STUFEN_1_STARTS_UEBERLAUF"); break;
        case Property::kKESSEL_6_STUFEN_1_STARTS_UEBERLAUF: std::strcpy(buffer,"KESSEL_6_STUFEN_1_STARTS_UEBERLAUF"); break;
        case Property::kKESSEL_7_STUFEN_1_STARTS_UEBERLAUF: std::strcpy(buffer,"KESSEL_7_STUFEN_1_STARTS_UEBERLAUF"); break;
        case Property::kKESSEL_8_STUFEN_1_STARTS_UEBERLAUF: std::strcpy(buffer,"KESSEL_8_STUFEN_1_STARTS_UEBERLAUF"); break;
        case Property::kKESSEL_9_STUFEN_1_STARTS_UEBERLAUF: std::strcpy(buffer,"KESSEL_9_STUFEN_1_STARTS_UEBERLAUF"); break;
        case Property::kKESSEL_10_STUFEN_1_STARTS_UEBERLAUF: std::strcpy(buffer,"KESSEL_10_STUFEN_1_STARTS_UEBERLAUF"); break;
        case Property::kKESSEL_11_STUFEN_1_STARTS_UEBERLAUF: std::strcpy(buffer,"KESSEL_11_STUFEN_1_STARTS_UEBERLAUF"); break;
        case Property::kKESSEL_12_STUFEN_1_STARTS_UEBERLAUF: std::strcpy(buffer,"KESSEL_12_STUFEN_1_STARTS_UEBERLAUF"); break;
        case Property::kKESSEL_13_STUFEN_1_STARTS_UEBERLAUF: std::strcpy(buffer,"KESSEL_13_STUFEN_1_STARTS_UEBERLAUF"); break;
        case Property::kKESSEL_14_STUFEN_1_STARTS_UEBERLAUF: std::strcpy(buffer,"KESSEL_14_STUFEN_1_STARTS_UEBERLAUF"); break;
        case Property::kKESSEL_15_STUFEN_1_STARTS_UEBERLAUF: std::strcpy(buffer,"KESSEL_15_STUFEN_1_STARTS_UEBERLAUF"); break;
        case Property::kKESSEL_16_STUFEN_1_STARTS_UEBERLAUF: std::strcpy(buffer,"KESSEL_16_STUFEN_1_STARTS_UEBERLAUF"); break;
        case Property::kKESSEL_1_STUFEN_2_STARTS_UEBERLAUF: std::strcpy(buffer,"KESSEL_1_STUFEN_2_STARTS_UEBERLAUF"); break;
        case Property::kKESSEL_2_STUFEN_2_STARTS_UEBERLAUF: std::strcpy(buffer,"KESSEL_2_STUFEN_2_STARTS_UEBERLAUF"); break;
        case Property::kKESSEL_3_STUFEN_2_STARTS_UEBERLAUF: std::strcpy(buffer,"KESSEL_3_STUFEN_2_STARTS_UEBERLAUF"); break;
        case Property::kKESSEL_4_STUFEN_2_STARTS_UEBERLAUF: std::strcpy(buffer,"KESSEL_4_STUFEN_2_STARTS_UEBERLAUF"); break;
        case Property::kKESSEL_5_STUFEN_2_STARTS_UEBERLAUF: std::strcpy(buffer,"KESSEL_5_STUFEN_2_STARTS_UEBERLAUF"); break;
        case Property::kKESSEL_6_STUFEN_2_STARTS_UEBERLAUF: std::strcpy(buffer,"KESSEL_6_STUFEN_2_STARTS_UEBERLAUF"); break;
        case Property::kKESSEL_7_STUFEN_2_STARTS_UEBERLAUF: std::strcpy(buffer,"KESSEL_7_STUFEN_2_STARTS_UEBERLAUF"); break;
        case Property::kKESSEL_8_STUFEN_2_STARTS_UEBERLAUF: std::strcpy(buffer,"KESSEL_8_STUFEN_2_STARTS_UEBERLAUF"); break;
        case Property::kKESSEL_9_STUFEN_2_STARTS_UEBERLAUF: std::strcpy(buffer,"KESSEL_9_STUFEN_2_STARTS_UEBERLAUF"); break;
        case Property::kKESSEL_10_STUFEN_2_STARTS_UEBERLAUF: std::strcpy(buffer,"KESSEL_10_STUFEN_2_STARTS_UEBERLAUF"); break;
        case Property::kKESSEL_11_STUFEN_2_STARTS_UEBERLAUF: std::strcpy(buffer,"KESSEL_11_STUFEN_2_STARTS_UEBERLAUF"); break;
        case Property::kKESSEL_12_STUFEN_2_STARTS_UEBERLAUF: std::strcpy(buffer,"KESSEL_12_STUFEN_2_STARTS_UEBERLAUF"); break;
        case Property::kKESSEL_13_STUFEN_2_STARTS_UEBERLAUF: std::strcpy(buffer,"KESSEL_13_STUFEN_2_STARTS_UEBERLAUF"); break;
        case Property::kKESSEL_14_STUFEN_2_STARTS_UEBERLAUF: std::strcpy(buffer,"KESSEL_14_STUFEN_2_STARTS_UEBERLAUF"); break;
        case Property::kKESSEL_15_STUFEN_2_STARTS_UEBERLAUF: std::strcpy(buffer,"KESSEL_15_STUFEN_2_STARTS_UEBERLAUF"); break;
        case Property::kKESSEL_16_STUFEN_2_STARTS_UEBERLAUF: std::strcpy(buffer,"KESSEL_16_STUFEN_2_STARTS_UEBERLAUF"); break;
        case Property::kKESSEL_1_STUFE_1_LAUFZEIT: std::strcpy(buffer,"KESSEL_1_STUFE_1_LAUFZEIT"); break;
        case Property::kKESSEL_2_STUFE_1_LAUFZEIT: std::strcpy(buffer,"KESSEL_2_STUFE_1_LAUFZEIT"); break;
        case Property::kKESSEL_3_STUFE_1_LAUFZEIT: std::strcpy(buffer,"KESSEL_3_STUFE_1_LAUFZEIT"); break;
        case Property::kKESSEL_4_STUFE_1_LAUFZEIT: std::strcpy(buffer,"KESSEL_4_STUFE_1_LAUFZEIT"); break;
        case Property::kKESSEL_5_STUFE_1_LAUFZEIT: std::strcpy(buffer,"KESSEL_5_STUFE_1_LAUFZEIT"); break;
        case Property::kKESSEL_6_STUFE_1_LAUFZEIT: std::strcpy(buffer,"KESSEL_6_STUFE_1_LAUFZEIT"); break;
        case Property::kKESSEL_7_STUFE_1_LAUFZEIT: std::strcpy(buffer,"KESSEL_7_STUFE_1_LAUFZEIT"); break;
        case Property::kKESSEL_8_STUFE_1_LAUFZEIT: std::strcpy(buffer,"KESSEL_8_STUFE_1_LAUFZEIT"); break;
        case Property::kKESSEL_9_STUFE_1_LAUFZEIT: std::strcpy(buffer,"KESSEL_9_STUFE_1_LAUFZEIT"); break;
        case Property::kKESSEL_10_STUFE_1_LAUFZEIT: std::strcpy(buffer,"KESSEL_10_STUFE_1_LAUFZEIT"); break;
        case Property::kKESSEL_11_STUFE_1_LAUFZEIT: std::strcpy(buffer,"KESSEL_11_STUFE_1_LAUFZEIT"); break;
        case Property::kKESSEL_12_STUFE_1_LAUFZEIT: std::strcpy(buffer,"KESSEL_12_STUFE_1_LAUFZEIT"); break;
        case Property::kKESSEL_13_STUFE_1_LAUFZEIT: std::strcpy(buffer,"KESSEL_13_STUFE_1_LAUFZEIT"); break;
        case Property::kKESSEL_14_STUFE_1_LAUFZEIT: std::strcpy(buffer,"KESSEL_14_STUFE_1_LAUFZEIT"); break;
        case Property::kKESSEL_15_STUFE_1_LAUFZEIT: std::strcpy(buffer,"KESSEL_15_STUFE_1_LAUFZEIT"); break;
        case Property::kKESSEL_16_STUFE_1_LAUFZEIT: std::strcpy(buffer,"KESSEL_16_STUFE_1_LAUFZEIT"); break;
        case Property::kKESSEL_1_STUFE_2_LAUFZEIT: std::strcpy(buffer,"KESSEL_1_STUFE_2_LAUFZEIT"); break;
        case Property::kKESSEL_2_STUFE_2_LAUFZEIT: std::strcpy(buffer,"KESSEL_2_STUFE_2_LAUFZEIT"); break;
        case Property::kKESSEL_3_STUFE_2_LAUFZEIT: std::strcpy(buffer,"KESSEL_3_STUFE_2_LAUFZEIT"); break;
        case Property::kKESSEL_4_STUFE_2_LAUFZEIT: std::strcpy(buffer,"KESSEL_4_STUFE_2_LAUFZEIT"); break;
        case Property::kKESSEL_5_STUFE_2_LAUFZEIT: std::strcpy(buffer,"KESSEL_5_STUFE_2_LAUFZEIT"); break;
        case Property::kKESSEL_6_STUFE_2_LAUFZEIT: std::strcpy(buffer,"KESSEL_6_STUFE_2_LAUFZEIT"); break;
        case Property::kKESSEL_7_STUFE_2_LAUFZEIT: std::strcpy(buffer,"KESSEL_7_STUFE_2_LAUFZEIT"); break;
        case Property::kKESSEL_8_STUFE_2_LAUFZEIT: std::strcpy(buffer,"KESSEL_8_STUFE_2_LAUFZEIT"); break;
        case Property::kKESSEL_9_STUFE_2_LAUFZEIT: std::strcpy(buffer,"KESSEL_9_STUFE_2_LAUFZEIT"); break;
        case Property::kKESSEL_10_STUFE_2_LAUFZEIT: std::strcpy(buffer,"KESSEL_10_STUFE_2_LAUFZEIT"); break;
        case Property::kKESSEL_11_STUFE_2_LAUFZEIT: std::strcpy(buffer,"KESSEL_11_STUFE_2_LAUFZEIT"); break;
        case Property::kKESSEL_12_STUFE_2_LAUFZEIT: std::strcpy(buffer,"KESSEL_12_STUFE_2_LAUFZEIT"); break;
        case Property::kKESSEL_13_STUFE_2_LAUFZEIT: std::strcpy(buffer,"KESSEL_13_STUFE_2_LAUFZEIT"); break;
        case Property::kKESSEL_14_STUFE_2_LAUFZEIT: std::strcpy(buffer,"KESSEL_14_STUFE_2_LAUFZEIT"); break;
        case Property::kKESSEL_15_STUFE_2_LAUFZEIT: std::strcpy(buffer,"KESSEL_15_STUFE_2_LAUFZEIT"); break;
        case Property::kKESSEL_16_STUFE_2_LAUFZEIT: std::strcpy(buffer,"KESSEL_16_STUFE_2_LAUFZEIT"); break;
        case Property::kKESSEL_1_STUFE_1_LAUFZEIT_UEBERLAUF: std::strcpy(buffer,"KESSEL_1_STUFE_1_LAUFZEIT_UEBERLAUF"); break;
        case Property::kKESSEL_2_STUFE_1_LAUFZEIT_UEBERLAUF: std::strcpy(buffer,"KESSEL_2_STUFE_1_LAUFZEIT_UEBERLAUF"); break;
        case Property::kKESSEL_3_STUFE_1_LAUFZEIT_UEBERLAUF: std::strcpy(buffer,"KESSEL_3_STUFE_1_LAUFZEIT_UEBERLAUF"); break;
        case Property::kKESSEL_4_STUFE_1_LAUFZEIT_UEBERLAUF: std::strcpy(buffer,"KESSEL_4_STUFE_1_LAUFZEIT_UEBERLAUF"); break;
        case Property::kKESSEL_5_STUFE_1_LAUFZEIT_UEBERLAUF: std::strcpy(buffer,"KESSEL_5_STUFE_1_LAUFZEIT_UEBERLAUF"); break;
        case Property::kKESSEL_6_STUFE_1_LAUFZEIT_UEBERLAUF: std::strcpy(buffer,"KESSEL_6_STUFE_1_LAUFZEIT_UEBERLAUF"); break;
        case Property::kKESSEL_7_STUFE_1_LAUFZEIT_UEBERLAUF: std::strcpy(buffer,"KESSEL_7_STUFE_1_LAUFZEIT_UEBERLAUF"); break;
        case Property::kKESSEL_8_STUFE_1_LAUFZEIT_UEBERLAUF: std::strcpy(buffer,"KESSEL_8_STUFE_1_LAUFZEIT_UEBERLAUF"); break;
        case Property::kKESSEL_9_STUFE_1_LAUFZEIT_UEBERLAUF: std::strcpy(buffer,"KESSEL_9_STUFE_1_LAUFZEIT_UEBERLAUF"); break;
        case Property::kKESSEL_10_STUFE_1_LAUFZEIT_UEBERLAUF: std::strcpy(buffer,"KESSEL_10_STUFE_1_LAUFZEIT_UEBERLAUF"); break;
        case Property::kKESSEL_11_STUFE_1_LAUFZEIT_UEBERLAUF: std::strcpy(buffer,"KESSEL_11_STUFE_1_LAUFZEIT_UEBERLAUF"); break;
        case Property::kKESSEL_12_STUFE_1_LAUFZEIT_UEBERLAUF: std::strcpy(buffer,"KESSEL_12_STUFE_1_LAUFZEIT_UEBERLAUF"); break;
        case Property::kKESSEL_13_STUFE_1_LAUFZEIT_UEBERLAUF: std::strcpy(buffer,"KESSEL_13_STUFE_1_LAUFZEIT_UEBERLAUF"); break;
        case Property::kKESSEL_14_STUFE_1_LAUFZEIT_UEBERLAUF: std::strcpy(buffer,"KESSEL_14_STUFE_1_LAUFZEIT_UEBERLAUF"); break;
        case Property::kKESSEL_15_STUFE_1_LAUFZEIT_UEBERLAUF: std::strcpy(buffer,"KESSEL_15_STUFE_1_LAUFZEIT_UEBERLAUF"); break;
        case Property::kKESSEL_16_STUFE_1_LAUFZEIT_UEBERLAUF: std::strcpy(buffer,"KESSEL_16_STUFE_1_LAUFZEIT_UEBERLAUF"); break;
        case Property::kKESSEL_1_STUFE_2_LAUFZEIT_UEBERLAUF: std::strcpy(buffer,"KESSEL_1_STUFE_2_LAUFZEIT_UEBERLAUF"); break;
        case Property::kKESSEL_2_STUFE_2_LAUFZEIT_UEBERLAUF: std::strcpy(buffer,"KESSEL_2_STUFE_2_LAUFZEIT_UEBERLAUF"); break;
        case Property::kKESSEL_3_STUFE_2_LAUFZEIT_UEBERLAUF: std::strcpy(buffer,"KESSEL_3_STUFE_2_LAUFZEIT_UEBERLAUF"); break;
        case Property::kKESSEL_4_STUFE_2_LAUFZEIT_UEBERLAUF: std::strcpy(buffer,"KESSEL_4_STUFE_2_LAUFZEIT_UEBERLAUF"); break;
        case Property::kKESSEL_5_STUFE_2_LAUFZEIT_UEBERLAUF: std::strcpy(buffer,"KESSEL_5_STUFE_2_LAUFZEIT_UEBERLAUF"); break;
        case Property::kKESSEL_6_STUFE_2_LAUFZEIT_UEBERLAUF: std::strcpy(buffer,"KESSEL_6_STUFE_2_LAUFZEIT_UEBERLAUF"); break;
        case Property::kKESSEL_7_STUFE_2_LAUFZEIT_UEBERLAUF: std::strcpy(buffer,"KESSEL_7_STUFE_2_LAUFZEIT_UEBERLAUF"); break;
        case Property::kKESSEL_8_STUFE_2_LAUFZEIT_UEBERLAUF: std::strcpy(buffer,"KESSEL_8_STUFE_2_LAUFZEIT_UEBERLAUF"); break;
        case Property::kKESSEL_9_STUFE_2_LAUFZEIT_UEBERLAUF: std::strcpy(buffer,"KESSEL_9_STUFE_2_LAUFZEIT_UEBERLAUF"); break;
        case Property::kKESSEL_10_STUFE_2_LAUFZEIT_UEBERLAUF: std::strcpy(buffer,"KESSEL_10_STUFE_2_LAUFZEIT_UEBERLAUF"); break;
        case Property::kKESSEL_11_STUFE_2_LAUFZEIT_UEBERLAUF: std::strcpy(buffer,"KESSEL_11_STUFE_2_LAUFZEIT_UEBERLAUF"); break;
        case Property::kKESSEL_12_STUFE_2_LAUFZEIT_UEBERLAUF: std::strcpy(buffer,"KESSEL_12_STUFE_2_LAUFZEIT_UEBERLAUF"); break;
        case Property::kKESSEL_13_STUFE_2_LAUFZEIT_UEBERLAUF: std::strcpy(buffer,"KESSEL_13_STUFE_2_LAUFZEIT_UEBERLAUF"); break;
        case Property::kKESSEL_14_STUFE_2_LAUFZEIT_UEBERLAUF: std::strcpy(buffer,"KESSEL_14_STUFE_2_LAUFZEIT_UEBERLAUF"); break;
        case Property::kKESSEL_15_STUFE_2_LAUFZEIT_UEBERLAUF: std::strcpy(buffer,"KESSEL_15_STUFE_2_LAUFZEIT_UEBERLAUF"); break;
        case Property::kKESSEL_16_STUFE_2_LAUFZEIT_UEBERLAUF: std::strcpy(buffer,"KESSEL_16_STUFE_2_LAUFZEIT_UEBERLAUF"); break;
        case Property::kMFR_FUNKTION_1: std::strcpy(buffer,"MFR_FUNKTION_1"); break;
        case Property::kMFR_FUNKTION_2: std::strcpy(buffer,"MFR_FUNKTION_2"); break;
        case Property::kMFR_FUNKTION_3: std::strcpy(buffer,"MFR_FUNKTION_3"); break;
        case Property::kMFR_FUNKTION_4: std::strcpy(buffer,"MFR_FUNKTION_4"); break;
        case Property::kMFR_FUNKTION_5: std::strcpy(buffer,"MFR_FUNKTION_5"); break;
        case Property::kMFR_FUNKTION_6: std::strcpy(buffer,"MFR_FUNKTION_6"); break;
        case Property::kMFR_FUNKTION_7: std::strcpy(buffer,"MFR_FUNKTION_7"); break;
        case Property::kMFR_FUNKTION_8: std::strcpy(buffer,"MFR_FUNKTION_8"); break;
        case Property::kMFR_FUNKTION_9: std::strcpy(buffer,"MFR_FUNKTION_9"); break;
        case Property::kMFR_FUNKTION_10: std::strcpy(buffer,"MFR_FUNKTION_10"); break;
        case Property::kMFR_FUNKTION_11: std::strcpy(buffer,"MFR_FUNKTION_11"); break;
        case Property::kMFR_FUNKTION_12: std::strcpy(buffer,"MFR_FUNKTION_12"); break;
        case Property::kMFR_FUNKTION_13: std::strcpy(buffer,"MFR_FUNKTION_13"); break;
        case Property::kMFR_FUNKTION_14: std::strcpy(buffer,"MFR_FUNKTION_14"); break;
        case Property::kMFR_FUNKTION_15: std::strcpy(buffer,"MFR_FUNKTION_15"); break;
        case Property::kMFR_FUNKTION_16: std::strcpy(buffer,"MFR_FUNKTION_16"); break;
        case Property::kMFR_FUNKTION_17: std::strcpy(buffer,"MFR_FUNKTION_17"); break;
        case Property::kMFR_FUNKTION_18: std::strcpy(buffer,"MFR_FUNKTION_18"); break;
        case Property::kMFR_FUNKTION_19: std::strcpy(buffer,"MFR_FUNKTION_19"); break;
        case Property::kMFR_FUNKTION_20: std::strcpy(buffer,"MFR_FUNKTION_20"); break;
        case Property::kMFR_FUNKTION_21: std::strcpy(buffer,"MFR_FUNKTION_21"); break;
        case Property::kMFR_FUNKTION_22: std::strcpy(buffer,"MFR_FUNKTION_22"); break;
        case Property::kMFR_FUNKTION_23: std::strcpy(buffer,"MFR_FUNKTION_23"); break;
        case Property::kMFR_FUNKTION_24: std::strcpy(buffer,"MFR_FUNKTION_24"); break;
        case Property::kMFR_FUNKTION_25: std::strcpy(buffer,"MFR_FUNKTION_25"); break;
        case Property::kMFR_FUNKTION_26: std::strcpy(buffer,"MFR_FUNKTION_26"); break;
        case Property::kMFR_FUNKTION_27: std::strcpy(buffer,"MFR_FUNKTION_27"); break;
        case Property::kMFR_FUNKTION_28: std::strcpy(buffer,"MFR_FUNKTION_28"); break;
        case Property::kMFR_FUNKTION_29: std::strcpy(buffer,"MFR_FUNKTION_29"); break;
        case Property::kMFR_FUNKTION_30: std::strcpy(buffer,"MFR_FUNKTION_30"); break;
        case Property::kMFR_FUNKTION_31: std::strcpy(buffer,"MFR_FUNKTION_31"); break;
        case Property::kMFR_FUNKTION_32: std::strcpy(buffer,"MFR_FUNKTION_32"); break;
        case Property::kMFR_SCHALTTEMP_1: std::strcpy(buffer,"MFR_SCHALTTEMP_1"); break;
        case Property::kMFR_SCHALTTEMP_2: std::strcpy(buffer,"MFR_SCHALTTEMP_2"); break;
        case Property::kMFR_SCHALTTEMP_3: std::strcpy(buffer,"MFR_SCHALTTEMP_3"); break;
        case Property::kMFR_SCHALTTEMP_4: std::strcpy(buffer,"MFR_SCHALTTEMP_4"); break;
        case Property::kMFR_SCHALTTEMP_5: std::strcpy(buffer,"MFR_SCHALTTEMP_5"); break;
        case Property::kMFR_SCHALTTEMP_6: std::strcpy(buffer,"MFR_SCHALTTEMP_6"); break;
        case Property::kMFR_SCHALTTEMP_7: std::strcpy(buffer,"MFR_SCHALTTEMP_7"); break;
        case Property::kMFR_SCHALTTEMP_8: std::strcpy(buffer,"MFR_SCHALTTEMP_8"); break;
        case Property::kMFR_SCHALTTEMP_9: std::strcpy(buffer,"MFR_SCHALTTEMP_9"); break;
        case Property::kMFR_SCHALTTEMP_10: std::strcpy(buffer,"MFR_SCHALTTEMP_10"); break;
        case Property::kMFR_SCHALTTEMP_11: std::strcpy(buffer,"MFR_SCHALTTEMP_11"); break;
        case Property::kMFR_SCHALTTEMP_12: std::strcpy(buffer,"MFR_SCHALTTEMP_12"); break;
        case Property::kMFR_SCHALTTEMP_13: std::strcpy(buffer,"MFR_SCHALTTEMP_13"); break;
        case Property::kMFR_SCHALTTEMP_14: std::strcpy(buffer,"MFR_SCHALTTEMP_14"); break;
        case Property::kMFR_SCHALTTEMP_15: std::strcpy(buffer,"MFR_SCHALTTEMP_15"); break;
        case Property::kMFR_SCHALTTEMP_16: std::strcpy(buffer,"MFR_SCHALTTEMP_16"); break;
        case Property::kMFR_SCHALTTEMP_17: std::strcpy(buffer,"MFR_SCHALTTEMP_17"); break;
        case Property::kMFR_SCHALTTEMP_18: std::strcpy(buffer,"MFR_SCHALTTEMP_18"); break;
        case Property::kMFR_SCHALTTEMP_19: std::strcpy(buffer,"MFR_SCHALTTEMP_19"); break;
        case Property::kMFR_SCHALTTEMP_20: std::strcpy(buffer,"MFR_SCHALTTEMP_20"); break;
        case Property::kMFR_SCHALTTEMP_21: std::strcpy(buffer,"MFR_SCHALTTEMP_21"); break;
        case Property::kMFR_SCHALTTEMP_22: std::strcpy(buffer,"MFR_SCHALTTEMP_22"); break;
        case Property::kMFR_SCHALTTEMP_23: std::strcpy(buffer,"MFR_SCHALTTEMP_23"); break;
        case Property::kMFR_SCHALTTEMP_24: std::strcpy(buffer,"MFR_SCHALTTEMP_24"); break;
        case Property::kMFR_SCHALTTEMP_25: std::strcpy(buffer,"MFR_SCHALTTEMP_25"); break;
        case Property::kMFR_SCHALTTEMP_26: std::strcpy(buffer,"MFR_SCHALTTEMP_26"); break;
        case Property::kMFR_SCHALTTEMP_27: std::strcpy(buffer,"MFR_SCHALTTEMP_27"); break;
        case Property::kMFR_SCHALTTEMP_28: std::strcpy(buffer,"MFR_SCHALTTEMP_28"); break;
        case Property::kMFR_SCHALTTEMP_29: std::strcpy(buffer,"MFR_SCHALTTEMP_29"); break;
        case Property::kMFR_SCHALTTEMP_30: std::strcpy(buffer,"MFR_SCHALTTEMP_30"); break;
        case Property::kMFR_SCHALTTEMP_31: std::strcpy(buffer,"MFR_SCHALTTEMP_31"); break;
        case Property::kMFR_SCHALTTEMP_32: std::strcpy(buffer,"MFR_SCHALTTEMP_32"); break;
        case Property::kMFR_HYSTERESE_1: std::strcpy(buffer,"MFR_HYSTERESE_1"); break;
        case Property::kMFR_HYSTERESE_2: std::strcpy(buffer,"MFR_HYSTERESE_2"); break;
        case Property::kMFR_HYSTERESE_3: std::strcpy(buffer,"MFR_HYSTERESE_3"); break;
        case Property::kMFR_HYSTERESE_4: std::strcpy(buffer,"MFR_HYSTERESE_4"); break;
        case Property::kMFR_HYSTERESE_5: std::strcpy(buffer,"MFR_HYSTERESE_5"); break;
        case Property::kMFR_HYSTERESE_6: std::strcpy(buffer,"MFR_HYSTERESE_6"); break;
        case Property::kMFR_HYSTERESE_7: std::strcpy(buffer,"MFR_HYSTERESE_7"); break;
        case Property::kMFR_HYSTERESE_8: std::strcpy(buffer,"MFR_HYSTERESE_8"); break;
        case Property::kMFR_HYSTERESE_9: std::strcpy(buffer,"MFR_HYSTERESE_9"); break;
        case Property::kMFR_HYSTERESE_10: std::strcpy(buffer,"MFR_HYSTERESE_10"); break;
        case Property::kMFR_HYSTERESE_11: std::strcpy(buffer,"MFR_HYSTERESE_11"); break;
        case Property::kMFR_HYSTERESE_12: std::strcpy(buffer,"MFR_HYSTERESE_12"); break;
        case Property::kMFR_HYSTERESE_13: std::strcpy(buffer,"MFR_HYSTERESE_13"); break;
        case Property::kMFR_HYSTERESE_14: std::strcpy(buffer,"MFR_HYSTERESE_14"); break;
        case Property::kMFR_HYSTERESE_15: std::strcpy(buffer,"MFR_HYSTERESE_15"); break;
        case Property::kMFR_HYSTERESE_16: std::strcpy(buffer,"MFR_HYSTERESE_16"); break;
        case Property::kMFR_HYSTERESE_17: std::strcpy(buffer,"MFR_HYSTERESE_17"); break;
        case Property::kMFR_HYSTERESE_18: std::strcpy(buffer,"MFR_HYSTERESE_18"); break;
        case Property::kMFR_HYSTERESE_19: std::strcpy(buffer,"MFR_HYSTERESE_19"); break;
        case Property::kMFR_HYSTERESE_20: std::strcpy(buffer,"MFR_HYSTERESE_20"); break;
        case Property::kMFR_HYSTERESE_21: std::strcpy(buffer,"MFR_HYSTERESE_21"); break;
        case Property::kMFR_HYSTERESE_22: std::strcpy(buffer,"MFR_HYSTERESE_22"); break;
        case Property::kMFR_HYSTERESE_23: std::strcpy(buffer,"MFR_HYSTERESE_23"); break;
        case Property::kMFR_HYSTERESE_24: std::strcpy(buffer,"MFR_HYSTERESE_24"); break;
        case Property::kMFR_HYSTERESE_25: std::strcpy(buffer,"MFR_HYSTERESE_25"); break;
        case Property::kMFR_HYSTERESE_26: std::strcpy(buffer,"MFR_HYSTERESE_26"); break;
        case Property::kMFR_HYSTERESE_27: std::strcpy(buffer,"MFR_HYSTERESE_27"); break;
        case Property::kMFR_HYSTERESE_28: std::strcpy(buffer,"MFR_HYSTERESE_28"); break;
        case Property::kMFR_HYSTERESE_29: std::strcpy(buffer,"MFR_HYSTERESE_29"); break;
        case Property::kMFR_HYSTERESE_30: std::strcpy(buffer,"MFR_HYSTERESE_30"); break;
        case Property::kMFR_HYSTERESE_31: std::strcpy(buffer,"MFR_HYSTERESE_31"); break;
        case Property::kMFR_HYSTERESE_32: std::strcpy(buffer,"MFR_HYSTERESE_32"); break;
        case Property::kMFR_ISTTEMP1_1: std::strcpy(buffer,"MFR_ISTTEMP1_1"); break;
        case Property::kMFR_ISTTEMP1_2: std::strcpy(buffer,"MFR_ISTTEMP1_2"); break;
        case Property::kMFR_ISTTEMP1_3: std::strcpy(buffer,"MFR_ISTTEMP1_3"); break;
        case Property::kMFR_ISTTEMP1_4: std::strcpy(buffer,"MFR_ISTTEMP1_4"); break;
        case Property::kMFR_ISTTEMP1_5: std::strcpy(buffer,"MFR_ISTTEMP1_5"); break;
        case Property::kMFR_ISTTEMP1_6: std::strcpy(buffer,"MFR_ISTTEMP1_6"); break;
        case Property::kMFR_ISTTEMP1_7: std::strcpy(buffer,"MFR_ISTTEMP1_7"); break;
        case Property::kMFR_ISTTEMP1_8: std::strcpy(buffer,"MFR_ISTTEMP1_8"); break;
        case Property::kMFR_ISTTEMP1_9: std::strcpy(buffer,"MFR_ISTTEMP1_9"); break;
        case Property::kMFR_ISTTEMP1_10: std::strcpy(buffer,"MFR_ISTTEMP1_10"); break;
        case Property::kMFR_ISTTEMP1_11: std::strcpy(buffer,"MFR_ISTTEMP1_11"); break;
        case Property::kMFR_ISTTEMP1_12: std::strcpy(buffer,"MFR_ISTTEMP1_12"); break;
        case Property::kMFR_ISTTEMP1_13: std::strcpy(buffer,"MFR_ISTTEMP1_13"); break;
        case Property::kMFR_ISTTEMP1_14: std::strcpy(buffer,"MFR_ISTTEMP1_14"); break;
        case Property::kMFR_ISTTEMP1_15: std::strcpy(buffer,"MFR_ISTTEMP1_15"); break;
        case Property::kMFR_ISTTEMP1_16: std::strcpy(buffer,"MFR_ISTTEMP1_16"); break;
        case Property::kMFR_ISTTEMP1_17: std::strcpy(buffer,"MFR_ISTTEMP1_17"); break;
        case Property::kMFR_ISTTEMP1_18: std::strcpy(buffer,"MFR_ISTTEMP1_18"); break;
        case Property::kMFR_ISTTEMP1_19: std::strcpy(buffer,"MFR_ISTTEMP1_19"); break;
        case Property::kMFR_ISTTEMP1_20: std::strcpy(buffer,"MFR_ISTTEMP1_20"); break;
        case Property::kMFR_ISTTEMP1_21: std::strcpy(buffer,"MFR_ISTTEMP1_21"); break;
        case Property::kMFR_ISTTEMP1_22: std::strcpy(buffer,"MFR_ISTTEMP1_22"); break;
        case Property::kMFR_ISTTEMP1_23: std::strcpy(buffer,"MFR_ISTTEMP1_23"); break;
        case Property::kMFR_ISTTEMP1_24: std::strcpy(buffer,"MFR_ISTTEMP1_24"); break;
        case Property::kMFR_ISTTEMP1_25: std::strcpy(buffer,"MFR_ISTTEMP1_25"); break;
        case Property::kMFR_ISTTEMP1_26: std::strcpy(buffer,"MFR_ISTTEMP1_26"); break;
        case Property::kMFR_ISTTEMP1_27: std::strcpy(buffer,"MFR_ISTTEMP1_27"); break;
        case Property::kMFR_ISTTEMP1_28: std::strcpy(buffer,"MFR_ISTTEMP1_28"); break;
        case Property::kMFR_ISTTEMP1_29: std::strcpy(buffer,"MFR_ISTTEMP1_29"); break;
        case Property::kMFR_ISTTEMP1_30: std::strcpy(buffer,"MFR_ISTTEMP1_30"); break;
        case Property::kMFR_ISTTEMP1_31: std::strcpy(buffer,"MFR_ISTTEMP1_31"); break;
        case Property::kMFR_ISTTEMP1_32: std::strcpy(buffer,"MFR_ISTTEMP1_32"); break;
        case Property::kMFR_ISTTEMP2_1: std::strcpy(buffer,"MFR_ISTTEMP2_1"); break;
        case Property::kMFR_ISTTEMP2_2: std::strcpy(buffer,"MFR_ISTTEMP2_2"); break;
        case Property::kMFR_ISTTEMP2_3: std::strcpy(buffer,"MFR_ISTTEMP2_3"); break;
        case Property::kMFR_ISTTEMP2_4: std::strcpy(buffer,"MFR_ISTTEMP2_4"); break;
        case Property::kMFR_ISTTEMP2_5: std::strcpy(buffer,"MFR_ISTTEMP2_5"); break;
        case Property::kMFR_ISTTEMP2_6: std::strcpy(buffer,"MFR_ISTTEMP2_6"); break;
        case Property::kMFR_ISTTEMP2_7: std::strcpy(buffer,"MFR_ISTTEMP2_7"); break;
        case Property::kMFR_ISTTEMP2_8: std::strcpy(buffer,"MFR_ISTTEMP2_8"); break;
        case Property::kMFR_ISTTEMP2_9: std::strcpy(buffer,"MFR_ISTTEMP2_9"); break;
        case Property::kMFR_ISTTEMP2_10: std::strcpy(buffer,"MFR_ISTTEMP2_10"); break;
        case Property::kMFR_ISTTEMP2_11: std::strcpy(buffer,"MFR_ISTTEMP2_11"); break;
        case Property::kMFR_ISTTEMP2_12: std::strcpy(buffer,"MFR_ISTTEMP2_12"); break;
        case Property::kMFR_ISTTEMP2_13: std::strcpy(buffer,"MFR_ISTTEMP2_13"); break;
        case Property::kMFR_ISTTEMP2_14: std::strcpy(buffer,"MFR_ISTTEMP2_14"); break;
        case Property::kMFR_ISTTEMP2_15: std::strcpy(buffer,"MFR_ISTTEMP2_15"); break;
        case Property::kMFR_ISTTEMP2_16: std::strcpy(buffer,"MFR_ISTTEMP2_16"); break;
        case Property::kMFR_ISTTEMP2_17: std::strcpy(buffer,"MFR_ISTTEMP2_17"); break;
        case Property::kMFR_ISTTEMP2_18: std::strcpy(buffer,"MFR_ISTTEMP2_18"); break;
        case Property::kMFR_ISTTEMP2_19: std::strcpy(buffer,"MFR_ISTTEMP2_19"); break;
        case Property::kMFR_ISTTEMP2_20: std::strcpy(buffer,"MFR_ISTTEMP2_20"); break;
        case Property::kMFR_ISTTEMP2_21: std::strcpy(buffer,"MFR_ISTTEMP2_21"); break;
        case Property::kMFR_ISTTEMP2_22: std::strcpy(buffer,"MFR_ISTTEMP2_22"); break;
        case Property::kMFR_ISTTEMP2_23: std::strcpy(buffer,"MFR_ISTTEMP2_23"); break;
        case Property::kMFR_ISTTEMP2_24: std::strcpy(buffer,"MFR_ISTTEMP2_24"); break;
        case Property::kMFR_ISTTEMP2_25: std::strcpy(buffer,"MFR_ISTTEMP2_25"); break;
        case Property::kMFR_ISTTEMP2_26: std::strcpy(buffer,"MFR_ISTTEMP2_26"); break;
        case Property::kMFR_ISTTEMP2_27: std::strcpy(buffer,"MFR_ISTTEMP2_27"); break;
        case Property::kMFR_ISTTEMP2_28: std::strcpy(buffer,"MFR_ISTTEMP2_28"); break;
        case Property::kMFR_ISTTEMP2_29: std::strcpy(buffer,"MFR_ISTTEMP2_29"); break;
        case Property::kMFR_ISTTEMP2_30: std::strcpy(buffer,"MFR_ISTTEMP2_30"); break;
        case Property::kMFR_ISTTEMP2_31: std::strcpy(buffer,"MFR_ISTTEMP2_31"); break;
        case Property::kMFR_ISTTEMP2_32: std::strcpy(buffer,"MFR_ISTTEMP2_32"); break;
        case Property::kMFR_STATUS_1: std::strcpy(buffer,"MFR_STATUS_1"); break;
        case Property::kMFR_STATUS_2: std::strcpy(buffer,"MFR_STATUS_2"); break;
        case Property::kMFR_STATUS_3: std::strcpy(buffer,"MFR_STATUS_3"); break;
        case Property::kMFR_STATUS_4: std::strcpy(buffer,"MFR_STATUS_4"); break;
        case Property::kMFR_STATUS_5: std::strcpy(buffer,"MFR_STATUS_5"); break;
        case Property::kMFR_STATUS_6: std::strcpy(buffer,"MFR_STATUS_6"); break;
        case Property::kMFR_STATUS_7: std::strcpy(buffer,"MFR_STATUS_7"); break;
        case Property::kMFR_STATUS_8: std::strcpy(buffer,"MFR_STATUS_8"); break;
        case Property::kMFR_STATUS_9: std::strcpy(buffer,"MFR_STATUS_9"); break;
        case Property::kMFR_STATUS_10: std::strcpy(buffer,"MFR_STATUS_10"); break;
        case Property::kMFR_STATUS_11: std::strcpy(buffer,"MFR_STATUS_11"); break;
        case Property::kMFR_STATUS_12: std::strcpy(buffer,"MFR_STATUS_12"); break;
        case Property::kMFR_STATUS_13: std::strcpy(buffer,"MFR_STATUS_13"); break;
        case Property::kMFR_STATUS_14: std::strcpy(buffer,"MFR_STATUS_14"); break;
        case Property::kMFR_STATUS_15: std::strcpy(buffer,"MFR_STATUS_15"); break;
        case Property::kMFR_STATUS_16: std::strcpy(buffer,"MFR_STATUS_16"); break;
        case Property::kMFR_STATUS_17: std::strcpy(buffer,"MFR_STATUS_17"); break;
        case Property::kMFR_STATUS_18: std::strcpy(buffer,"MFR_STATUS_18"); break;
        case Property::kMFR_STATUS_19: std::strcpy(buffer,"MFR_STATUS_19"); break;
        case Property::kMFR_STATUS_20: std::strcpy(buffer,"MFR_STATUS_20"); break;
        case Property::kMFR_STATUS_21: std::strcpy(buffer,"MFR_STATUS_21"); break;
        case Property::kMFR_STATUS_22: std::strcpy(buffer,"MFR_STATUS_22"); break;
        case Property::kMFR_STATUS_23: std::strcpy(buffer,"MFR_STATUS_23"); break;
        case Property::kMFR_STATUS_24: std::strcpy(buffer,"MFR_STATUS_24"); break;
        case Property::kMFR_STATUS_25: std::strcpy(buffer,"MFR_STATUS_25"); break;
        case Property::kMFR_STATUS_26: std::strcpy(buffer,"MFR_STATUS_26"); break;
        case Property::kMFR_STATUS_27: std::strcpy(buffer,"MFR_STATUS_27"); break;
        case Property::kMFR_STATUS_28: std::strcpy(buffer,"MFR_STATUS_28"); break;
        case Property::kMFR_STATUS_29: std::strcpy(buffer,"MFR_STATUS_29"); break;
        case Property::kMFR_STATUS_30: std::strcpy(buffer,"MFR_STATUS_30"); break;
        case Property::kMFR_STATUS_31: std::strcpy(buffer,"MFR_STATUS_31"); break;
        case Property::kMFR_STATUS_32: std::strcpy(buffer,"MFR_STATUS_32"); break;
        case Property::kWE_TEMPERATUR_1: std::strcpy(buffer,"WE_TEMPERATUR_1"); break;
        case Property::kWE_TEMPERATUR_2: std::strcpy(buffer,"WE_TEMPERATUR_2"); break;
        case Property::kWE_TEMPERATUR_3: std::strcpy(buffer,"WE_TEMPERATUR_3"); break;
        case Property::kWE_TEMPERATUR_4: std::strcpy(buffer,"WE_TEMPERATUR_4"); break;
        case Property::kWE_TEMPERATUR_5: std::strcpy(buffer,"WE_TEMPERATUR_5"); break;
        case Property::kWE_TEMPERATUR_6: std::strcpy(buffer,"WE_TEMPERATUR_6"); break;
        case Property::kWE_TEMPERATUR_7: std::strcpy(buffer,"WE_TEMPERATUR_7"); break;
        case Property::kWE_TEMPERATUR_8: std::strcpy(buffer,"WE_TEMPERATUR_8"); break;
        case Property::kWE_TEMPERATUR_9: std::strcpy(buffer,"WE_TEMPERATUR_9"); break;
        case Property::kWE_TEMPERATUR_10: std::strcpy(buffer,"WE_TEMPERATUR_10"); break;
        case Property::kWE_TEMPERATUR_11: std::strcpy(buffer,"WE_TEMPERATUR_11"); break;
        case Property::kWE_TEMPERATUR_12: std::strcpy(buffer,"WE_TEMPERATUR_12"); break;
        case Property::kWE_TEMPERATUR_13: std::strcpy(buffer,"WE_TEMPERATUR_13"); break;
        case Property::kWE_TEMPERATUR_14: std::strcpy(buffer,"WE_TEMPERATUR_14"); break;
        case Property::kWE_TEMPERATUR_15: std::strcpy(buffer,"WE_TEMPERATUR_15"); break;
        case Property::kWE_TEMPERATUR_16: std::strcpy(buffer,"WE_TEMPERATUR_16"); break;
        case Property::kWE_MODGRAD_IST_1: std::strcpy(buffer,"WE_MODGRAD_IST_1"); break;
        case Property::kWE_MODGRAD_IST_2: std::strcpy(buffer,"WE_MODGRAD_IST_2"); break;
        case Property::kWE_MODGRAD_IST_3: std::strcpy(buffer,"WE_MODGRAD_IST_3"); break;
        case Property::kWE_MODGRAD_IST_4: std::strcpy(buffer,"WE_MODGRAD_IST_4"); break;
        case Property::kWE_MODGRAD_IST_5: std::strcpy(buffer,"WE_MODGRAD_IST_5"); break;
        case Property::kWE_MODGRAD_IST_6: std::strcpy(buffer,"WE_MODGRAD_IST_6"); break;
        case Property::kWE_MODGRAD_IST_7: std::strcpy(buffer,"WE_MODGRAD_IST_7"); break;
        case Property::kWE_MODGRAD_IST_8: std::strcpy(buffer,"WE_MODGRAD_IST_8"); break;
        case Property::kWE_MODGRAD_IST_9: std::strcpy(buffer,"WE_MODGRAD_IST_9"); break;
        case Property::kWE_MODGRAD_IST_10: std::strcpy(buffer,"WE_MODGRAD_IST_10"); break;
        case Property::kWE_MODGRAD_IST_11: std::strcpy(buffer,"WE_MODGRAD_IST_11"); break;
        case Property::kWE_MODGRAD_IST_12: std::strcpy(buffer,"WE_MODGRAD_IST_12"); break;
        case Property::kWE_MODGRAD_IST_13: std::strcpy(buffer,"WE_MODGRAD_IST_13"); break;
        case Property::kWE_MODGRAD_IST_14: std::strcpy(buffer,"WE_MODGRAD_IST_14"); break;
        case Property::kWE_MODGRAD_IST_15: std::strcpy(buffer,"WE_MODGRAD_IST_15"); break;
        case Property::kWE_MODGRAD_IST_16: std::strcpy(buffer,"WE_MODGRAD_IST_16"); break;
        case Property::kKUEHL_RAUMSOLL_TAG: std::strcpy(buffer,"KUEHL_RAUMSOLL_TAG"); break;
        case Property::kKUEHL_RAUMSOLL_ABWESEND: std::strcpy(buffer,"KUEHL_RAUMSOLL_ABWESEND"); break;
       // case Property::kKUEHL_RAUMSOLL_NACHT: std::strcpy(buffer,"KUEHL_RAUMSOLL_NACHT"); break;
        case Property::kLUEFT_STUFE_TAG: std::strcpy(buffer,"LUEFT_STUFE_TAG"); break;
        case Property::kLUEFT_STUFE_NACHT: std::strcpy(buffer,"LUEFT_STUFE_NACHT"); break;
        case Property::kLUEFT_STUFE_ABWESEND: std::strcpy(buffer,"LUEFT_STUFE_ABWESEND"); break;
        case Property::kLUEFT_STUFE_PARTY: std::strcpy(buffer,"LUEFT_STUFE_PARTY"); break;
        case Property::kLUEFT_ZEIT_AUSSERPLAN_STUFE0: std::strcpy(buffer,"LUEFT_ZEIT_AUSSERPLAN_STUFE0"); break;
        case Property::kLUEFT_ZEIT_AUSSERPLAN_STUFE1: std::strcpy(buffer,"LUEFT_ZEIT_AUSSERPLAN_STUFE1"); break;
        case Property::kLUEFT_ZEIT_AUSSERPLAN_STUFE2: std::strcpy(buffer,"LUEFT_ZEIT_AUSSERPLAN_STUFE2"); break;
        case Property::kLUEFT_ZEIT_AUSSERPLAN_STUFE3: std::strcpy(buffer,"LUEFT_ZEIT_AUSSERPLAN_STUFE3"); break;
        case Property::kLUEFT_PASSIVKUEHLUNG: std::strcpy(buffer,"LUEFT_PASSIVKUEHLUNG"); break;
        case Property::kLUEFT_ZULUFT_STUFE1: std::strcpy(buffer,"LUEFT_ZULUFT_STUFE1"); break;
        case Property::kLUEFT_ZULUFT_STUFE2: std::strcpy(buffer,"LUEFT_ZULUFT_STUFE2"); break;
        case Property::kLUEFT_ZULUFT_STUFE3: std::strcpy(buffer,"LUEFT_ZULUFT_STUFE3"); break;
        case Property::kLUEFT_ABLUFT_STUFE1: std::strcpy(buffer,"LUEFT_ABLUFT_STUFE1"); break;
        case Property::kLUEFT_ABLUFT_STUFE2: std::strcpy(buffer,"LUEFT_ABLUFT_STUFE2"); break;
        case Property::kLUEFT_ABLUFT_STUFE3: std::strcpy(buffer,"LUEFT_ABLUFT_STUFE3"); break;
        case Property::kOFEN_FUNKTION: std::strcpy(buffer,"OFEN_FUNKTION"); break;
        case Property::kMAX_ABTAUDAUER: std::strcpy(buffer,"MAX_ABTAUDAUER"); break;
        case Property::kABTAUBEGINNSCHWELLE: std::strcpy(buffer,"ABTAUBEGINNSCHWELLE"); break;
        case Property::kDREHZAHL_FILTERWECHSEL: std::strcpy(buffer,"DREHZAHL_FILTERWECHSEL"); break;
        case Property::kEINSTELLSPEICHER_HAND: std::strcpy(buffer,"EINSTELLSPEICHER_HAND"); break;
        case Property::kEINSTELLSPEICHER_ABWESEND: std::strcpy(buffer,"EINSTELLSPEICHER_ABWESEND"); break;
        case Property::kKUEL_VORLAUFSOLLTEMP: std::strcpy(buffer,"KUEL_VORLAUFSOLLTEMP"); break;
        case Property::kKUEHL_HYST_SOLLTEMP: std::strcpy(buffer,"KUEHL_HYST_SOLLTEMP"); break;
        case Property::kKUEHL_HYST_RAUMTEMP: std::strcpy(buffer,"KUEHL_HYST_RAUMTEMP"); break;
        case Property::kMAX_ABTAUDAUER_LUFT: std::strcpy(buffer,"MAX_ABTAUDAUER_LUFT"); break;
        case Property::kANTILEG_INTERVALL_TAGE: std::strcpy(buffer,"ANTILEG_INTERVALL_TAGE"); break;
        case Property::kANTILEG_TEMP: std::strcpy(buffer,"ANTILEG_TEMP"); break;
        case Property::kNHZ_VERZOEGERUNG_WW: std::strcpy(buffer,"NHZ_VERZOEGERUNG_WW"); break;
        case Property::kNHZ_AUSSENTEMP_SOFORT_WW: std::strcpy(buffer,"NHZ_AUSSENTEMP_SOFORT_WW"); break;
        case Property::kNHZ_ANZAHL_STUFEN_WW: std::strcpy(buffer,"NHZ_ANZAHL_STUFEN_WW"); break;
        case Property::kWW_SPEICHER_ALS_PUFFER: std::strcpy(buffer,"WW_SPEICHER_ALS_PUFFER"); break;
        case Property::kMAX_VORLAUFTEMP_BEI_WW: std::strcpy(buffer,"MAX_VORLAUFTEMP_BEI_WW"); break;
        case Property::kABSCHALTUNG_VERDICHTER_WW: std::strcpy(buffer,"ABSCHALTUNG_VERDICHTER_WW"); break;
        case Property::kVERZOEGERUNG_VERDICHTER_WW: std::strcpy(buffer,"VERZOEGERUNG_VERDICHTER_WW"); break;
        case Property::kSOLAR_HYSTERESE: std::strcpy(buffer,"SOLAR_HYSTERESE"); break;
        case Property::kPARTY_ANFANG_TAG: std::strcpy(buffer,"PARTY_ANFANG_TAG"); break;
        case Property::kPARTY_ANFANG_MONAT: std::strcpy(buffer,"PARTY_ANFANG_MONAT"); break;
        case Property::kPARTY_ANFANG_JAHR: std::strcpy(buffer,"PARTY_ANFANG_JAHR"); break;
        case Property::kPARTY_ENDE_TAG: std::strcpy(buffer,"PARTY_ENDE_TAG"); break;
        case Property::kPARTY_ENDE_MONAT: std::strcpy(buffer,"PARTY_ENDE_MONAT"); break;
    //    case Property::kPARTY_ENDE_JAHR: std::strcpy(buffer,"PARTY_ENDE_JAHR"); break;
        case Property::kZULUFT_SOLL: std::strcpy(buffer,"ZULUFT_SOLL"); break;
        case Property::kZULUFT_IST: std::strcpy(buffer,"ZULUFT_IST"); break;
        case Property::kABLUFT_SOLL: std::strcpy(buffer,"ABLUFT_SOLL"); break;
        case Property::kABLUFT_IST: std::strcpy(buffer,"ABLUFT_IST"); break;
        case Property::kFORTLUFT_SOLL: std::strcpy(buffer,"FORTLUFT_SOLL"); break;
        case Property::kFORTLUFT_IST: std::strcpy(buffer,"FORTLUFT_IST"); break;
        case Property::kVERFLUESSIGER_TEMP: std::strcpy(buffer,"VERFLUESSIGER_TEMP"); break;
        case Property::kANTEIL_VORLAUF: std::strcpy(buffer,"ANTEIL_VORLAUF"); break;
        case Property::kFUSSPUNKT_HEIZKURVE: std::strcpy(buffer,"FUSSPUNKT_HEIZKURVE"); break;
        case Property::kNHZ_ANZAHL_STUFEN: std::strcpy(buffer,"NHZ_ANZAHL_STUFEN"); break;
        case Property::kNHZ_VERZOEGERUNG: std::strcpy(buffer,"NHZ_VERZOEGERUNG"); break;
        case Property::kNHZ_LEISTUNG1: std::strcpy(buffer,"NHZ_LEISTUNG1"); break;
        case Property::kHEIZGRENZE_HYST: std::strcpy(buffer,"HEIZGRENZE_HYST"); break;
        case Property::kAUSSENTEMP_KORREKTUR: std::strcpy(buffer,"AUSSENTEMP_KORREKTUR"); break;
        case Property::kLAUFZEIT_VERDICHTER_HEIZEN: std::strcpy(buffer,"LAUFZEIT_VERDICHTER_HEIZEN"); break;
        case Property::kLAUFZEIT_VERDICHTER_KUEHLEN: std::strcpy(buffer,"LAUFZEIT_VERDICHTER_KUEHLEN"); break;
        case Property::kLAUFZEIT_VERDICHTER_WW: std::strcpy(buffer,"LAUFZEIT_VERDICHTER_WW"); break;
        case Property::kLAUFZEIT_NHZ_WW: std::strcpy(buffer,"LAUFZEIT_NHZ_WW"); break;
        case Property::kLAUFZEIT_NHZ_HEIZEN: std::strcpy(buffer,"LAUFZEIT_NHZ_HEIZEN"); break;
        case Property::kMANUELL_VERDICHTER: std::strcpy(buffer,"MANUELL_VERDICHTER"); break;
        case Property::kMANUELL_NHZ_STUFE: std::strcpy(buffer,"MANUELL_NHZ_STUFE"); break;
        case Property::kMANUELL_DREHZAHL_ABLUEFTER: std::strcpy(buffer,"MANUELL_DREHZAHL_ABLUEFTER"); break;
        case Property::kMANUELL_DREHZAHL_ZULUEFTER: std::strcpy(buffer,"MANUELL_DREHZAHL_ZULUEFTER"); break;
        case Property::kMANUELL_LUEFT_PARTY: std::strcpy(buffer,"MANUELL_LUEFT_PARTY"); break;
        case Property::kMANUELL_LUEFT_NACHT: std::strcpy(buffer,"MANUELL_LUEFT_NACHT"); break;
        case Property::kMANUELL_FENSTERKONTAKT: std::strcpy(buffer,"MANUELL_FENSTERKONTAKT"); break;
        case Property::kMANUELL_HEAT_PIPE_VENTIL: std::strcpy(buffer,"MANUELL_HEAT_PIPE_VENTIL"); break;
        case Property::kMANUELL_UMSCHALTVENTIL: std::strcpy(buffer,"MANUELL_UMSCHALTVENTIL"); break;
        case Property::kABTAUENDE_TEMP: std::strcpy(buffer,"ABTAUENDE_TEMP"); break;
        case Property::kNHZ_FROSTSCHUTZ: std::strcpy(buffer,"NHZ_FROSTSCHUTZ"); break;
        case Property::kABTAU_FROSTSCHUTZ: std::strcpy(buffer,"ABTAU_FROSTSCHUTZ"); break;
        case Property::kVERDICHTER_EINSCHALT_VERZ: std::strcpy(buffer,"VERDICHTER_EINSCHALT_VERZ"); break;
        case Property::kFORTLUFT_LUEFTER_DREHZAHL: std::strcpy(buffer,"FORTLUFT_LUEFTER_DREHZAHL"); break;
        case Property::kPUMPENZYKLEN_MAX: std::strcpy(buffer,"PUMPENZYKLEN_MAX"); break;
        case Property::kPUMPENZYKLEN_MIN: std::strcpy(buffer,"PUMPENZYKLEN_MIN"); break;
        case Property::kPUMPENZYKLEN_MAX_AUSSENT: std::strcpy(buffer,"PUMPENZYKLEN_MAX_AUSSENT"); break;
        case Property::kPUMPENZYKLEN_MIN_AUSSENT: std::strcpy(buffer,"PUMPENZYKLEN_MIN_AUSSENT"); break;
        case Property::kAKTIVE_HEIZSTUFEN: std::strcpy(buffer,"AKTIVE_HEIZSTUFEN"); break;
        case Property::kABTAUEN_LL_WT_AKTIV: std::strcpy(buffer,"ABTAUEN_LL_WT_AKTIV"); break;
        case Property::kRAUMTEMP_ERFASSUNG: std::strcpy(buffer,"RAUMTEMP_ERFASSUNG"); break;
        case Property::kSOLAR_EINSTELLSPEICHERSOLLT: std::strcpy(buffer,"SOLAR_EINSTELLSPEICHERSOLLT"); break;
        case Property::kEINSTELLSPEICHER_NACHT: std::strcpy(buffer,"EINSTELLSPEICHER_NACHT"); break;
        case Property::kHYST_HEIZSTUFE1: std::strcpy(buffer,"HYST_HEIZSTUFE1"); break;
        case Property::kHYST_HEIZSTUFE2: std::strcpy(buffer,"HYST_HEIZSTUFE2"); break;
        case Property::kHYST_HEIZSTUFE3: std::strcpy(buffer,"HYST_HEIZSTUFE3"); break;
        case Property::kHYST_HEIZSTUFE4: std::strcpy(buffer,"HYST_HEIZSTUFE4"); break;
        case Property::kHYST_HEIZSTUFE5: std::strcpy(buffer,"HYST_HEIZSTUFE5"); break;
        case Property::kASYMETRIE_HEIZSTUFEN: std::strcpy(buffer,"ASYMETRIE_HEIZSTUFEN"); break;
        case Property::kVOLUMENSTROMMESSUNG: std::strcpy(buffer,"VOLUMENSTROMMESSUNG"); break;
        case Property::kFEHLERAUFZEICHNUNG_STOP: std::strcpy(buffer,"FEHLERAUFZEICHNUNG_STOP"); break;
        case Property::kHEIZEITVORVERLEGUNG_VERDICHTER: std::strcpy(buffer,"HEIZEITVORVERLEGUNG_VERDICHTER"); break;
        case Property::kSOLAR_SPEERZEIT_VERDICHTER: std::strcpy(buffer,"SOLAR_SPEERZEIT_VERDICHTER"); break;
        case Property::kPUMPSTEUER_FUEHRUNGSKESSEL: std::strcpy(buffer,"PUMPSTEUER_FUEHRUNGSKESSEL"); break;
        case Property::kAKTIVIERUNG_LEISTUNGSZWANG_WW: std::strcpy(buffer,"AKTIVIERUNG_LEISTUNGSZWANG_WW"); break;
        case Property::kHYSTERESE_LEISTUNGSZWANG_WW: std::strcpy(buffer,"HYSTERESE_LEISTUNGSZWANG_WW"); break;
        case Property::kMIN_TEMP_DREHZAHLREGELUNG: std::strcpy(buffer,"MIN_TEMP_DREHZAHLREGELUNG"); break;
        case Property::kMAX_SPREIZUNG_DREHZAHLREGELUNG: std::strcpy(buffer,"MAX_SPREIZUNG_DREHZAHLREGELUNG"); break;
        case Property::kP_BEREICH_DREHZAHLPUMPE: std::strcpy(buffer,"P_BEREICH_DREHZAHLPUMPE"); break;
        case Property::kHF_NETZWERK_ID: std::strcpy(buffer,"HF_NETZWERK_ID"); break;
        case Property::kPARTY_ANFANG_UHRZEIT: std::strcpy(buffer,"PARTY_ANFANG_UHRZEIT"); break;
        case Property::kPARTY_ENDE_UHRZEIT: std::strcpy(buffer,"PARTY_ENDE_UHRZEIT"); break;
        case Property::kFERIEN_ANFANG_UHRZEIT: std::strcpy(buffer,"FERIEN_ANFANG_UHRZEIT"); break;
        case Property::kFERIEN_ENDE_UHRZEIT: std::strcpy(buffer,"FERIEN_ENDE_UHRZEIT"); break;
        case Property::kFABRIKTEST_START: std::strcpy(buffer,"FABRIKTEST_START"); break;
        case Property::kLEISTUNGSREDUZIERUNG_KUEHLEN: std::strcpy(buffer,"LEISTUNGSREDUZIERUNG_KUEHLEN"); break;
        case Property::kZWISCHENEINSPRITZUNG_ISTTEMP: std::strcpy(buffer,"ZWISCHENEINSPRITZUNG_ISTTEMP"); break;
        case Property::kBETRIEBSART_QUELLENPUMPE: std::strcpy(buffer,"BETRIEBSART_QUELLENPUMPE"); break;
        case Property::kGASVENTIL1: std::strcpy(buffer,"GASVENTIL1"); break;
        case Property::kGASVENTIL2: std::strcpy(buffer,"GASVENTIL2"); break;
        case Property::kLUEFT_PASSIVKUEHLUNG_UEBER_FORTLUEFTER: std::strcpy(buffer,"LUEFT_PASSIVKUEHLUNG_UEBER_FORTLUEFTER"); break;
        case Property::kKUEHLZUSTAND: std::strcpy(buffer,"KUEHLZUSTAND"); break;
        case Property::kTEMPORALE_LUEFTUNGSSTUFE_STUFE: std::strcpy(buffer,"TEMPORALE_LUEFTUNGSSTUFE_STUFE"); break;
        case Property::kTEMPORALE_LUEFTUNGSSTUFE_DAUER: std::strcpy(buffer,"TEMPORALE_LUEFTUNGSSTUFE_DAUER"); break;
        case Property::kSCHALTFKT_QUELLE_IWS: std::strcpy(buffer,"SCHALTFKT_QUELLE_IWS"); break;
        case Property::kBITSCHALTER_1: std::strcpy(buffer,"BITSCHALTER_1"); break;
        case Property::kWE_STATUS_1: std::strcpy(buffer,"WE_STATUS_1"); break;
        case Property::kWE_STATUS_2: std::strcpy(buffer,"WE_STATUS_2"); break;
        case Property::kWE_STATUS_3: std::strcpy(buffer,"WE_STATUS_3"); break;
        case Property::kWE_STATUS_4: std::strcpy(buffer,"WE_STATUS_4"); break;
        case Property::kWE_STATUS_5: std::strcpy(buffer,"WE_STATUS_5"); break;
        case Property::kWE_STATUS_6: std::strcpy(buffer,"WE_STATUS_6"); break;
        case Property::kWE_STATUS_7: std::strcpy(buffer,"WE_STATUS_7"); break;
        case Property::kWE_STATUS_8: std::strcpy(buffer,"WE_STATUS_8"); break;
        case Property::kWE_STATUS_9: std::strcpy(buffer,"WE_STATUS_9"); break;
        case Property::kWE_STATUS_10: std::strcpy(buffer,"WE_STATUS_10"); break;
        case Property::kWE_STATUS_11: std::strcpy(buffer,"WE_STATUS_11"); break;
        case Property::kWE_STATUS_12: std::strcpy(buffer,"WE_STATUS_12"); break;
        case Property::kWE_STATUS_13: std::strcpy(buffer,"WE_STATUS_13"); break;
        case Property::kWE_STATUS_14: std::strcpy(buffer,"WE_STATUS_14"); break;
        case Property::kWE_STATUS_15: std::strcpy(buffer,"WE_STATUS_15"); break;
        case Property::kWE_STATUS_16: std::strcpy(buffer,"WE_STATUS_16"); break;
        case Property::kWE_MODGRAD_VORGABE_1: std::strcpy(buffer,"WE_MODGRAD_VORGABE_1"); break;
        case Property::kWE_MODGRAD_VORGABE_2: std::strcpy(buffer,"WE_MODGRAD_VORGABE_2"); break;
        case Property::kWE_MODGRAD_VORGABE_3: std::strcpy(buffer,"WE_MODGRAD_VORGABE_3"); break;
        case Property::kWE_MODGRAD_VORGABE_4: std::strcpy(buffer,"WE_MODGRAD_VORGABE_4"); break;
        case Property::kWE_MODGRAD_VORGABE_5: std::strcpy(buffer,"WE_MODGRAD_VORGABE_5"); break;
        case Property::kWE_MODGRAD_VORGABE_6: std::strcpy(buffer,"WE_MODGRAD_VORGABE_6"); break;
        case Property::kWE_MODGRAD_VORGABE_7: std::strcpy(buffer,"WE_MODGRAD_VORGABE_7"); break;
        case Property::kWE_MODGRAD_VORGABE_8: std::strcpy(buffer,"WE_MODGRAD_VORGABE_8"); break;
        case Property::kWE_MODGRAD_VORGABE_9: std::strcpy(buffer,"WE_MODGRAD_VORGABE_9"); break;
        case Property::kWE_MODGRAD_VORGABE_10: std::strcpy(buffer,"WE_MODGRAD_VORGABE_10"); break;
        case Property::kWE_MODGRAD_VORGABE_11: std::strcpy(buffer,"WE_MODGRAD_VORGABE_11"); break;
        case Property::kWE_MODGRAD_VORGABE_12: std::strcpy(buffer,"WE_MODGRAD_VORGABE_12"); break;
        case Property::kWE_MODGRAD_VORGABE_13: std::strcpy(buffer,"WE_MODGRAD_VORGABE_13"); break;
        case Property::kWE_MODGRAD_VORGABE_14: std::strcpy(buffer,"WE_MODGRAD_VORGABE_14"); break;
        case Property::kWE_MODGRAD_VORGABE_15: std::strcpy(buffer,"WE_MODGRAD_VORGABE_15"); break;
        case Property::kWE_MODGRAD_VORGABE_16: std::strcpy(buffer,"WE_MODGRAD_VORGABE_16"); break;
        case Property::kWE_STB_TESTFUNKTION_1: std::strcpy(buffer,"WE_STB_TESTFUNKTION_1"); break;
        case Property::kWE_STB_TESTFUNKTION_2: std::strcpy(buffer,"WE_STB_TESTFUNKTION_2"); break;
        case Property::kWE_STB_TESTFUNKTION_3: std::strcpy(buffer,"WE_STB_TESTFUNKTION_3"); break;
        case Property::kWE_STB_TESTFUNKTION_4: std::strcpy(buffer,"WE_STB_TESTFUNKTION_4"); break;
        case Property::kWE_STB_TESTFUNKTION_5: std::strcpy(buffer,"WE_STB_TESTFUNKTION_5"); break;
        case Property::kWE_STB_TESTFUNKTION_6: std::strcpy(buffer,"WE_STB_TESTFUNKTION_6"); break;
        case Property::kWE_STB_TESTFUNKTION_7: std::strcpy(buffer,"WE_STB_TESTFUNKTION_7"); break;
        case Property::kWE_STB_TESTFUNKTION_8: std::strcpy(buffer,"WE_STB_TESTFUNKTION_8"); break;
        case Property::kWE_STB_TESTFUNKTION_9: std::strcpy(buffer,"WE_STB_TESTFUNKTION_9"); break;
        case Property::kWE_STB_TESTFUNKTION_10: std::strcpy(buffer,"WE_STB_TESTFUNKTION_10"); break;
        case Property::kWE_STB_TESTFUNKTION_11: std::strcpy(buffer,"WE_STB_TESTFUNKTION_11"); break;
        case Property::kWE_STB_TESTFUNKTION_12: std::strcpy(buffer,"WE_STB_TESTFUNKTION_12"); break;
        case Property::kWE_STB_TESTFUNKTION_13: std::strcpy(buffer,"WE_STB_TESTFUNKTION_13"); break;
        case Property::kWE_STB_TESTFUNKTION_14: std::strcpy(buffer,"WE_STB_TESTFUNKTION_14"); break;
        case Property::kWE_STB_TESTFUNKTION_15: std::strcpy(buffer,"WE_STB_TESTFUNKTION_15"); break;
        case Property::kWE_STB_TESTFUNKTION_16: std::strcpy(buffer,"WE_STB_TESTFUNKTION_16"); break;
        //case Property::kUNTERD_TEMPM_PUMPENANL: std::strcpy(buffer,"UNTERD_TEMPM_PUMPENANL"); break;
        case Property::kLUEFT_STUFE_HAND: std::strcpy(buffer,"LUEFT_STUFE_HAND"); break;
        case Property::kKUEHLSYSTEM: std::strcpy(buffer,"KUEHLSYSTEM"); break;
        case Property::kKESSEL_STARTVERZOEGERUNG: std::strcpy(buffer,"KESSEL_STARTVERZOEGERUNG"); break;
        case Property::kMFR_HYSTERESE2_1: std::strcpy(buffer,"MFR_HYSTERESE2_1"); break;
        case Property::kMFR_HYSTERESE2_2: std::strcpy(buffer,"MFR_HYSTERESE2_2"); break;
        case Property::kMFR_HYSTERESE2_3: std::strcpy(buffer,"MFR_HYSTERESE2_3"); break;
        case Property::kMFR_HYSTERESE2_4: std::strcpy(buffer,"MFR_HYSTERESE2_4"); break;
        case Property::kMFR_HYSTERESE2_5: std::strcpy(buffer,"MFR_HYSTERESE2_5"); break;
        case Property::kMFR_HYSTERESE2_6: std::strcpy(buffer,"MFR_HYSTERESE2_6"); break;
        case Property::kMFR_HYSTERESE2_7: std::strcpy(buffer,"MFR_HYSTERESE2_7"); break;
        case Property::kMFR_HYSTERESE2_8: std::strcpy(buffer,"MFR_HYSTERESE2_8"); break;
        case Property::kMFR_HYSTERESE2_9: std::strcpy(buffer,"MFR_HYSTERESE2_9"); break;
        case Property::kMFR_HYSTERESE2_10: std::strcpy(buffer,"MFR_HYSTERESE2_10"); break;
        case Property::kMFR_HYSTERESE2_11: std::strcpy(buffer,"MFR_HYSTERESE2_11"); break;
        case Property::kMFR_HYSTERESE2_12: std::strcpy(buffer,"MFR_HYSTERESE2_12"); break;
        case Property::kMFR_HYSTERESE2_13: std::strcpy(buffer,"MFR_HYSTERESE2_13"); break;
        case Property::kMFR_HYSTERESE2_14: std::strcpy(buffer,"MFR_HYSTERESE2_14"); break;
        case Property::kMFR_HYSTERESE2_15: std::strcpy(buffer,"MFR_HYSTERESE2_15"); break;
        case Property::kMFR_HYSTERESE2_16: std::strcpy(buffer,"MFR_HYSTERESE2_16"); break;
        case Property::kMFR_HYSTERESE2_17: std::strcpy(buffer,"MFR_HYSTERESE2_17"); break;
        case Property::kMFR_HYSTERESE2_18: std::strcpy(buffer,"MFR_HYSTERESE2_18"); break;
        case Property::kMFR_HYSTERESE2_19: std::strcpy(buffer,"MFR_HYSTERESE2_19"); break;
        case Property::kMFR_HYSTERESE2_20: std::strcpy(buffer,"MFR_HYSTERESE2_20"); break;
        case Property::kMFR_HYSTERESE2_21: std::strcpy(buffer,"MFR_HYSTERESE2_21"); break;
        case Property::kMFR_HYSTERESE2_22: std::strcpy(buffer,"MFR_HYSTERESE2_22"); break;
        case Property::kMFR_HYSTERESE2_23: std::strcpy(buffer,"MFR_HYSTERESE2_23"); break;
        case Property::kMFR_HYSTERESE2_24: std::strcpy(buffer,"MFR_HYSTERESE2_24"); break;
        case Property::kMFR_HYSTERESE2_25: std::strcpy(buffer,"MFR_HYSTERESE2_25"); break;
        case Property::kMFR_HYSTERESE2_26: std::strcpy(buffer,"MFR_HYSTERESE2_26"); break;
        case Property::kMFR_HYSTERESE2_27: std::strcpy(buffer,"MFR_HYSTERESE2_27"); break;
        case Property::kMFR_HYSTERESE2_28: std::strcpy(buffer,"MFR_HYSTERESE2_28"); break;
        case Property::kMFR_HYSTERESE2_29: std::strcpy(buffer,"MFR_HYSTERESE2_29"); break;
        case Property::kMFR_HYSTERESE2_30: std::strcpy(buffer,"MFR_HYSTERESE2_30"); break;
        case Property::kMFR_HYSTERESE2_31: std::strcpy(buffer,"MFR_HYSTERESE2_31"); break;
        case Property::kMFR_HYSTERESE2_32: std::strcpy(buffer,"MFR_HYSTERESE2_32"); break;
        case Property::kK_OS_START_DREHZAHLAENDERUNG: std::strcpy(buffer,"K_OS_START_DREHZAHLAENDERUNG"); break;
        case Property::kK_OS_RMX_RESERVE_INFO1: std::strcpy(buffer,"K_OS_RMX_RESERVE_INFO1"); break;
        case Property::kK_OS_RMX_RESERVE_INFO2: std::strcpy(buffer,"K_OS_RMX_RESERVE_INFO2"); break;
        case Property::kK_OS_RMX_RESERVE_INFO3: std::strcpy(buffer,"K_OS_RMX_RESERVE_INFO3"); break;
        case Property::kHW_BITSCHALTER: std::strcpy(buffer,"HW_BITSCHALTER"); break;
        case Property::kKUEHLFUNKTION: std::strcpy(buffer,"KUEHLFUNKTION"); break;
        case Property::kSOLLDREHZAHL_VERDICHTER_1: std::strcpy(buffer,"SOLLDREHZAHL_VERDICHTER_1"); break;
        case Property::kSOLLDREHZAHL_VERDICHTER_2: std::strcpy(buffer,"SOLLDREHZAHL_VERDICHTER_2"); break;
        case Property::kISTDREHZAHL_VERDICHTER_1: std::strcpy(buffer,"ISTDREHZAHL_VERDICHTER_1"); break;
        case Property::kISTDREHZAHL_VERDICHTER_2: std::strcpy(buffer,"ISTDREHZAHL_VERDICHTER_2"); break;
        case Property::kZWISCHENEINSPRITZUNG_ISTTEMP_VND: std::strcpy(buffer,"ZWISCHENEINSPRITZUNG_ISTTEMP_VND"); break;
        case Property::kDRUCK_HEIZKREIS: std::strcpy(buffer,"DRUCK_HEIZKREIS"); break;
      //  case Property::kTEST_OBJEKT_249: std::strcpy(buffer,"TEST_OBJEKT_249"); break; // duplicate
        case Property::kKALIBRIERWERT_1_1: std::strcpy(buffer,"KALIBRIERWERT_1_1"); break;
        case Property::kKALIBRIERWERT_1_2: std::strcpy(buffer,"KALIBRIERWERT_1_2"); break;
        case Property::kKALIBRIERWERT_1_3: std::strcpy(buffer,"KALIBRIERWERT_1_3"); break;
        case Property::kKALIBRIERWERT_1_4: std::strcpy(buffer,"KALIBRIERWERT_1_4"); break;
        case Property::kKALIBRIERWERT_1_5: std::strcpy(buffer,"KALIBRIERWERT_1_5"); break;
        case Property::kKALIBRIERWERT_1_6: std::strcpy(buffer,"KALIBRIERWERT_1_6"); break;
        case Property::kKALIBRIERWERT_1_7: std::strcpy(buffer,"KALIBRIERWERT_1_7"); break;
        case Property::kKALIBRIERWERT_1_8: std::strcpy(buffer,"KALIBRIERWERT_1_8"); break;
        case Property::kKALIBRIERWERT_1_9: std::strcpy(buffer,"KALIBRIERWERT_1_9"); break;
        case Property::kKALIBRIERWERT_1_10: std::strcpy(buffer,"KALIBRIERWERT_1_10"); break;
        case Property::kKALIBRIERWERT_2_1: std::strcpy(buffer,"KALIBRIERWERT_2_1"); break;
        case Property::kKALIBRIERWERT_2_2: std::strcpy(buffer,"KALIBRIERWERT_2_2"); break;
        case Property::kKALIBRIERWERT_2_3: std::strcpy(buffer,"KALIBRIERWERT_2_3"); break;
        case Property::kKALIBRIERWERT_2_4: std::strcpy(buffer,"KALIBRIERWERT_2_4"); break;
        case Property::kKALIBRIERWERT_2_5: std::strcpy(buffer,"KALIBRIERWERT_2_5"); break;
        case Property::kKALIBRIERWERT_2_6: std::strcpy(buffer,"KALIBRIERWERT_2_6"); break;
        case Property::kKALIBRIERWERT_2_7: std::strcpy(buffer,"KALIBRIERWERT_2_7"); break;
        case Property::kKALIBRIERWERT_2_8: std::strcpy(buffer,"KALIBRIERWERT_2_8"); break;
        case Property::kKALIBRIERWERT_2_9: std::strcpy(buffer,"KALIBRIERWERT_2_9"); break;
        case Property::kKALIBRIERWERT_2_10: std::strcpy(buffer,"KALIBRIERWERT_2_10"); break;
        case Property::kKALIBRIERWERT_3_1: std::strcpy(buffer,"KALIBRIERWERT_3_1"); break;
        case Property::kKALIBRIERWERT_3_2: std::strcpy(buffer,"KALIBRIERWERT_3_2"); break;
        case Property::kKALIBRIERWERT_3_3: std::strcpy(buffer,"KALIBRIERWERT_3_3"); break;
        case Property::kKALIBRIERWERT_3_4: std::strcpy(buffer,"KALIBRIERWERT_3_4"); break;
        case Property::kKALIBRIERWERT_3_5: std::strcpy(buffer,"KALIBRIERWERT_3_5"); break;
        case Property::kKALIBRIERWERT_3_6: std::strcpy(buffer,"KALIBRIERWERT_3_6"); break;
        case Property::kKALIBRIERWERT_3_7: std::strcpy(buffer,"KALIBRIERWERT_3_7"); break;
        case Property::kKALIBRIERWERT_3_8: std::strcpy(buffer,"KALIBRIERWERT_3_8"); break;
        case Property::kKALIBRIERWERT_3_9: std::strcpy(buffer,"KALIBRIERWERT_3_9"); break;
        case Property::kKALIBRIERWERT_3_10: std::strcpy(buffer,"KALIBRIERWERT_3_10"); break;
        case Property::kKALIBRIERWERT_4_1: std::strcpy(buffer,"KALIBRIERWERT_4_1"); break;
        case Property::kKALIBRIERWERT_4_2: std::strcpy(buffer,"KALIBRIERWERT_4_2"); break;
        case Property::kKALIBRIERWERT_4_3: std::strcpy(buffer,"KALIBRIERWERT_4_3"); break;
        case Property::kKALIBRIERWERT_4_4: std::strcpy(buffer,"KALIBRIERWERT_4_4"); break;
        case Property::kKALIBRIERWERT_4_5: std::strcpy(buffer,"KALIBRIERWERT_4_5"); break;
        case Property::kKALIBRIERWERT_4_6: std::strcpy(buffer,"KALIBRIERWERT_4_6"); break;
        case Property::kKALIBRIERWERT_4_7: std::strcpy(buffer,"KALIBRIERWERT_4_7"); break;
        case Property::kKALIBRIERWERT_4_8: std::strcpy(buffer,"KALIBRIERWERT_4_8"); break;
        case Property::kKALIBRIERWERT_4_9: std::strcpy(buffer,"KALIBRIERWERT_4_9"); break;
        case Property::kKALIBRIERWERT_4_10: std::strcpy(buffer,"KALIBRIERWERT_4_10"); break;
        case Property::kKALIBRIERWERT_5_1: std::strcpy(buffer,"KALIBRIERWERT_5_1"); break;
        case Property::kKALIBRIERWERT_5_2: std::strcpy(buffer,"KALIBRIERWERT_5_2"); break;
        case Property::kKALIBRIERWERT_5_3: std::strcpy(buffer,"KALIBRIERWERT_5_3"); break;
        case Property::kKALIBRIERWERT_5_4: std::strcpy(buffer,"KALIBRIERWERT_5_4"); break;
        case Property::kKALIBRIERWERT_5_5: std::strcpy(buffer,"KALIBRIERWERT_5_5"); break;
        case Property::kKALIBRIERWERT_5_6: std::strcpy(buffer,"KALIBRIERWERT_5_6"); break;
        case Property::kKALIBRIERWERT_5_7: std::strcpy(buffer,"KALIBRIERWERT_5_7"); break;
        case Property::kKALIBRIERWERT_5_8: std::strcpy(buffer,"KALIBRIERWERT_5_8"); break;
        case Property::kKALIBRIERWERT_5_9: std::strcpy(buffer,"KALIBRIERWERT_5_9"); break;
        case Property::kKALIBRIERWERT_5_10: std::strcpy(buffer,"KALIBRIERWERT_5_10"); break;
        case Property::kKALIBRIERWERT_6_1: std::strcpy(buffer,"KALIBRIERWERT_6_1"); break;
        case Property::kKALIBRIERWERT_6_2: std::strcpy(buffer,"KALIBRIERWERT_6_2"); break;
        case Property::kKALIBRIERWERT_6_3: std::strcpy(buffer,"KALIBRIERWERT_6_3"); break;
        case Property::kKALIBRIERWERT_6_4: std::strcpy(buffer,"KALIBRIERWERT_6_4"); break;
        case Property::kKALIBRIERWERT_6_5: std::strcpy(buffer,"KALIBRIERWERT_6_5"); break;
        case Property::kKALIBRIERWERT_6_6: std::strcpy(buffer,"KALIBRIERWERT_6_6"); break;
        case Property::kKALIBRIERWERT_6_7: std::strcpy(buffer,"KALIBRIERWERT_6_7"); break;
        case Property::kKALIBRIERWERT_6_8: std::strcpy(buffer,"KALIBRIERWERT_6_8"); break;
        case Property::kKALIBRIERWERT_6_9: std::strcpy(buffer,"KALIBRIERWERT_6_9"); break;
        case Property::kKALIBRIERWERT_6_10: std::strcpy(buffer,"KALIBRIERWERT_6_10"); break;
        case Property::kKALIBRIERWERT_7_1: std::strcpy(buffer,"KALIBRIERWERT_7_1"); break;
        case Property::kKALIBRIERWERT_7_2: std::strcpy(buffer,"KALIBRIERWERT_7_2"); break;
        case Property::kKALIBRIERWERT_7_3: std::strcpy(buffer,"KALIBRIERWERT_7_3"); break;
        case Property::kKALIBRIERWERT_7_4: std::strcpy(buffer,"KALIBRIERWERT_7_4"); break;
        case Property::kKALIBRIERWERT_7_5: std::strcpy(buffer,"KALIBRIERWERT_7_5"); break;
        case Property::kKALIBRIERWERT_7_6: std::strcpy(buffer,"KALIBRIERWERT_7_6"); break;
        case Property::kKALIBRIERWERT_7_7: std::strcpy(buffer,"KALIBRIERWERT_7_7"); break;
        case Property::kKALIBRIERWERT_7_8: std::strcpy(buffer,"KALIBRIERWERT_7_8"); break;
        case Property::kKALIBRIERWERT_7_9: std::strcpy(buffer,"KALIBRIERWERT_7_9"); break;
        case Property::kKALIBRIERWERT_7_10: std::strcpy(buffer,"KALIBRIERWERT_7_10"); break;
        case Property::kKALIBRIERWERT_8_1: std::strcpy(buffer,"KALIBRIERWERT_8_1"); break;
        case Property::kKALIBRIERWERT_8_2: std::strcpy(buffer,"KALIBRIERWERT_8_2"); break;
        case Property::kKALIBRIERWERT_8_3: std::strcpy(buffer,"KALIBRIERWERT_8_3"); break;
        case Property::kKALIBRIERWERT_8_4: std::strcpy(buffer,"KALIBRIERWERT_8_4"); break;
        case Property::kKALIBRIERWERT_8_5: std::strcpy(buffer,"KALIBRIERWERT_8_5"); break;
        case Property::kKALIBRIERWERT_8_6: std::strcpy(buffer,"KALIBRIERWERT_8_6"); break;
        case Property::kKALIBRIERWERT_8_7: std::strcpy(buffer,"KALIBRIERWERT_8_7"); break;
        case Property::kKALIBRIERWERT_8_8: std::strcpy(buffer,"KALIBRIERWERT_8_8"); break;
        case Property::kKALIBRIERWERT_8_9: std::strcpy(buffer,"KALIBRIERWERT_8_9"); break;
        case Property::kKALIBRIERWERT_8_10: std::strcpy(buffer,"KALIBRIERWERT_8_10"); break;
        case Property::kKALIBRIERWERT_9_1: std::strcpy(buffer,"KALIBRIERWERT_9_1"); break;
        case Property::kKALIBRIERWERT_9_2: std::strcpy(buffer,"KALIBRIERWERT_9_2"); break;
        case Property::kKALIBRIERWERT_9_3: std::strcpy(buffer,"KALIBRIERWERT_9_3"); break;
        case Property::kKALIBRIERWERT_9_4: std::strcpy(buffer,"KALIBRIERWERT_9_4"); break;
        case Property::kKALIBRIERWERT_9_5: std::strcpy(buffer,"KALIBRIERWERT_9_5"); break;
        case Property::kKALIBRIERWERT_9_6: std::strcpy(buffer,"KALIBRIERWERT_9_6"); break;
        case Property::kKALIBRIERWERT_9_7: std::strcpy(buffer,"KALIBRIERWERT_9_7"); break;
        case Property::kKALIBRIERWERT_9_8: std::strcpy(buffer,"KALIBRIERWERT_9_8"); break;
        case Property::kKALIBRIERWERT_9_9: std::strcpy(buffer,"KALIBRIERWERT_9_9"); break;
        case Property::kKALIBRIERWERT_9_10: std::strcpy(buffer,"KALIBRIERWERT_9_10"); break;
        case Property::kKALIBRIERWERT_10_1: std::strcpy(buffer,"KALIBRIERWERT_10_1"); break;
        case Property::kKALIBRIERWERT_10_2: std::strcpy(buffer,"KALIBRIERWERT_10_2"); break;
        case Property::kKALIBRIERWERT_10_3: std::strcpy(buffer,"KALIBRIERWERT_10_3"); break;
        case Property::kKALIBRIERWERT_10_4: std::strcpy(buffer,"KALIBRIERWERT_10_4"); break;
        case Property::kKALIBRIERWERT_10_5: std::strcpy(buffer,"KALIBRIERWERT_10_5"); break;
        case Property::kKALIBRIERWERT_10_6: std::strcpy(buffer,"KALIBRIERWERT_10_6"); break;
        case Property::kKALIBRIERWERT_10_7: std::strcpy(buffer,"KALIBRIERWERT_10_7"); break;
        case Property::kKALIBRIERWERT_10_8: std::strcpy(buffer,"KALIBRIERWERT_10_8"); break;
        case Property::kKALIBRIERWERT_10_9: std::strcpy(buffer,"KALIBRIERWERT_10_9"); break;
        case Property::kKALIBRIERWERT_10_10: std::strcpy(buffer,"KALIBRIERWERT_10_10"); break;
        case Property::kSTUETZSTELLE_ND1: std::strcpy(buffer,"STUETZSTELLE_ND1"); break;
        case Property::kSTUETZSTELLE_ND2: std::strcpy(buffer,"STUETZSTELLE_ND2"); break;
        case Property::kSTUETZSTELLE_HD1: std::strcpy(buffer,"STUETZSTELLE_HD1"); break;
        case Property::kSTUETZSTELLE_HD2: std::strcpy(buffer,"STUETZSTELLE_HD2"); break;
        case Property::kREKUPERATORISTTEMP: std::strcpy(buffer,"REKUPERATORISTTEMP"); break;
        case Property::kMESSSTROM_HOCHDRUCK: std::strcpy(buffer,"MESSSTROM_HOCHDRUCK"); break;
        case Property::kMESSSTROM_NIEDERDRUCK: std::strcpy(buffer,"MESSSTROM_NIEDERDRUCK"); break;
        case Property::kANZEIGE_HOCHDRUCK: std::strcpy(buffer,"ANZEIGE_HOCHDRUCK"); break;
        case Property::kANZEIGE_NIEDERDRUCK: std::strcpy(buffer,"ANZEIGE_NIEDERDRUCK"); break;
        case Property::kVERDICHTER: std::strcpy(buffer,"VERDICHTER"); break;
        case Property::kVERDAMPFERISTTEMP_KOMPENSIERT: std::strcpy(buffer,"VERDAMPFERISTTEMP_KOMPENSIERT"); break;
        case Property::kTAU_PENDEL_ERKENNUNGSZEIT: std::strcpy(buffer,"TAU_PENDEL_ERKENNUNGSZEIT"); break;
        case Property::kVERZOEGERUNG_PENDELERKENNUNG: std::strcpy(buffer,"VERZOEGERUNG_PENDELERKENNUNG"); break;
        case Property::kUEBERHITZUNG_VERDAMPFER_LOW: std::strcpy(buffer,"UEBERHITZUNG_VERDAMPFER_LOW"); break;
        case Property::kUEBERHITZUNG_VERDAMPFER_MID: std::strcpy(buffer,"UEBERHITZUNG_VERDAMPFER_MID"); break;
        case Property::kUEBERHITZUNG_VERDAMPFER_HIGH: std::strcpy(buffer,"UEBERHITZUNG_VERDAMPFER_HIGH"); break;
        case Property::kUEBERHITZUNG_REKUPERATOR: std::strcpy(buffer,"UEBERHITZUNG_REKUPERATOR"); break;
        case Property::kUEBERHITZUNG_BEI_KUEHLBETRIEB: std::strcpy(buffer,"UEBERHITZUNG_BEI_KUEHLBETRIEB"); break;
        case Property::kANFAHRFAKTOR_UEBERHITZUNG: std::strcpy(buffer,"ANFAHRFAKTOR_UEBERHITZUNG"); break;
        case Property::kANFAHRZEIT_UEBERHITZUNG: std::strcpy(buffer,"ANFAHRZEIT_UEBERHITZUNG"); break;
        case Property::kGRENZE_PENDELN_VERDAMPFER: std::strcpy(buffer,"GRENZE_PENDELN_VERDAMPFER"); break;
        case Property::kGRENZE_PENDELN_REKUPERATOR: std::strcpy(buffer,"GRENZE_PENDELN_REKUPERATOR"); break;
        case Property::kTAU_UEBERHITZUNG_VERKLEINERN: std::strcpy(buffer,"TAU_UEBERHITZUNG_VERKLEINERN"); break;
        case Property::kTAU_UEBERHITZUNG_VERGROESSERN: std::strcpy(buffer,"TAU_UEBERHITZUNG_VERGROESSERN"); break;
        case Property::kVARIATION_UEBERHITZUNG: std::strcpy(buffer,"VARIATION_UEBERHITZUNG"); break;
        case Property::kV_H_EXPONENT_VSKL: std::strcpy(buffer,"V_H_EXPONENT_VSKL"); break;
        case Property::kV_H_FAKTOR_VSKL: std::strcpy(buffer,"V_H_FAKTOR_VSKL"); break;
        case Property::kV_H_OFFSET_VSKL: std::strcpy(buffer,"V_H_OFFSET_VSKL"); break;
        case Property::kV_K_EXPONENT_VSKL: std::strcpy(buffer,"V_K_EXPONENT_VSKL"); break;
        case Property::kV_K_FAKTOR_VSKL: std::strcpy(buffer,"V_K_FAKTOR_VSKL"); break;
        case Property::kV_K_OFFSET_VSKL: std::strcpy(buffer,"V_K_OFFSET_VSKL"); break;
        case Property::kWICHTUNG_REGELABWEICHUNG: std::strcpy(buffer,"WICHTUNG_REGELABWEICHUNG"); break;
        case Property::kP_VERDAMPFER: std::strcpy(buffer,"P_VERDAMPFER"); break;
        case Property::kI_VERDAMPFER: std::strcpy(buffer,"I_VERDAMPFER"); break;
        case Property::kD_VERDAMPFER: std::strcpy(buffer,"D_VERDAMPFER"); break;
        case Property::kP_REKUPERATOR: std::strcpy(buffer,"P_REKUPERATOR"); break;
        case Property::kI_REKUPERATOR: std::strcpy(buffer,"I_REKUPERATOR"); break;
        case Property::kD_REKUPERATOR: std::strcpy(buffer,"D_REKUPERATOR"); break;
        case Property::kMIN_REGELDYNAMIK: std::strcpy(buffer,"MIN_REGELDYNAMIK"); break;
        case Property::kTAU_REGELDYNAMIK: std::strcpy(buffer,"TAU_REGELDYNAMIK"); break;
        case Property::kEXV_OEFFNUNGSGRAD_MIN: std::strcpy(buffer,"EXV_OEFFNUNGSGRAD_MIN"); break;
        case Property::kEXV_OEFFNUNGSGRAD_MAX: std::strcpy(buffer,"EXV_OEFFNUNGSGRAD_MAX"); break;
        case Property::kEXV_TOTZONE: std::strcpy(buffer,"EXV_TOTZONE"); break;
        case Property::kEXV_OEFFNUNGSGRAD: std::strcpy(buffer,"EXV_OEFFNUNGSGRAD"); break;
        case Property::kPARAMETERSATZ: std::strcpy(buffer,"PARAMETERSATZ"); break;
        case Property::kTIEFPASS_ND: std::strcpy(buffer,"TIEFPASS_ND"); break;
        case Property::kELEKTRONISCHE_ABTAUBEDARFSERKENNUNG: std::strcpy(buffer,"ELEKTRONISCHE_ABTAUBEDARFSERKENNUNG"); break;
        case Property::kELEKTRONISCHE_ABTAUENDEERKENNUNG: std::strcpy(buffer,"ELEKTRONISCHE_ABTAUENDEERKENNUNG"); break;
        case Property::kOEFFNUNGSGRAD_ABTAUEN: std::strcpy(buffer,"OEFFNUNGSGRAD_ABTAUEN"); break;
        case Property::kDRUCKDIFFERENZ_ABTAUEN: std::strcpy(buffer,"DRUCKDIFFERENZ_ABTAUEN"); break;
        case Property::kOEFFNUNGSGRAD_HANDBETRIEB: std::strcpy(buffer,"OEFFNUNGSGRAD_HANDBETRIEB"); break;
        case Property::kGRENZDRUCK_PUMPDOWN: std::strcpy(buffer,"GRENZDRUCK_PUMPDOWN"); break;
        case Property::kINJEKTION_PUMPDOWN: std::strcpy(buffer,"INJEKTION_PUMPDOWN"); break;
        case Property::kUMSCHALTUNG_VERFLUESSIGERTEMP: std::strcpy(buffer,"UMSCHALTUNG_VERFLUESSIGERTEMP"); break;
        case Property::kUMSCHALTUNG_TAUPUNKTTEMP: std::strcpy(buffer,"UMSCHALTUNG_TAUPUNKTTEMP"); break;
        case Property::kKALIBRIERUNG_ON_OFF: std::strcpy(buffer,"KALIBRIERUNG_ON_OFF"); break;
        case Property::kSTARTZAHL_BIS_KALIBRIERUNG: std::strcpy(buffer,"STARTZAHL_BIS_KALIBRIERUNG"); break;
        case Property::kLAUFZEIT_BIS_KALIBRIERUNG: std::strcpy(buffer,"LAUFZEIT_BIS_KALIBRIERUNG"); break;
        case Property::kARBEITSPUNKT_KALIBRIERUNG: std::strcpy(buffer,"ARBEITSPUNKT_KALIBRIERUNG"); break;
        case Property::kOEG_KALIBRIERUNG_FAKTOR: std::strcpy(buffer,"OEG_KALIBRIERUNG_FAKTOR"); break;
        case Property::kKALIBRIERDAUER: std::strcpy(buffer,"KALIBRIERDAUER"); break;
        case Property::kKALIBRIERABWEICHUNG_GRENZ: std::strcpy(buffer,"KALIBRIERABWEICHUNG_GRENZ"); break;
        case Property::kKALIBRIERABWEICHUNG_ABSCHALTUNG: std::strcpy(buffer,"KALIBRIERABWEICHUNG_ABSCHALTUNG"); break;
        case Property::kFREIGABE_AUSSENTEMP_ZWISCHENEINSPRITZUNG: std::strcpy(buffer,"FREIGABE_AUSSENTEMP_ZWISCHENEINSPRITZUNG"); break;
        case Property::kNIEDERDRUCK_MOP_ND: std::strcpy(buffer,"NIEDERDRUCK_MOP_ND"); break;
        case Property::kABTAUVERFAHREN: std::strcpy(buffer,"ABTAUVERFAHREN"); break;
        case Property::kGRENZDRUCK_ABTAUENDE: std::strcpy(buffer,"GRENZDRUCK_ABTAUENDE"); break;
        case Property::kDAEMPFUNG_TAUTEMP_ABTAUAUSLOESUNG: std::strcpy(buffer,"DAEMPFUNG_TAUTEMP_ABTAUAUSLOESUNG"); break;
        case Property::kTEMPERATURDIFFERENZ_ABTAUAUSLOESUNG: std::strcpy(buffer,"TEMPERATURDIFFERENZ_ABTAUAUSLOESUNG"); break;
        case Property::kFREIGABE_ABTAUERKENNUNG: std::strcpy(buffer,"FREIGABE_ABTAUERKENNUNG"); break;
        case Property::kBEGRENZUNG_HEISSGASTEMPERATUR: std::strcpy(buffer,"BEGRENZUNG_HEISSGASTEMPERATUR"); break;
        case Property::kP_FAKTOR_BEGRENZUNG_HEISSGASTEMPERATUR: std::strcpy(buffer,"P_FAKTOR_BEGRENZUNG_HEISSGASTEMPERATUR"); break;
        case Property::kLUEFTERLEISTUNG_AT_MIN: std::strcpy(buffer,"LUEFTERLEISTUNG_AT_MIN"); break;
        case Property::kLUEFTERLEISTUNG_AT_MAX: std::strcpy(buffer,"LUEFTERLEISTUNG_AT_MAX"); break;
        case Property::kGRENZWERT_ABWEICHUNG_V_KENNLINIE: std::strcpy(buffer,"GRENZWERT_ABWEICHUNG_V_KENNLINIE"); break;
        case Property::kZEIT_WAECHTER_ABWEICHUNG_V_KENNLINIE: std::strcpy(buffer,"ZEIT_WAECHTER_ABWEICHUNG_V_KENNLINIE"); break;
        case Property::kMINIMALER_GRENZWERT_UEBERHITZUNG: std::strcpy(buffer,"MINIMALER_GRENZWERT_UEBERHITZUNG"); break;
        case Property::kZEIT_WAECHTER_UEBERHITZUNG: std::strcpy(buffer,"ZEIT_WAECHTER_UEBERHITZUNG"); break;
        case Property::kND_EVE_FUNKTION: std::strcpy(buffer,"ND_EVE_FUNKTION"); break;
        case Property::kND_EVE_GRENZWERT: std::strcpy(buffer,"ND_EVE_GRENZWERT"); break;
        case Property::kND_MASKIERZEIT: std::strcpy(buffer,"ND_MASKIERZEIT"); break;
        case Property::kHD_EVE_FUNKTION: std::strcpy(buffer,"HD_EVE_FUNKTION"); break;
        case Property::kHD_EVE_GRENZWERT_VHD: std::strcpy(buffer,"HD_EVE_GRENZWERT_VHD"); break;
        case Property::kBETRIEBSART_WP: std::strcpy(buffer,"BETRIEBSART_WP"); break;
        case Property::kSOLLWERT_UEBERHITZUNG: std::strcpy(buffer,"SOLLWERT_UEBERHITZUNG"); break;
        case Property::kISTWERT_UEBERHITZUNG_VERDAMPFER: std::strcpy(buffer,"ISTWERT_UEBERHITZUNG_VERDAMPFER"); break;
        case Property::kISTWERT_UEBERHITZUNG_REKUPERATOR_KUEHLEN: std::strcpy(buffer,"ISTWERT_UEBERHITZUNG_REKUPERATOR_KUEHLEN"); break;
        case Property::kVORSTEUER_OEFFNUNGSGRAD: std::strcpy(buffer,"VORSTEUER_OEFFNUNGSGRAD"); break;
        case Property::kP_ANTEIL_EXV: std::strcpy(buffer,"P_ANTEIL_EXV"); break;
        case Property::kI_ANTEIL_EXV: std::strcpy(buffer,"I_ANTEIL_EXV"); break;
        case Property::kD_ANTEIL_EXV: std::strcpy(buffer,"D_ANTEIL_EXV"); break;
        case Property::kPENDELN_RELATIV: std::strcpy(buffer,"PENDELN_RELATIV"); break;
        case Property::kFAKTOR_REGELDYNAMIK: std::strcpy(buffer,"FAKTOR_REGELDYNAMIK"); break;
        case Property::kLZ_VERD_1_HEIZBETRIEB: std::strcpy(buffer,"LZ_VERD_1_HEIZBETRIEB"); break;
        case Property::kLZ_VERD_2_HEIZBETRIEB: std::strcpy(buffer,"LZ_VERD_2_HEIZBETRIEB"); break;
        case Property::kLZ_VERD_1_2_HEIZBETRIEB: std::strcpy(buffer,"LZ_VERD_1_2_HEIZBETRIEB"); break;
        case Property::kLZ_VERD_1_KUEHLBETRIEB: std::strcpy(buffer,"LZ_VERD_1_KUEHLBETRIEB"); break;
        case Property::kLZ_VERD_2_KUEHLBETRIEB: std::strcpy(buffer,"LZ_VERD_2_KUEHLBETRIEB"); break;
        case Property::kLZ_VERD_1_2_KUEHLBETRIEB: std::strcpy(buffer,"LZ_VERD_1_2_KUEHLBETRIEB"); break;
        case Property::kLZ_VERD_1_WW_BETRIEB: std::strcpy(buffer,"LZ_VERD_1_WW_BETRIEB"); break;
        case Property::kLZ_VERD_2_WW_BETRIEB: std::strcpy(buffer,"LZ_VERD_2_WW_BETRIEB"); break;
        case Property::kLZ_VERD_1_2_WW_BETRIEB: std::strcpy(buffer,"LZ_VERD_1_2_WW_BETRIEB"); break;
        case Property::kLZ_DHC12: std::strcpy(buffer,"LZ_DHC12"); break;
        case Property::kSTARTS_ABTAUUNG: std::strcpy(buffer,"STARTS_ABTAUUNG"); break;
        case Property::kZEITDAUER_LETZTE_ABTAUUNG: std::strcpy(buffer,"ZEITDAUER_LETZTE_ABTAUUNG"); break;
        case Property::kABTAUZEIT_VERD1: std::strcpy(buffer,"ABTAUZEIT_VERD1"); break;
        case Property::kABTAUZEIT_VERD2: std::strcpy(buffer,"ABTAUZEIT_VERD2"); break;
        case Property::kTAUPUNKTTEMPERATUR_REFERENZ: std::strcpy(buffer,"TAUPUNKTTEMPERATUR_REFERENZ"); break;
        case Property::kTAUPUNKTTEMPERATUR_KOMPENSIERT: std::strcpy(buffer,"TAUPUNKTTEMPERATUR_KOMPENSIERT"); break;
        case Property::kDRUCKREGELUNG_ND: std::strcpy(buffer,"DRUCKREGELUNG_ND"); break;
        case Property::kDRUCK_VERDAMPFER_GEFILTERT: std::strcpy(buffer,"DRUCK_VERDAMPFER_GEFILTERT"); break;
        case Property::kFATAL_ERROR: std::strcpy(buffer,"FATAL_ERROR"); break;
        case Property::kUEBERHITZUNG_ZWISCHENEINSPRITZUNG: std::strcpy(buffer,"UEBERHITZUNG_ZWISCHENEINSPRITZUNG"); break;
        case Property::kUNSYMMETRIE_DRUCK_ZE: std::strcpy(buffer,"UNSYMMETRIE_DRUCK_ZE"); break;
        case Property::kVORSTEUER_ZE_FAKTOR: std::strcpy(buffer,"VORSTEUER_ZE_FAKTOR"); break;
        case Property::kVORSTEUER_ZE_OFFSET: std::strcpy(buffer,"VORSTEUER_ZE_OFFSET"); break;
        case Property::kEINFLUSS_OG_DRUCK_ZE: std::strcpy(buffer,"EINFLUSS_OG_DRUCK_ZE"); break;
        case Property::kP_ANTEIL_ZWISCHENEINSPRITZUNG: std::strcpy(buffer,"P_ANTEIL_ZWISCHENEINSPRITZUNG"); break;
        case Property::kI_ANTEIL_ZWISCHENEINSPRITZUNG: std::strcpy(buffer,"I_ANTEIL_ZWISCHENEINSPRITZUNG"); break;
        case Property::kVARIATION_OG_ZE: std::strcpy(buffer,"VARIATION_OG_ZE"); break;
        case Property::kUEBERHITZ_ZU_LEISTUNG_K: std::strcpy(buffer,"UEBERHITZ_ZU_LEISTUNG_K"); break;
        case Property::kV_OG_ZU_LEISTUNG_K: std::strcpy(buffer,"V_OG_ZU_LEISTUNG_K"); break;
        case Property::kDRUCK_ZWISCHENEINSPRITZUNG: std::strcpy(buffer,"DRUCK_ZWISCHENEINSPRITZUNG"); break;
        case Property::kUEBERHITZUNG_IST_ZWISCHENEINSPRITZUNG: std::strcpy(buffer,"UEBERHITZUNG_IST_ZWISCHENEINSPRITZUNG"); break;
        case Property::kV_OEFFNUNGSGRAD_ZWISCHENEINSPRITZUNG: std::strcpy(buffer,"V_OEFFNUNGSGRAD_ZWISCHENEINSPRITZUNG"); break;
        case Property::kEXV_OEFFNUNGSGRAD_ZWISCHENEINSPRITZUNG: std::strcpy(buffer,"EXV_OEFFNUNGSGRAD_ZWISCHENEINSPRITZUNG"); break;
        case Property::kLAUFZEIT_VERD_BEI_SPEICHERBEDARF: std::strcpy(buffer,"LAUFZEIT_VERD_BEI_SPEICHERBEDARF"); break;
        case Property::kAUSSEN_LUEFTERLEISTUNG_AT_MIN: std::strcpy(buffer,"AUSSEN_LUEFTERLEISTUNG_AT_MIN"); break;
        case Property::kAUSSEN_LUEFTERLEISTUNG_AT_MAX: std::strcpy(buffer,"AUSSEN_LUEFTERLEISTUNG_AT_MAX"); break;
        case Property::kVERDAMPFERTEMP_VOR_KOMPENSATION: std::strcpy(buffer,"VERDAMPFERTEMP_VOR_KOMPENSATION"); break;
        case Property::kVERDAMPFERTEMP_NACH_KOMPENSATION: std::strcpy(buffer,"VERDAMPFERTEMP_NACH_KOMPENSATION"); break;
        case Property::kVORLAUFISTTEMP_WP_IWS: std::strcpy(buffer,"VORLAUFISTTEMP_WP_IWS"); break;
        case Property::kRUECKLAUFISTTEMP_WP_IWS: std::strcpy(buffer,"RUECKLAUFISTTEMP_WP_IWS"); break;
        case Property::kOEFFGRAD_ZE_KUEHLUNG: std::strcpy(buffer,"OEFFGRAD_ZE_KUEHLUNG"); break;
        case Property::kDATENLOGGER_RING_BETRIEBSART: std::strcpy(buffer,"DATENLOGGER_RING_BETRIEBSART"); break;
        case Property::kDATENLOGGER_RING_ZYKLUS: std::strcpy(buffer,"DATENLOGGER_RING_ZYKLUS"); break;
        case Property::kDATENLOGGER_TRIGGER_EREIGNIS: std::strcpy(buffer,"DATENLOGGER_TRIGGER_EREIGNIS"); break;
        case Property::kFEHLER_PARAMETERSATZ_IWS: std::strcpy(buffer,"FEHLER_PARAMETERSATZ_IWS"); break;
        case Property::kPARAMETERSATZ_ANGEPASST_IWS: std::strcpy(buffer,"PARAMETERSATZ_ANGEPASST_IWS"); break;
        case Property::kMIN_VORLAUF_KUEHLBETRIEB: std::strcpy(buffer,"MIN_VORLAUF_KUEHLBETRIEB"); break;
        case Property::kAKT_KALIBRIERWERT_V: std::strcpy(buffer,"AKT_KALIBRIERWERT_V"); break;
        case Property::kFUEHLERZEITKONSTANTE: std::strcpy(buffer,"FUEHLERZEITKONSTANTE"); break;
        case Property::kKONFIG_0_BIS_10V: std::strcpy(buffer,"KONFIG_0_BIS_10V"); break;
        case Property::kEVE_GRENZWERT_KUEHLBETRIEB: std::strcpy(buffer,"EVE_GRENZWERT_KUEHLBETRIEB"); break;
        case Property::kMODKLAPPENLAUFZEIT: std::strcpy(buffer,"MODKLAPPENLAUFZEIT"); break;
        case Property::kKONFIG_0_BIS_5V: std::strcpy(buffer,"KONFIG_0_BIS_5V"); break;
        case Property::kMESSSTROM_MITTELDRUCK: std::strcpy(buffer,"MESSSTROM_MITTELDRUCK"); break;
        case Property::kANZEIGE_MITTELDRUCK: std::strcpy(buffer,"ANZEIGE_MITTELDRUCK"); break;
        case Property::kLUEFTERDREHZAHL: std::strcpy(buffer,"LUEFTERDREHZAHL"); break;
        case Property::kD_ANTEIL_ZWISCHENEINSPRITZUNG: std::strcpy(buffer,"D_ANTEIL_ZWISCHENEINSPRITZUNG"); break;
        case Property::kSOLLWERT_UEBERHITZUNG_ZWISCHENEINSPRITZUNG: std::strcpy(buffer,"SOLLWERT_UEBERHITZUNG_ZWISCHENEINSPRITZUNG"); break;
        case Property::kGESPEICHERTE_MODULE_LETZTER_INDEX: std::strcpy(buffer,"GESPEICHERTE_MODULE_LETZTER_INDEX"); break;
        case Property::kGESPEICHERTE_MODULE_0: std::strcpy(buffer,"GESPEICHERTE_MODULE_0"); break;
        case Property::kGESPEICHERTE_MODULE_1: std::strcpy(buffer,"GESPEICHERTE_MODULE_1"); break;
        case Property::kGESPEICHERTE_MODULE_2: std::strcpy(buffer,"GESPEICHERTE_MODULE_2"); break;
        case Property::kGESPEICHERTE_MODULE_3: std::strcpy(buffer,"GESPEICHERTE_MODULE_3"); break;
        case Property::kGESPEICHERTE_MODULE_4: std::strcpy(buffer,"GESPEICHERTE_MODULE_4"); break;
        case Property::kGESPEICHERTE_MODULE_5: std::strcpy(buffer,"GESPEICHERTE_MODULE_5"); break;
        case Property::kGESPEICHERTE_MODULE_6: std::strcpy(buffer,"GESPEICHERTE_MODULE_6"); break;
        case Property::kGESPEICHERTE_MODULE_7: std::strcpy(buffer,"GESPEICHERTE_MODULE_7"); break;
        case Property::kGESPEICHERTE_MODULE_8: std::strcpy(buffer,"GESPEICHERTE_MODULE_8"); break;
        case Property::kGESPEICHERTE_MODULE_9: std::strcpy(buffer,"GESPEICHERTE_MODULE_9"); break;
        case Property::kGESPEICHERTE_MODULE_10: std::strcpy(buffer,"GESPEICHERTE_MODULE_10"); break;
        case Property::kGESPEICHERTE_MODULE_11: std::strcpy(buffer,"GESPEICHERTE_MODULE_11"); break;
        case Property::kGESPEICHERTE_MODULE_12: std::strcpy(buffer,"GESPEICHERTE_MODULE_12"); break;
        case Property::kGESPEICHERTE_MODULE_13: std::strcpy(buffer,"GESPEICHERTE_MODULE_13"); break;
        case Property::kGESPEICHERTE_MODULE_14: std::strcpy(buffer,"GESPEICHERTE_MODULE_14"); break;
        case Property::kGESPEICHERTE_MODULE_15: std::strcpy(buffer,"GESPEICHERTE_MODULE_15"); break;
        case Property::kGESPEICHERTE_MODULE_16: std::strcpy(buffer,"GESPEICHERTE_MODULE_16"); break;
        case Property::kGESPEICHERTE_MODULE_17: std::strcpy(buffer,"GESPEICHERTE_MODULE_17"); break;
        case Property::kGESPEICHERTE_MODULE_18: std::strcpy(buffer,"GESPEICHERTE_MODULE_18"); break;
        case Property::kGESPEICHERTE_MODULE_19: std::strcpy(buffer,"GESPEICHERTE_MODULE_19"); break;
        case Property::kGESPEICHERTE_MODULE_20: std::strcpy(buffer,"GESPEICHERTE_MODULE_20"); break;
        case Property::kGESPEICHERTE_MODULE_21: std::strcpy(buffer,"GESPEICHERTE_MODULE_21"); break;
        case Property::kGESPEICHERTE_MODULE_22: std::strcpy(buffer,"GESPEICHERTE_MODULE_22"); break;
        case Property::kGESPEICHERTE_MODULE_23: std::strcpy(buffer,"GESPEICHERTE_MODULE_23"); break;
        case Property::kGESPEICHERTE_MODULE_24: std::strcpy(buffer,"GESPEICHERTE_MODULE_24"); break;
        case Property::kGESPEICHERTE_MODULE_25: std::strcpy(buffer,"GESPEICHERTE_MODULE_25"); break;
        case Property::kGESPEICHERTE_MODULE_26: std::strcpy(buffer,"GESPEICHERTE_MODULE_26"); break;
        case Property::kGESPEICHERTE_MODULE_27: std::strcpy(buffer,"GESPEICHERTE_MODULE_27"); break;
        case Property::kGESPEICHERTE_MODULE_28: std::strcpy(buffer,"GESPEICHERTE_MODULE_28"); break;
        case Property::kGESPEICHERTE_MODULE_29: std::strcpy(buffer,"GESPEICHERTE_MODULE_29"); break;
        case Property::kGESPEICHERTE_MODULE_30: std::strcpy(buffer,"GESPEICHERTE_MODULE_30"); break;
        case Property::kGESPEICHERTE_MODULE_31: std::strcpy(buffer,"GESPEICHERTE_MODULE_31"); break;
        case Property::kGESPEICHERTE_MODULE_32: std::strcpy(buffer,"GESPEICHERTE_MODULE_32"); break;
        case Property::kGESPEICHERTE_MODULE_33: std::strcpy(buffer,"GESPEICHERTE_MODULE_33"); break;
        case Property::kGESPEICHERTE_MODULE_34: std::strcpy(buffer,"GESPEICHERTE_MODULE_34"); break;
        case Property::kGESPEICHERTE_MODULE_35: std::strcpy(buffer,"GESPEICHERTE_MODULE_35"); break;
        case Property::kGESPEICHERTE_MODULE_36: std::strcpy(buffer,"GESPEICHERTE_MODULE_36"); break;
        case Property::kGESPEICHERTE_MODULE_37: std::strcpy(buffer,"GESPEICHERTE_MODULE_37"); break;
        case Property::kGESPEICHERTE_MODULE_38: std::strcpy(buffer,"GESPEICHERTE_MODULE_38"); break;
        case Property::kGESPEICHERTE_MODULE_39: std::strcpy(buffer,"GESPEICHERTE_MODULE_39"); break;
        case Property::kGESPEICHERTE_MODULE_40: std::strcpy(buffer,"GESPEICHERTE_MODULE_40"); break;
        case Property::kGESPEICHERTE_MODULE_41: std::strcpy(buffer,"GESPEICHERTE_MODULE_41"); break;
        case Property::kGESPEICHERTE_MODULE_42: std::strcpy(buffer,"GESPEICHERTE_MODULE_42"); break;
        case Property::kGESPEICHERTE_MODULE_43: std::strcpy(buffer,"GESPEICHERTE_MODULE_43"); break;
        case Property::kGESPEICHERTE_MODULE_44: std::strcpy(buffer,"GESPEICHERTE_MODULE_44"); break;
        case Property::kGESPEICHERTE_MODULE_45: std::strcpy(buffer,"GESPEICHERTE_MODULE_45"); break;
        case Property::kGESPEICHERTE_MODULE_46: std::strcpy(buffer,"GESPEICHERTE_MODULE_46"); break;
        case Property::kGESPEICHERTE_MODULE_47: std::strcpy(buffer,"GESPEICHERTE_MODULE_47"); break;
        case Property::kGESPEICHERTE_MODULE_48: std::strcpy(buffer,"GESPEICHERTE_MODULE_48"); break;
        case Property::kGESPEICHERTE_MODULE_49: std::strcpy(buffer,"GESPEICHERTE_MODULE_49"); break;
        case Property::kGESPEICHERTE_MODULE_50: std::strcpy(buffer,"GESPEICHERTE_MODULE_50"); break;
        case Property::kGESPEICHERTE_MODULE_51: std::strcpy(buffer,"GESPEICHERTE_MODULE_51"); break;
        case Property::kGESPEICHERTE_MODULE_52: std::strcpy(buffer,"GESPEICHERTE_MODULE_52"); break;
        case Property::kGESPEICHERTE_MODULE_53: std::strcpy(buffer,"GESPEICHERTE_MODULE_53"); break;
        case Property::kGESPEICHERTE_MODULE_54: std::strcpy(buffer,"GESPEICHERTE_MODULE_54"); break;
        case Property::kGESPEICHERTE_MODULE_55: std::strcpy(buffer,"GESPEICHERTE_MODULE_55"); break;
        case Property::kGESPEICHERTE_MODULE_56: std::strcpy(buffer,"GESPEICHERTE_MODULE_56"); break;
        case Property::kGESPEICHERTE_MODULE_57: std::strcpy(buffer,"GESPEICHERTE_MODULE_57"); break;
        case Property::kGESPEICHERTE_MODULE_58: std::strcpy(buffer,"GESPEICHERTE_MODULE_58"); break;
        case Property::kGESPEICHERTE_MODULE_59: std::strcpy(buffer,"GESPEICHERTE_MODULE_59"); break;
        case Property::kGESPEICHERTE_MODULE_60: std::strcpy(buffer,"GESPEICHERTE_MODULE_60"); break;
        case Property::kGESPEICHERTE_MODULE_61: std::strcpy(buffer,"GESPEICHERTE_MODULE_61"); break;
        case Property::kGESPEICHERTE_MODULE_62: std::strcpy(buffer,"GESPEICHERTE_MODULE_62"); break;
        case Property::kGESPEICHERTE_MODULE_63: std::strcpy(buffer,"GESPEICHERTE_MODULE_63"); break;
        case Property::kLUEFTER_IST_DREHZAHL_WE1: std::strcpy(buffer,"LUEFTER_IST_DREHZAHL_WE1"); break;
        case Property::kLUEFTER_IST_DREHZAHL_WE2: std::strcpy(buffer,"LUEFTER_IST_DREHZAHL_WE2"); break;
        case Property::kSTROMAUFNAHME_WE1_STUFE_1: std::strcpy(buffer,"STROMAUFNAHME_WE1_STUFE_1"); break;
        case Property::kSTROMAUFNAHME_WE1_STUFE_2: std::strcpy(buffer,"STROMAUFNAHME_WE1_STUFE_2"); break;
        case Property::kSTROMAUFNAHME_WE2_STUFE_1: std::strcpy(buffer,"STROMAUFNAHME_WE2_STUFE_1"); break;
        case Property::kSTROMAUFNAHME_WE2_STUFE_2: std::strcpy(buffer,"STROMAUFNAHME_WE2_STUFE_2"); break;
        case Property::kSTROMAUFNAHME_WE3_STUFE_1: std::strcpy(buffer,"STROMAUFNAHME_WE3_STUFE_1"); break;
        case Property::kSTROMAUFNAHME_WE3_STUFE_2: std::strcpy(buffer,"STROMAUFNAHME_WE3_STUFE_2"); break;
        case Property::kSTROMAUFNAHME_WE4_STUFE_1: std::strcpy(buffer,"STROMAUFNAHME_WE4_STUFE_1"); break;
        case Property::kSTROMAUFNAHME_WE4_STUFE_2: std::strcpy(buffer,"STROMAUFNAHME_WE4_STUFE_2"); break;
        case Property::kEXV_SCHRITTWEITE: std::strcpy(buffer,"EXV_SCHRITTWEITE"); break;
        case Property::kMAX_RUECKLAUFTEMP_WP: std::strcpy(buffer,"MAX_RUECKLAUFTEMP_WP"); break;
        case Property::kMINDESTLAUFZEIT_WE: std::strcpy(buffer,"MINDESTLAUFZEIT_WE"); break;
        case Property::kSTUETZSTELLE_MD1: std::strcpy(buffer,"STUETZSTELLE_MD1"); break;
        case Property::kSTUETZSTELLE_MD2: std::strcpy(buffer,"STUETZSTELLE_MD2"); break;
        case Property::kINTEGRAL_REGELABWEICHUNG_RELATIV: std::strcpy(buffer,"INTEGRAL_REGELABWEICHUNG_RELATIV"); break;
        case Property::kNIEDERDRUCK_MOP_HD: std::strcpy(buffer,"NIEDERDRUCK_MOP_HD"); break;
        case Property::kAUSLEGUNG_WE_LEISTUNG_TA: std::strcpy(buffer,"AUSLEGUNG_WE_LEISTUNG_TA"); break;
        case Property::kEL_AUFNAHMELEISTUNG_WW_TAG_WH: std::strcpy(buffer,"EL_AUFNAHMELEISTUNG_WW_TAG_WH"); break;
        case Property::kEL_AUFNAHMELEISTUNG_WW_TAG_KWH: std::strcpy(buffer,"EL_AUFNAHMELEISTUNG_WW_TAG_KWH"); break;
        case Property::kEL_AUFNAHMELEISTUNG_WW_SUM_KWH: std::strcpy(buffer,"EL_AUFNAHMELEISTUNG_WW_SUM_KWH"); break;
        case Property::kEL_AUFNAHMELEISTUNG_WW_SUM_MWH: std::strcpy(buffer,"EL_AUFNAHMELEISTUNG_WW_SUM_MWH"); break;
        case Property::kEL_AUFNAHMELEISTUNG_HEIZ_TAG_WH: std::strcpy(buffer,"EL_AUFNAHMELEISTUNG_HEIZ_TAG_WH"); break;
        case Property::kEL_AUFNAHMELEISTUNG_HEIZ_TAG_KWH: std::strcpy(buffer,"EL_AUFNAHMELEISTUNG_HEIZ_TAG_KWH"); break;
        case Property::kEL_AUFNAHMELEISTUNG_HEIZ_SUM_KWH: std::strcpy(buffer,"EL_AUFNAHMELEISTUNG_HEIZ_SUM_KWH"); break;
        case Property::kEL_AUFNAHMELEISTUNG_HEIZ_SUM_MWH: std::strcpy(buffer,"EL_AUFNAHMELEISTUNG_HEIZ_SUM_MWH"); break;
        case Property::kWAERMEERTRAG_2WE_WW_TAG_WH: std::strcpy(buffer,"WAERMEERTRAG_2WE_WW_TAG_WH"); break;
        case Property::kWAERMEERTRAG_2WE_WW_TAG_KWH: std::strcpy(buffer,"WAERMEERTRAG_2WE_WW_TAG_KWH"); break;
        case Property::kWAERMEERTRAG_2WE_WW_SUM_KWH: std::strcpy(buffer,"WAERMEERTRAG_2WE_WW_SUM_KWH"); break;
        case Property::kWAERMEERTRAG_2WE_WW_SUM_MWH: std::strcpy(buffer,"WAERMEERTRAG_2WE_WW_SUM_MWH"); break;
        case Property::kWAERMEERTRAG_2WE_HEIZ_TAG_WH: std::strcpy(buffer,"WAERMEERTRAG_2WE_HEIZ_TAG_WH"); break;
        case Property::kWAERMEERTRAG_2WE_HEIZ_TAG_KWH: std::strcpy(buffer,"WAERMEERTRAG_2WE_HEIZ_TAG_KWH"); break;
        case Property::kWAERMEERTRAG_2WE_HEIZ_SUM_KWH: std::strcpy(buffer,"WAERMEERTRAG_2WE_HEIZ_SUM_KWH"); break;
        case Property::kWAERMEERTRAG_2WE_HEIZ_SUM_MWH: std::strcpy(buffer,"WAERMEERTRAG_2WE_HEIZ_SUM_MWH"); break;
        case Property::kWAERMEERTRAG_WW_TAG_WH: std::strcpy(buffer,"WAERMEERTRAG_WW_TAG_WH"); break;
        case Property::kWAERMEERTRAG_WW_TAG_KWH: std::strcpy(buffer,"WAERMEERTRAG_WW_TAG_KWH"); break;
        case Property::kWAERMEERTRAG_WW_SUM_KWH: std::strcpy(buffer,"WAERMEERTRAG_WW_SUM_KWH"); break;
        case Property::kWAERMEERTRAG_WW_SUM_MWH: std::strcpy(buffer,"WAERMEERTRAG_WW_SUM_MWH"); break;
        case Property::kWAERMEERTRAG_HEIZ_TAG_WH: std::strcpy(buffer,"WAERMEERTRAG_HEIZ_TAG_WH"); break;
        case Property::kWAERMEERTRAG_HEIZ_TAG_KWH: std::strcpy(buffer,"WAERMEERTRAG_HEIZ_TAG_KWH"); break;
        case Property::kWAERMEERTRAG_HEIZ_SUM_KWH: std::strcpy(buffer,"WAERMEERTRAG_HEIZ_SUM_KWH"); break;
        case Property::kWAERMEERTRAG_HEIZ_SUM_MWH: std::strcpy(buffer,"WAERMEERTRAG_HEIZ_SUM_MWH"); break;
        case Property::kBUSKENNUNG_HEIZMODUL0: std::strcpy(buffer,"BUSKENNUNG_HEIZMODUL0"); break;
        case Property::kKUEHLEN_AUS_BEI_WW: std::strcpy(buffer,"KUEHLEN_AUS_BEI_WW"); break;
        case Property::kKUEHL_HYSTERESEZEIT: std::strcpy(buffer,"KUEHL_HYSTERESEZEIT"); break;
        case Property::kMAX_KUEHL_HYSTERESE: std::strcpy(buffer,"MAX_KUEHL_HYSTERESE"); break;
        case Property::kKUEHL_HYSTERESE_2: std::strcpy(buffer,"KUEHL_HYSTERESE_2"); break;
        case Property::kKUEHL_SPERRZEIT: std::strcpy(buffer,"KUEHL_SPERRZEIT"); break;
        case Property::kMAX_RUECKLAUFSOLLTEMP_WP: std::strcpy(buffer,"MAX_RUECKLAUFSOLLTEMP_WP"); break;
        case Property::kMIN_RUECKLAUFSOLLTEMP_WP: std::strcpy(buffer,"MIN_RUECKLAUFSOLLTEMP_WP"); break;
        case Property::kMAX_AUSSENTEMP_WE: std::strcpy(buffer,"MAX_AUSSENTEMP_WE"); break;
        case Property::kMIN_AUSSENTMEP_WP: std::strcpy(buffer,"MIN_AUSSENTMEP_WP"); break;
        case Property::kKUEHLEN_MIT_WP: std::strcpy(buffer,"KUEHLEN_MIT_WP"); break;
        case Property::kPU_NACHTLADUNGPROG_EINSCHALTZEIT: std::strcpy(buffer,"PU_NACHTLADUNGPROG_EINSCHALTZEIT"); break;
        case Property::kPU_NACHTLADUNGPROG_AUSSCHALTZEIT: std::strcpy(buffer,"PU_NACHTLADUNGPROG_AUSSCHALTZEIT"); break;
        case Property::kPU_NACHTLADUNG_TEMP: std::strcpy(buffer,"PU_NACHTLADUNG_TEMP"); break;
        case Property::kMIN_PU_TEMP_WE: std::strcpy(buffer,"MIN_PU_TEMP_WE"); break;
        case Property::kMIN_WW_TEMP_WE: std::strcpy(buffer,"MIN_WW_TEMP_WE"); break;
        case Property::kMAX_WE_SPERRZEIT: std::strcpy(buffer,"MAX_WE_SPERRZEIT"); break;
        case Property::kMIN_RUECKLAUFKUEHLTEMP: std::strcpy(buffer,"MIN_RUECKLAUFKUEHLTEMP"); break;
        case Property::kSOMMERZEIT_AUTOMATIK: std::strcpy(buffer,"SOMMERZEIT_AUTOMATIK"); break;
        case Property::kP_ANTEIL_EXV_ZE: std::strcpy(buffer,"P_ANTEIL_EXV_ZE"); break;
        case Property::kI_ANTEIL_EXV_ZE: std::strcpy(buffer,"I_ANTEIL_EXV_ZE"); break;
        case Property::kD_ANTEIL_EXV_ZE: std::strcpy(buffer,"D_ANTEIL_EXV_ZE"); break;
        case Property::kRESET_FEHLERBIT_STATUS_STUFE1: std::strcpy(buffer,"RESET_FEHLERBIT_STATUS_STUFE1"); break;
        case Property::kRESET_FEHLERBIT_STATUS_STUFE2: std::strcpy(buffer,"RESET_FEHLERBIT_STATUS_STUFE2"); break;
        case Property::kFEHLERBIT_STATUS_STUFE1: std::strcpy(buffer,"FEHLERBIT_STATUS_STUFE1"); break;
        case Property::kFEHLERBIT_STATUS_STUFE2: std::strcpy(buffer,"FEHLERBIT_STATUS_STUFE2"); break;
        case Property::kOT_TSP_0: std::strcpy(buffer,"OT_TSP_0"); break;
        case Property::kOT_TSP_1: std::strcpy(buffer,"OT_TSP_1"); break;
        case Property::kOT_TSP_2: std::strcpy(buffer,"OT_TSP_2"); break;
        case Property::kOT_TSP_3: std::strcpy(buffer,"OT_TSP_3"); break;
        case Property::kOT_TSP_4: std::strcpy(buffer,"OT_TSP_4"); break;
        case Property::kOT_TSP_5: std::strcpy(buffer,"OT_TSP_5"); break;
        case Property::kOT_TSP_6: std::strcpy(buffer,"OT_TSP_6"); break;
        case Property::kOT_TSP_7: std::strcpy(buffer,"OT_TSP_7"); break;
        case Property::kOT_TSP_8: std::strcpy(buffer,"OT_TSP_8"); break;
        case Property::kOT_TSP_9: std::strcpy(buffer,"OT_TSP_9"); break;
        case Property::kOT_TSP_10: std::strcpy(buffer,"OT_TSP_10"); break;
        case Property::kOT_TSP_11: std::strcpy(buffer,"OT_TSP_11"); break;
        case Property::kOT_TSP_12: std::strcpy(buffer,"OT_TSP_12"); break;
        case Property::kOT_TSP_13: std::strcpy(buffer,"OT_TSP_13"); break;
        case Property::kOT_TSP_14: std::strcpy(buffer,"OT_TSP_14"); break;
        case Property::kOT_TSP_15: std::strcpy(buffer,"OT_TSP_15"); break;
        case Property::kOT_TSP_16: std::strcpy(buffer,"OT_TSP_16"); break;
        case Property::kOT_TSP_17: std::strcpy(buffer,"OT_TSP_17"); break;
        case Property::kOT_TSP_18: std::strcpy(buffer,"OT_TSP_18"); break;
        case Property::kOT_TSP_19: std::strcpy(buffer,"OT_TSP_19"); break;
        case Property::kOT_TSP_20: std::strcpy(buffer,"OT_TSP_20"); break;
        case Property::kSAMMEL_RELAISSTATUS_ANZ: std::strcpy(buffer,"SAMMEL_RELAISSTATUS_ANZ"); break;
        case Property::kFOLGENWECHSEL_MINCOUNTER_LOW: std::strcpy(buffer,"FOLGENWECHSEL_MINCOUNTER_LOW"); break;
        case Property::kFOLGENWECHSEL_MINCOUNTER_HIGH: std::strcpy(buffer,"FOLGENWECHSEL_MINCOUNTER_HIGH"); break;
        case Property::kERKANNTE_KASKADENKESSEL: std::strcpy(buffer,"ERKANNTE_KASKADENKESSEL"); break;
        case Property::kSCHWIMMBADISTTEMP: std::strcpy(buffer,"SCHWIMMBADISTTEMP"); break;
        case Property::kSCHWIMMBADSOLLTEMP_I: std::strcpy(buffer,"SCHWIMMBADSOLLTEMP_I"); break;
        case Property::kSCHWIMMBADSOLLTEMP_II: std::strcpy(buffer,"SCHWIMMBADSOLLTEMP_II"); break;
        case Property::kSCHWIMMBADSOLLTEMP_III: std::strcpy(buffer,"SCHWIMMBADSOLLTEMP_III"); break;
        case Property::kSTATUSANZEIGE: std::strcpy(buffer,"STATUSANZEIGE"); break;
        case Property::kKONTRAST: std::strcpy(buffer,"KONTRAST"); break;
        case Property::kPARAMETER_SPANNUNGSEINGANG: std::strcpy(buffer,"PARAMETER_SPANNUNGSEINGANG"); break;
        case Property::kPROGRAMMSCHALTER_LEITSTELLE: std::strcpy(buffer,"PROGRAMMSCHALTER_LEITSTELLE"); break;
        case Property::kBERECHNETE_AUFHEIZOPTIMIERUNGSZEIT: std::strcpy(buffer,"BERECHNETE_AUFHEIZOPTIMIERUNGSZEIT"); break;
        case Property::kANTILEGIONELLEN_ERFOLGREICH_MIT_SOLAR: std::strcpy(buffer,"ANTILEGIONELLEN_ERFOLGREICH_MIT_SOLAR"); break;
        case Property::kTEMPORAERE_PROGSTELL: std::strcpy(buffer,"TEMPORAERE_PROGSTELL"); break;
        case Property::kRAUMREGLER_I_ANTEIL: std::strcpy(buffer,"RAUMREGLER_I_ANTEIL"); break;
        case Property::kHZK_VORVERLEGUNGSZEIT: std::strcpy(buffer,"HZK_VORVERLEGUNGSZEIT"); break;
        case Property::kHZK_TYP: std::strcpy(buffer,"HZK_TYP"); break;
        case Property::kINIT_FUEHLER: std::strcpy(buffer,"INIT_FUEHLER"); break;
        case Property::kFEHLER_STUNDE: std::strcpy(buffer,"FEHLER_STUNDE"); break;
        case Property::kFEHLER_MINUTE: std::strcpy(buffer,"FEHLER_MINUTE"); break;
        case Property::kKOLLEKTORTEMP1_MIN_24H: std::strcpy(buffer,"KOLLEKTORTEMP1_MIN_24H"); break;
        case Property::kKOLLEKTORTEMP1_MAX_24H: std::strcpy(buffer,"KOLLEKTORTEMP1_MAX_24H"); break;
        case Property::kKOLLEKTORTEMP2_MIN_24H: std::strcpy(buffer,"KOLLEKTORTEMP2_MIN_24H"); break;
        case Property::kKOLLEKTORTEMP2_MAX_24H: std::strcpy(buffer,"KOLLEKTORTEMP2_MAX_24H"); break;
        case Property::kSPEICHER_UNTEN_TEMP1_MIN_24H: std::strcpy(buffer,"SPEICHER_UNTEN_TEMP1_MIN_24H"); break;
        case Property::kSPEICHER_UNTEN_TEMP1_MAX_24H: std::strcpy(buffer,"SPEICHER_UNTEN_TEMP1_MAX_24H"); break;
        case Property::kSPEICHER_UNTEN_TEMP2_MIN_24H: std::strcpy(buffer,"SPEICHER_UNTEN_TEMP2_MIN_24H"); break;
        case Property::kSPEICHER_UNTEN_TEMP2_MAX_24H: std::strcpy(buffer,"SPEICHER_UNTEN_TEMP2_MAX_24H"); break;
        case Property::kSPEICHER_UNTEN_TEMP3_MIN_24H: std::strcpy(buffer,"SPEICHER_UNTEN_TEMP3_MIN_24H"); break;
        case Property::kSPEICHER_UNTEN_TEMP3_MAX_24H: std::strcpy(buffer,"SPEICHER_UNTEN_TEMP3_MAX_24H"); break;
        case Property::kEINSTRAHLUNG_MIN_24H: std::strcpy(buffer,"EINSTRAHLUNG_MIN_24H"); break;
        case Property::kEINSTRAHLUNG_MAX_24H: std::strcpy(buffer,"EINSTRAHLUNG_MAX_24H"); break;
        case Property::kFUEHLER_FUER_RLW_FUNKTION: std::strcpy(buffer,"FUEHLER_FUER_RLW_FUNKTION"); break;
        case Property::kFUEHLER_FUER_TH1_FUNKTION: std::strcpy(buffer,"FUEHLER_FUER_TH1_FUNKTION"); break;
        case Property::kFUEHLER_FUER_TH2_FUNKTION: std::strcpy(buffer,"FUEHLER_FUER_TH2_FUNKTION"); break;
        case Property::kFUEHLER_FUER_TH3_FUNKTION: std::strcpy(buffer,"FUEHLER_FUER_TH3_FUNKTION"); break;
        case Property::kFUEHLER_FUER_TH4_FUNKTION: std::strcpy(buffer,"FUEHLER_FUER_TH4_FUNKTION"); break;
        case Property::kFUEHLER1_FUER_DT1_FUNKTION: std::strcpy(buffer,"FUEHLER1_FUER_DT1_FUNKTION"); break;
        case Property::kFUEHLER2_FUER_DT1_FUNKTION: std::strcpy(buffer,"FUEHLER2_FUER_DT1_FUNKTION"); break;
        case Property::kFUEHLER1_FUER_DT2_FUNKTION: std::strcpy(buffer,"FUEHLER1_FUER_DT2_FUNKTION"); break;
        case Property::kFUEHLER2_FUER_DT2_FUNKTION: std::strcpy(buffer,"FUEHLER2_FUER_DT2_FUNKTION"); break;
        case Property::kTEMPERATUR_TH1_FUNKTION_EIN: std::strcpy(buffer,"TEMPERATUR_TH1_FUNKTION_EIN"); break;
        case Property::kTEMPERATUR_TH1_FUNKTION_AUS: std::strcpy(buffer,"TEMPERATUR_TH1_FUNKTION_AUS"); break;
        case Property::kTEMPERATUR_TH2_FUNKTION_EIN: std::strcpy(buffer,"TEMPERATUR_TH2_FUNKTION_EIN"); break;
        case Property::kTEMPERATUR_TH2_FUNKTION_AUS: std::strcpy(buffer,"TEMPERATUR_TH2_FUNKTION_AUS"); break;
        case Property::kTEMPERATUR_TH3_FUNKTION_EIN: std::strcpy(buffer,"TEMPERATUR_TH3_FUNKTION_EIN"); break;
        case Property::kTEMPERATUR_TH3_FUNKTION_AUS: std::strcpy(buffer,"TEMPERATUR_TH3_FUNKTION_AUS"); break;
        case Property::kTEMPERATUR_TH4_FUNKTION_EIN: std::strcpy(buffer,"TEMPERATUR_TH4_FUNKTION_EIN"); break;
        case Property::kTEMPERATUR_TH4_FUNKTION_AUS: std::strcpy(buffer,"TEMPERATUR_TH4_FUNKTION_AUS"); break;
        case Property::kTEMPERATUR_DT1_FUNKTION_EIN: std::strcpy(buffer,"TEMPERATUR_DT1_FUNKTION_EIN"); break;
        case Property::kTEMPERATUR_DT1_FUNKTION_AUS: std::strcpy(buffer,"TEMPERATUR_DT1_FUNKTION_AUS"); break;
        case Property::kTEMPERATUR_DT2_FUNKTION_EIN: std::strcpy(buffer,"TEMPERATUR_DT2_FUNKTION_EIN"); break;
        case Property::kTEMPERATUR_DT2_FUNKTION_AUS: std::strcpy(buffer,"TEMPERATUR_DT2_FUNKTION_AUS"); break;
        case Property::kWARMLUFTKOLLEKTOR_RAUMSOLL_EINSCHALTTEMP: std::strcpy(buffer,"WARMLUFTKOLLEKTOR_RAUMSOLL_EINSCHALTTEMP"); break;
        case Property::kWARMLUFTKOLLEKTOR_RAUMSOLL_AUSSCHALTTEMP: std::strcpy(buffer,"WARMLUFTKOLLEKTOR_RAUMSOLL_AUSSCHALTTEMP"); break;
        case Property::kWARMLUFTKOLLEKTOR_DIFFERENZ_EIN: std::strcpy(buffer,"WARMLUFTKOLLEKTOR_DIFFERENZ_EIN"); break;
        case Property::kWARMLUFTKOLLEKTOR_DIFFERENZ_AUS: std::strcpy(buffer,"WARMLUFTKOLLEKTOR_DIFFERENZ_AUS"); break;
        case Property::kWARMLUFTKOLLEKTOR_THERMOSTAT_EIN: std::strcpy(buffer,"WARMLUFTKOLLEKTOR_THERMOSTAT_EIN"); break;
        case Property::kWARMLUFTKOLLEKTOR_THERMOSTAT_AUS: std::strcpy(buffer,"WARMLUFTKOLLEKTOR_THERMOSTAT_AUS"); break;
        case Property::kWARMLUFTKOLLEKTOR_MAXTEMP: std::strcpy(buffer,"WARMLUFTKOLLEKTOR_MAXTEMP"); break;
        case Property::kWARMLUFTKOLLEKTOR_WIEDEREIN_NACH_MAXTEMP: std::strcpy(buffer,"WARMLUFTKOLLEKTOR_WIEDEREIN_NACH_MAXTEMP"); break;
        case Property::kFESTSTOFF_THERMOSTAT: std::strcpy(buffer,"FESTSTOFF_THERMOSTAT"); break;
        case Property::kFESTSTOFF_THERMOSTAT_AUS: std::strcpy(buffer,"FESTSTOFF_THERMOSTAT_AUS"); break;
        case Property::kFESTSTOFF_DIFFERENZ: std::strcpy(buffer,"FESTSTOFF_DIFFERENZ"); break;
        case Property::kFESTSTOFF_DIFFERENZ_AUS: std::strcpy(buffer,"FESTSTOFF_DIFFERENZ_AUS"); break;
        case Property::kRUECKLAUFW_DIFFERENZ: std::strcpy(buffer,"RUECKLAUFW_DIFFERENZ"); break;
        case Property::kRUECKLAUFW_DIFFERENZ_AUS: std::strcpy(buffer,"RUECKLAUFW_DIFFERENZ_AUS"); break;
        case Property::kUMLADUNG_DIFFERENZ: std::strcpy(buffer,"UMLADUNG_DIFFERENZ"); break;
        case Property::kUMLADUNG_DIFFERENZ_AUS: std::strcpy(buffer,"UMLADUNG_DIFFERENZ_AUS"); break;
        case Property::kUMLADUNG_ZIELSPEICHER_MAXTEMP: std::strcpy(buffer,"UMLADUNG_ZIELSPEICHER_MAXTEMP"); break;
        case Property::kUMLADUNG_WIEDEREIN_NACH_ZIELSP_MAXTEMP: std::strcpy(buffer,"UMLADUNG_WIEDEREIN_NACH_ZIELSP_MAXTEMP"); break;
        case Property::kWW_NACHHEIZUNG_FREIGABE: std::strcpy(buffer,"WW_NACHHEIZUNG_FREIGABE"); break;
        case Property::kWMZ_IMPULSRATE_SOLAR: std::strcpy(buffer,"WMZ_IMPULSRATE_SOLAR"); break;
        case Property::kWMZ_SOLARMEDIUM: std::strcpy(buffer,"WMZ_SOLARMEDIUM"); break;
        case Property::kWMZ_KONZENTRATION_SOLARMEDIUM: std::strcpy(buffer,"WMZ_KONZENTRATION_SOLARMEDIUM"); break;
        case Property::kWMZ_MESSUNG_IMPULS: std::strcpy(buffer,"WMZ_MESSUNG_IMPULS"); break;
        case Property::kWMZ_VOLUMENSTROM_FIX_SOLARPUMPE1: std::strcpy(buffer,"WMZ_VOLUMENSTROM_FIX_SOLARPUMPE1"); break;
        case Property::kWMZ_VOLUMENSTROM_FIX_SOLARPUMPE2: std::strcpy(buffer,"WMZ_VOLUMENSTROM_FIX_SOLARPUMPE2"); break;
        case Property::kZIRKPUMPE_IMPULS_LAUFZEIT: std::strcpy(buffer,"ZIRKPUMPE_IMPULS_LAUFZEIT"); break;
        case Property::kZIRKPUMPE_IMPULS_SPERRZEIT: std::strcpy(buffer,"ZIRKPUMPE_IMPULS_SPERRZEIT"); break;
        case Property::kVORRANG_TEST_ZEIT: std::strcpy(buffer,"VORRANG_TEST_ZEIT"); break;
        case Property::kVORRANG_TEST_GRADIENT: std::strcpy(buffer,"VORRANG_TEST_GRADIENT"); break;
        case Property::kSTRAHLUNGSSENSOR_FUNKTION: std::strcpy(buffer,"STRAHLUNGSSENSOR_FUNKTION"); break;
        case Property::kSTRAHLUNGSSENSOR_ABGLEICH: std::strcpy(buffer,"STRAHLUNGSSENSOR_ABGLEICH"); break;
        case Property::kSOLAR_KICKPAUSE1: std::strcpy(buffer,"SOLAR_KICKPAUSE1"); break;
        case Property::kSOLAR_KICKDAUER1: std::strcpy(buffer,"SOLAR_KICKDAUER1"); break;
        case Property::kSOLAR_KICKPAUSE2: std::strcpy(buffer,"SOLAR_KICKPAUSE2"); break;
        case Property::kSOLAR_KICKDAUER2: std::strcpy(buffer,"SOLAR_KICKDAUER2"); break;
        case Property::kSOLAR_KICKPROG_EINSCAHLTZEIT: std::strcpy(buffer,"SOLAR_KICKPROG_EINSCAHLTZEIT"); break;
        case Property::kSOLAR_KICKPROG_AUSSCHALTZEIT: std::strcpy(buffer,"SOLAR_KICKPROG_AUSSCHALTZEIT"); break;
        case Property::kSOLAR_KICK_GRADIENTENZEIT1: std::strcpy(buffer,"SOLAR_KICK_GRADIENTENZEIT1"); break;
        case Property::kSOLAR_KICK_GRADIENTENZEIT2: std::strcpy(buffer,"SOLAR_KICK_GRADIENTENZEIT2"); break;
        case Property::kSOLAR_OST_WEST_KOLLEKTOR: std::strcpy(buffer,"SOLAR_OST_WEST_KOLLEKTOR"); break;
        case Property::kSOLAR_DIFFERENZ_KOLLEKTOR1: std::strcpy(buffer,"SOLAR_DIFFERENZ_KOLLEKTOR1"); break;
        case Property::kSOLAR_DIFFERENZ_KOLLEKTOR1_AUS: std::strcpy(buffer,"SOLAR_DIFFERENZ_KOLLEKTOR1_AUS"); break;
        case Property::kSOLAR_DIFFERENZ_KOLLEKTOR2: std::strcpy(buffer,"SOLAR_DIFFERENZ_KOLLEKTOR2"); break;
        case Property::kSOLAR_DIFFERENZ_KOLLEKTOR2_AUS: std::strcpy(buffer,"SOLAR_DIFFERENZ_KOLLEKTOR2_AUS"); break;
        case Property::kSOLAR_THERMOSTAT_KOLLEKTOR1: std::strcpy(buffer,"SOLAR_THERMOSTAT_KOLLEKTOR1"); break;
        case Property::kSOLAR_THERMOSTAT_KOLLEKTOR1_AUS: std::strcpy(buffer,"SOLAR_THERMOSTAT_KOLLEKTOR1_AUS"); break;
        case Property::kSOLAR_THERMOSTAT_KOLLEKTOR2: std::strcpy(buffer,"SOLAR_THERMOSTAT_KOLLEKTOR2"); break;
        case Property::kSOLAR_THERMOSTAT_KOLLEKTOR2_AUS: std::strcpy(buffer,"SOLAR_THERMOSTAT_KOLLEKTOR2_AUS"); break;
        case Property::kSOLAR_KOLLEKTOR1_KUEHL: std::strcpy(buffer,"SOLAR_KOLLEKTOR1_KUEHL"); break;
        case Property::kSOLAR_KOLLEKTOR1_KUEHL_AUS: std::strcpy(buffer,"SOLAR_KOLLEKTOR1_KUEHL_AUS"); break;
        case Property::kSOLAR_KOLLEKTOR2_KUEHL: std::strcpy(buffer,"SOLAR_KOLLEKTOR2_KUEHL"); break;
        case Property::kSOLAR_KOLLEKTOR2_KUEHL_AUS: std::strcpy(buffer,"SOLAR_KOLLEKTOR2_KUEHL_AUS"); break;
        case Property::kSOLAR_KOLLEKTOR1_NOTAUS: std::strcpy(buffer,"SOLAR_KOLLEKTOR1_NOTAUS"); break;
        case Property::kSOLAR_KOLLEKTOR1_WIEDEREIN_NACH_NOTAUS: std::strcpy(buffer,"SOLAR_KOLLEKTOR1_WIEDEREIN_NACH_NOTAUS"); break;
        case Property::kSOLAR_KOLLEKTOR2_NOTAUS: std::strcpy(buffer,"SOLAR_KOLLEKTOR2_NOTAUS"); break;
        case Property::kSOLAR_KOLLEKTOR2_WIEDEREIN_NACH_NOTAUS: std::strcpy(buffer,"SOLAR_KOLLEKTOR2_WIEDEREIN_NACH_NOTAUS"); break;
        case Property::kSOLAR_KOLLEKTOR_KUEHL_SPEICHER_NR: std::strcpy(buffer,"SOLAR_KOLLEKTOR_KUEHL_SPEICHER_NR"); break;
        case Property::kFEUCHTEREGELUNG_EIN_AUS: std::strcpy(buffer,"FEUCHTEREGELUNG_EIN_AUS"); break;
        case Property::kMIN_SOLL_FEUCHTE: std::strcpy(buffer,"MIN_SOLL_FEUCHTE"); break;
        case Property::kMAX_SOLL_FEUCHTE: std::strcpy(buffer,"MAX_SOLL_FEUCHTE"); break;
        case Property::kMAXTEMP_SPEICHER1: std::strcpy(buffer,"MAXTEMP_SPEICHER1"); break;
        case Property::kMAXTEMP_SPEICHER1_WIEDEREIN: std::strcpy(buffer,"MAXTEMP_SPEICHER1_WIEDEREIN"); break;
        case Property::kMAXTEMP_SPEICHER2: std::strcpy(buffer,"MAXTEMP_SPEICHER2"); break;
        case Property::kMAXTEMP_SPEICHER2_WIEDEREIN: std::strcpy(buffer,"MAXTEMP_SPEICHER2_WIEDEREIN"); break;
        case Property::kMAXTEMP_SPEICHER3: std::strcpy(buffer,"MAXTEMP_SPEICHER3"); break;
        case Property::kMAXTEMP_SPEICHER3_WIEDEREIN: std::strcpy(buffer,"MAXTEMP_SPEICHER3_WIEDEREIN"); break;
        case Property::kMAXTEMP_SPEICHER_KUEHLFUNKTION: std::strcpy(buffer,"MAXTEMP_SPEICHER_KUEHLFUNKTION"); break;
        case Property::kLAUFZEIT_SOLAR_HIGH: std::strcpy(buffer,"LAUFZEIT_SOLAR_HIGH"); break;
        case Property::kLAUFZEIT_SOLAR2: std::strcpy(buffer,"LAUFZEIT_SOLAR2"); break;
        case Property::kLAUFZEIT_SOLAR2_HIGH: std::strcpy(buffer,"LAUFZEIT_SOLAR2_HIGH"); break;
        case Property::kLADEZEIT_SPEICHER: std::strcpy(buffer,"LADEZEIT_SPEICHER"); break;
        case Property::kLADEZEIT_SPEICHER_HIGH: std::strcpy(buffer,"LADEZEIT_SPEICHER_HIGH"); break;
        case Property::kLADEZEIT_SPEICHER2: std::strcpy(buffer,"LADEZEIT_SPEICHER2"); break;
        case Property::kLADEZEIT_SPEICHER2_HIGH: std::strcpy(buffer,"LADEZEIT_SPEICHER2_HIGH"); break;
        case Property::kLADEZEIT_SPEICHER3: std::strcpy(buffer,"LADEZEIT_SPEICHER3"); break;
        case Property::kLADEZEIT_SPEICHER3_HIGH: std::strcpy(buffer,"LADEZEIT_SPEICHER3_HIGH"); break;
        case Property::kPELLET_EIN_AUS: std::strcpy(buffer,"PELLET_EIN_AUS"); break;
        case Property::kPELLET_PUFFER_LADETEMP: std::strcpy(buffer,"PELLET_PUFFER_LADETEMP"); break;
        case Property::kPELLET_KUEHLFUNKTION: std::strcpy(buffer,"PELLET_KUEHLFUNKTION"); break;
        case Property::kPELLET_KUEHLFUNKTION_SCHALTTEMP: std::strcpy(buffer,"PELLET_KUEHLFUNKTION_SCHALTTEMP"); break;
        case Property::kPELLET_KUEHLFUNKTION_VORLAUFSOLLTEMP: std::strcpy(buffer,"PELLET_KUEHLFUNKTION_VORLAUFSOLLTEMP"); break;
        case Property::kMAX_PP_GRADIENTEN_TEMP: std::strcpy(buffer,"MAX_PP_GRADIENTEN_TEMP"); break;
        case Property::kMAX_PP_GRADIENT: std::strcpy(buffer,"MAX_PP_GRADIENT"); break;
        case Property::kECO_PUFFERTEMP_ABSOLUT_EIN: std::strcpy(buffer,"ECO_PUFFERTEMP_ABSOLUT_EIN"); break;
        case Property::kECO_PUFFERTEMP_ABSOLUT_AUS: std::strcpy(buffer,"ECO_PUFFERTEMP_ABSOLUT_AUS"); break;
        case Property::kWARMLUFTKOLLEKTOR_WW_MAXTEMP: std::strcpy(buffer,"WARMLUFTKOLLEKTOR_WW_MAXTEMP"); break;
        case Property::kWARMLUFTKOLLEKTOR_WW_WIEDEREIN_NACH_MAXTEMP: std::strcpy(buffer,"WARMLUFTKOLLEKTOR_WW_WIEDEREIN_NACH_MAXTEMP"); break;
        case Property::kSCHWIMMBADREGELUNG_EIN_AUS: std::strcpy(buffer,"SCHWIMMBADREGELUNG_EIN_AUS"); break;
        case Property::kSOLAR_PLAUSI_FEHLERMELDUNGEN_EIN_AUS: std::strcpy(buffer,"SOLAR_PLAUSI_FEHLERMELDUNGEN_EIN_AUS"); break;
        case Property::kSPEICHERLADEPUMPE_PWM_SIGNAL: std::strcpy(buffer,"SPEICHERLADEPUMPE_PWM_SIGNAL"); break;
        case Property::kAKT_SPERRZEIT: std::strcpy(buffer,"AKT_SPERRZEIT"); break;
        case Property::kKASKADEN_SCHALTWERT: std::strcpy(buffer,"KASKADEN_SCHALTWERT"); break;
        case Property::kREGELDIFFERENZ: std::strcpy(buffer,"REGELDIFFERENZ"); break;
        case Property::kSCHALTHYSTERESE_PUFFER: std::strcpy(buffer,"SCHALTHYSTERESE_PUFFER"); break;
        case Property::kPUFFERUEBERHOEHUNGSDIFF: std::strcpy(buffer,"PUFFERUEBERHOEHUNGSDIFF"); break;
        case Property::kMAX_PUFFERTEMPERATUR: std::strcpy(buffer,"MAX_PUFFERTEMPERATUR"); break;
        case Property::kMIN_PUFFERTEMPERATUR: std::strcpy(buffer,"MIN_PUFFERTEMPERATUR"); break;
        case Property::kMAX_SAMMLERTEMPERATUR: std::strcpy(buffer,"MAX_SAMMLERTEMPERATUR"); break;
        case Property::kMIN_SAMMLERTEMPERATUR: std::strcpy(buffer,"MIN_SAMMLERTEMPERATUR"); break;
        case Property::kSAMMLERUEBERHOEHUNGSDIFF: std::strcpy(buffer,"SAMMLERUEBERHOEHUNGSDIFF"); break;
        case Property::kABREGELTEMPERATUR: std::strcpy(buffer,"ABREGELTEMPERATUR"); break;
        case Property::kFOLGEWECHSEL_IN_STD: std::strcpy(buffer,"FOLGEWECHSEL_IN_STD"); break;
        case Property::kSONDERNIVEAU_TEMPERATUR: std::strcpy(buffer,"SONDERNIVEAU_TEMPERATUR"); break;
        case Property::kAUSSEN_FROSTTEMP: std::strcpy(buffer,"AUSSEN_FROSTTEMP"); break;
        case Property::kBRENNER1LAUFZEIT: std::strcpy(buffer,"BRENNER1LAUFZEIT"); break;
        case Property::kBRENNER1STARTS: std::strcpy(buffer,"BRENNER1STARTS"); break;
        case Property::kBRENNER2LAUFZEIT: std::strcpy(buffer,"BRENNER2LAUFZEIT"); break;
        case Property::kBRENNER2STARTS: std::strcpy(buffer,"BRENNER2STARTS"); break;
        case Property::kEINSTELL_SPEICHERSOLLTEMP2: std::strcpy(buffer,"EINSTELL_SPEICHERSOLLTEMP2"); break;
        case Property::kSTATUS_HK_ANZEIGE: std::strcpy(buffer,"STATUS_HK_ANZEIGE"); break;
        case Property::kUEBERLAUF_BRENNER1LAUFZEIT: std::strcpy(buffer,"UEBERLAUF_BRENNER1LAUFZEIT"); break;
        case Property::kUEBERLAUF_BRENNER1STARTS: std::strcpy(buffer,"UEBERLAUF_BRENNER1STARTS"); break;
        case Property::kUEBERLAUF_BRENNER2LAUFZEIT: std::strcpy(buffer,"UEBERLAUF_BRENNER2LAUFZEIT"); break;
        case Property::kUEBERLAUF_BRENNER2STARTS: std::strcpy(buffer,"UEBERLAUF_BRENNER2STARTS"); break;
        case Property::kAUSSENTEMP_MITTEL: std::strcpy(buffer,"AUSSENTEMP_MITTEL"); break;
        case Property::kKEIN_HEIZBEDARF: std::strcpy(buffer,"KEIN_HEIZBEDARF"); break;
        case Property::kSTATUSWAERMEANFORDERUNG: std::strcpy(buffer,"STATUSWAERMEANFORDERUNG"); break;
        case Property::kVARIABLER_VERBRAUCHER: std::strcpy(buffer,"VARIABLER_VERBRAUCHER"); break;
        case Property::kCUST_EEPR_TIMEOUT: std::strcpy(buffer,"CUST_EEPR_TIMEOUT"); break;
        case Property::kHARDWARE_VERSION: std::strcpy(buffer,"HARDWARE_VERSION"); break;
        case Property::kESTRICH_TAG: std::strcpy(buffer,"ESTRICH_TAG"); break;
        case Property::kESTRICH_VORLAUFTEMP: std::strcpy(buffer,"ESTRICH_VORLAUFTEMP"); break;
        case Property::kRAUM_FROSTSCHUTZTEMP: std::strcpy(buffer,"RAUM_FROSTSCHUTZTEMP"); break;
        case Property::kSOLL_TEMP_MODE: std::strcpy(buffer,"SOLL_TEMP_MODE"); break;
        case Property::kMERKER_ECO: std::strcpy(buffer,"MERKER_ECO"); break;
        case Property::kMERKER_ECO_2: std::strcpy(buffer,"MERKER_ECO_2"); break;
        case Property::kMERKER_SOMMER: std::strcpy(buffer,"MERKER_SOMMER"); break;
        case Property::kWCM_GERAET: std::strcpy(buffer,"WCM_GERAET"); break;
        case Property::kAUSSENTEMP_MISCH: std::strcpy(buffer,"AUSSENTEMP_MISCH"); break;
        case Property::kTIMEOUT: std::strcpy(buffer,"TIMEOUT"); break;
        case Property::kVAR_RAUMTHERMOSTAT: std::strcpy(buffer,"VAR_RAUMTHERMOSTAT"); break;
        case Property::kMERKER_RAUMTHERMOSTAT: std::strcpy(buffer,"MERKER_RAUMTHERMOSTAT"); break;
        case Property::kKESSELLEISTUNG: std::strcpy(buffer,"KESSELLEISTUNG"); break;
        case Property::kZEITMASTER: std::strcpy(buffer,"ZEITMASTER"); break;
        case Property::kSAMMEL_RELAISSTATUS: std::strcpy(buffer,"SAMMEL_RELAISSTATUS"); break;
        case Property::kPARAMETER_KONFIGURATION: std::strcpy(buffer,"PARAMETER_KONFIGURATION"); break;
        case Property::kEBUS_STROMUEBERSCHUSS: std::strcpy(buffer,"EBUS_STROMUEBERSCHUSS"); break;
        case Property::kMASTERZUGRIFF: std::strcpy(buffer,"MASTERZUGRIFF"); break;
        case Property::kEBUS_SPERRZAEHLER: std::strcpy(buffer,"EBUS_SPERRZAEHLER"); break;
        case Property::kFEHLERSTRING: std::strcpy(buffer,"FEHLERSTRING"); break;
        case Property::kBUSFEHLER: std::strcpy(buffer,"BUSFEHLER"); break;
        case Property::kDIREKT_EINGANG: std::strcpy(buffer,"DIREKT_EINGANG"); break;
        case Property::kEINGANG0: std::strcpy(buffer,"EINGANG0"); break;
        case Property::kEINGANG1: std::strcpy(buffer,"EINGANG1"); break;
        case Property::kEINGANG2: std::strcpy(buffer,"EINGANG2"); break;
        case Property::kEINGANG3: std::strcpy(buffer,"EINGANG3"); break;
        case Property::kEINGANG4: std::strcpy(buffer,"EINGANG4"); break;
        case Property::kEINGANG5: std::strcpy(buffer,"EINGANG5"); break;
        case Property::kEINGANG6: std::strcpy(buffer,"EINGANG6"); break;
        case Property::kEINGANG7: std::strcpy(buffer,"EINGANG7"); break;
        case Property::kEINGANG8: std::strcpy(buffer,"EINGANG8"); break;
        case Property::kEINGANG9: std::strcpy(buffer,"EINGANG9"); break;
        case Property::kEINGANG10: std::strcpy(buffer,"EINGANG10"); break;
        case Property::kEINGANG11: std::strcpy(buffer,"EINGANG11"); break;
        case Property::kEINGANG12: std::strcpy(buffer,"EINGANG12"); break;
        case Property::kEINGANG13: std::strcpy(buffer,"EINGANG13"); break;
        case Property::kEINGANG14: std::strcpy(buffer,"EINGANG14"); break;
        case Property::kEINGANG15: std::strcpy(buffer,"EINGANG15"); break;
        case Property::kEINGANG16: std::strcpy(buffer,"EINGANG16"); break;
        case Property::kEINGANG17: std::strcpy(buffer,"EINGANG17"); break;
        case Property::kEINGANG18: std::strcpy(buffer,"EINGANG18"); break;
        case Property::kEINGANG19: std::strcpy(buffer,"EINGANG19"); break;
        case Property::kEINGANG20: std::strcpy(buffer,"EINGANG20"); break;
        case Property::kKONFIG_EINGANG0: std::strcpy(buffer,"KONFIG_EINGANG0"); break;
        case Property::kKONFIG_EINGANG1: std::strcpy(buffer,"KONFIG_EINGANG1"); break;
        case Property::kKONFIG_EINGANG2: std::strcpy(buffer,"KONFIG_EINGANG2"); break;
        case Property::kKONFIG_EINGANG3: std::strcpy(buffer,"KONFIG_EINGANG3"); break;
        case Property::kKONFIG_EINGANG4: std::strcpy(buffer,"KONFIG_EINGANG4"); break;
        case Property::kKONFIG_EINGANG5: std::strcpy(buffer,"KONFIG_EINGANG5"); break;
        case Property::kKONFIG_EINGANG6: std::strcpy(buffer,"KONFIG_EINGANG6"); break;
        case Property::kKONFIG_EINGANG7: std::strcpy(buffer,"KONFIG_EINGANG7"); break;
        case Property::kKONFIG_EINGANG8: std::strcpy(buffer,"KONFIG_EINGANG8"); break;
        case Property::kKONFIG_EINGANG9: std::strcpy(buffer,"KONFIG_EINGANG9"); break;
        case Property::kKONFIG_EINGANG10: std::strcpy(buffer,"KONFIG_EINGANG10"); break;
        case Property::kKONFIG_EINGANG11: std::strcpy(buffer,"KONFIG_EINGANG11"); break;
        case Property::kKONFIG_EINGANG12: std::strcpy(buffer,"KONFIG_EINGANG12"); break;
        case Property::kKONFIG_EINGANG13: std::strcpy(buffer,"KONFIG_EINGANG13"); break;
        case Property::kKONFIG_EINGANG14: std::strcpy(buffer,"KONFIG_EINGANG14"); break;
        case Property::kKONFIG_EINGANG15: std::strcpy(buffer,"KONFIG_EINGANG15"); break;
        case Property::kKONFIG_EINGANG16: std::strcpy(buffer,"KONFIG_EINGANG16"); break;
        case Property::kKONFIG_EINGANG17: std::strcpy(buffer,"KONFIG_EINGANG17"); break;
        case Property::kKONFIG_EINGANG18: std::strcpy(buffer,"KONFIG_EINGANG18"); break;
        case Property::kKONFIG_EINGANG19: std::strcpy(buffer,"KONFIG_EINGANG19"); break;
        case Property::kKONFIG_EINGANG20: std::strcpy(buffer,"KONFIG_EINGANG20"); break;
        case Property::kAUSGANG0: std::strcpy(buffer,"AUSGANG0"); break;
        case Property::kAUSGANG1: std::strcpy(buffer,"AUSGANG1"); break;
        case Property::kAUSGANG2: std::strcpy(buffer,"AUSGANG2"); break;
        case Property::kAUSGANG3: std::strcpy(buffer,"AUSGANG3"); break;
        case Property::kAUSGANG4: std::strcpy(buffer,"AUSGANG4"); break;
        case Property::kAUSGANG5: std::strcpy(buffer,"AUSGANG5"); break;
        case Property::kAUSGANG6: std::strcpy(buffer,"AUSGANG6"); break;
        case Property::kAUSGANG7: std::strcpy(buffer,"AUSGANG7"); break;
        case Property::kAUSGANG8: std::strcpy(buffer,"AUSGANG8"); break;
        case Property::kAUSGANG9: std::strcpy(buffer,"AUSGANG9"); break;
        case Property::kAUSGANG10: std::strcpy(buffer,"AUSGANG10"); break;
        case Property::kAUSGANG11: std::strcpy(buffer,"AUSGANG11"); break;
        case Property::kAUSGANG12: std::strcpy(buffer,"AUSGANG12"); break;
        case Property::kAUSGANG13: std::strcpy(buffer,"AUSGANG13"); break;
        case Property::kAUSGANG14: std::strcpy(buffer,"AUSGANG14"); break;
        case Property::kAUSGANG15: std::strcpy(buffer,"AUSGANG15"); break;
        case Property::kAUSGANG16: std::strcpy(buffer,"AUSGANG16"); break;
        case Property::kAUSGANG17: std::strcpy(buffer,"AUSGANG17"); break;
        case Property::kAUSGANG18: std::strcpy(buffer,"AUSGANG18"); break;
        case Property::kAUSGANG19: std::strcpy(buffer,"AUSGANG19"); break;
        case Property::kAUSGANG20: std::strcpy(buffer,"AUSGANG20"); break;
        case Property::kKONFIG_AUSGANG0: std::strcpy(buffer,"KONFIG_AUSGANG0"); break;
        case Property::kKONFIG_AUSGANG1: std::strcpy(buffer,"KONFIG_AUSGANG1"); break;
        case Property::kKONFIG_AUSGANG2: std::strcpy(buffer,"KONFIG_AUSGANG2"); break;
        case Property::kKONFIG_AUSGANG3: std::strcpy(buffer,"KONFIG_AUSGANG3"); break;
        case Property::kKONFIG_AUSGANG4: std::strcpy(buffer,"KONFIG_AUSGANG4"); break;
        case Property::kKONFIG_AUSGANG5: std::strcpy(buffer,"KONFIG_AUSGANG5"); break;
        case Property::kKONFIG_AUSGANG6: std::strcpy(buffer,"KONFIG_AUSGANG6"); break;
        case Property::kKONFIG_AUSGANG7: std::strcpy(buffer,"KONFIG_AUSGANG7"); break;
        case Property::kKONFIG_AUSGANG8: std::strcpy(buffer,"KONFIG_AUSGANG8"); break;
        case Property::kKONFIG_AUSGANG9: std::strcpy(buffer,"KONFIG_AUSGANG9"); break;
        case Property::kKONFIG_AUSGANG10: std::strcpy(buffer,"KONFIG_AUSGANG10"); break;
        case Property::kKONFIG_AUSGANG11: std::strcpy(buffer,"KONFIG_AUSGANG11"); break;
        case Property::kKONFIG_AUSGANG12: std::strcpy(buffer,"KONFIG_AUSGANG12"); break;
        case Property::kKONFIG_AUSGANG13: std::strcpy(buffer,"KONFIG_AUSGANG13"); break;
        case Property::kKONFIG_AUSGANG14: std::strcpy(buffer,"KONFIG_AUSGANG14"); break;
        case Property::kKONFIG_AUSGANG15: std::strcpy(buffer,"KONFIG_AUSGANG15"); break;
        case Property::kKONFIG_AUSGANG16: std::strcpy(buffer,"KONFIG_AUSGANG16"); break;
        case Property::kKONFIG_AUSGANG17: std::strcpy(buffer,"KONFIG_AUSGANG17"); break;
        case Property::kKONFIG_AUSGANG18: std::strcpy(buffer,"KONFIG_AUSGANG18"); break;
        case Property::kKONFIG_AUSGANG19: std::strcpy(buffer,"KONFIG_AUSGANG19"); break;
        case Property::kKONFIG_AUSGANG20: std::strcpy(buffer,"KONFIG_AUSGANG20"); break;
        case Property::kFEHLERFELD_0: std::strcpy(buffer,"FEHLERFELD_0"); break;
        case Property::kFEHLERFELD_1: std::strcpy(buffer,"FEHLERFELD_1"); break;
        case Property::kFEHLERFELD_2: std::strcpy(buffer,"FEHLERFELD_2"); break;
        case Property::kFEHLERFELD_3: std::strcpy(buffer,"FEHLERFELD_3"); break;
        case Property::kFEHLERFELD_4: std::strcpy(buffer,"FEHLERFELD_4"); break;
        case Property::kFEHLERFELD_5: std::strcpy(buffer,"FEHLERFELD_5"); break;
        case Property::kFEHLERFELD_6: std::strcpy(buffer,"FEHLERFELD_6"); break;
        case Property::kFEHLERFELD_7: std::strcpy(buffer,"FEHLERFELD_7"); break;
        case Property::kFEHLERFELD_8: std::strcpy(buffer,"FEHLERFELD_8"); break;
        case Property::kFEHLERFELD_9: std::strcpy(buffer,"FEHLERFELD_9"); break;
        case Property::kFEHLERFELD_10: std::strcpy(buffer,"FEHLERFELD_10"); break;
        case Property::kFEHLERFELD_11: std::strcpy(buffer,"FEHLERFELD_11"); break;
        case Property::kFEHLERFELD_12: std::strcpy(buffer,"FEHLERFELD_12"); break;
        case Property::kFEHLERFELD_13: std::strcpy(buffer,"FEHLERFELD_13"); break;
        case Property::kFEHLERFELD_14: std::strcpy(buffer,"FEHLERFELD_14"); break;
        case Property::kFEHLERFELD_15: std::strcpy(buffer,"FEHLERFELD_15"); break;
        case Property::kFEHLERFELD_16: std::strcpy(buffer,"FEHLERFELD_16"); break;
        case Property::kFEHLERFELD_17: std::strcpy(buffer,"FEHLERFELD_17"); break;
        case Property::kFEHLERFELD_18: std::strcpy(buffer,"FEHLERFELD_18"); break;
        case Property::kFEHLERFELD_19: std::strcpy(buffer,"FEHLERFELD_19"); break;
        case Property::kFEHLERFELD_20: std::strcpy(buffer,"FEHLERFELD_20"); break;
        case Property::kFEHLERFELD_21: std::strcpy(buffer,"FEHLERFELD_21"); break;
        case Property::kFEHLERFELD_22: std::strcpy(buffer,"FEHLERFELD_22"); break;
        case Property::kFEHLERFELD_23: std::strcpy(buffer,"FEHLERFELD_23"); break;
        case Property::kFEHLERFELD_24: std::strcpy(buffer,"FEHLERFELD_24"); break;
        case Property::kFEHLERFELD_25: std::strcpy(buffer,"FEHLERFELD_25"); break;
        case Property::kFEHLERFELD_26: std::strcpy(buffer,"FEHLERFELD_26"); break;
        case Property::kFEHLERFELD_27: std::strcpy(buffer,"FEHLERFELD_27"); break;
        case Property::kFEHLERFELD_28: std::strcpy(buffer,"FEHLERFELD_28"); break;
        case Property::kFEHLERFELD_29: std::strcpy(buffer,"FEHLERFELD_29"); break;
        case Property::kFEHLERFELD_30: std::strcpy(buffer,"FEHLERFELD_30"); break;
        case Property::kFEHLERFELD_31: std::strcpy(buffer,"FEHLERFELD_31"); break;
        case Property::kFEHLERFELD_32: std::strcpy(buffer,"FEHLERFELD_32"); break;
        case Property::kFEHLERFELD_33: std::strcpy(buffer,"FEHLERFELD_33"); break;
        case Property::kFEHLERFELD_34: std::strcpy(buffer,"FEHLERFELD_34"); break;
        case Property::kFEHLERFELD_35: std::strcpy(buffer,"FEHLERFELD_35"); break;
        case Property::kFEHLERFELD_36: std::strcpy(buffer,"FEHLERFELD_36"); break;
        case Property::kFEHLERFELD_37: std::strcpy(buffer,"FEHLERFELD_37"); break;
        case Property::kFEHLERFELD_38: std::strcpy(buffer,"FEHLERFELD_38"); break;
        case Property::kFEHLERFELD_39: std::strcpy(buffer,"FEHLERFELD_39"); break;
        case Property::kFEHLERFELD_40: std::strcpy(buffer,"FEHLERFELD_40"); break;
        case Property::kFEHLERFELD_41: std::strcpy(buffer,"FEHLERFELD_41"); break;
        case Property::kFEHLERFELD_42: std::strcpy(buffer,"FEHLERFELD_42"); break;
        case Property::kFEHLERFELD_43: std::strcpy(buffer,"FEHLERFELD_43"); break;
        case Property::kFEHLERFELD_44: std::strcpy(buffer,"FEHLERFELD_44"); break;
        case Property::kFEHLERFELD_45: std::strcpy(buffer,"FEHLERFELD_45"); break;
        case Property::kFEHLERFELD_46: std::strcpy(buffer,"FEHLERFELD_46"); break;
        case Property::kFEHLERFELD_47: std::strcpy(buffer,"FEHLERFELD_47"); break;
        case Property::kFEHLERFELD_48: std::strcpy(buffer,"FEHLERFELD_48"); break;
        case Property::kFEHLERFELD_49: std::strcpy(buffer,"FEHLERFELD_49"); break;
        case Property::kFEHLERFELD_50: std::strcpy(buffer,"FEHLERFELD_50"); break;
        case Property::kFEHLERFELD_51: std::strcpy(buffer,"FEHLERFELD_51"); break;
        case Property::kFEHLERFELD_52: std::strcpy(buffer,"FEHLERFELD_52"); break;
        case Property::kFEHLERFELD_53: std::strcpy(buffer,"FEHLERFELD_53"); break;
        case Property::kFEHLERFELD_54: std::strcpy(buffer,"FEHLERFELD_54"); break;
        case Property::kFEHLERFELD_55: std::strcpy(buffer,"FEHLERFELD_55"); break;
        case Property::kFEHLERFELD_56: std::strcpy(buffer,"FEHLERFELD_56"); break;
        case Property::kFEHLERFELD_57: std::strcpy(buffer,"FEHLERFELD_57"); break;
        case Property::kFEHLERFELD_58: std::strcpy(buffer,"FEHLERFELD_58"); break;
        case Property::kFEHLERFELD_59: std::strcpy(buffer,"FEHLERFELD_59"); break;
        case Property::kFEHLERFELD_60: std::strcpy(buffer,"FEHLERFELD_60"); break;
        case Property::kFEHLERFELD_61: std::strcpy(buffer,"FEHLERFELD_61"); break;
        case Property::kFEHLERFELD_62: std::strcpy(buffer,"FEHLERFELD_62"); break;
        case Property::kFEHLERFELD_63: std::strcpy(buffer,"FEHLERFELD_63"); break;
        case Property::kFEHLERFELD_64: std::strcpy(buffer,"FEHLERFELD_64"); break;
        case Property::kFEHLERFELD_65: std::strcpy(buffer,"FEHLERFELD_65"); break;
        case Property::kFEHLERFELD_66: std::strcpy(buffer,"FEHLERFELD_66"); break;
        case Property::kFEHLERFELD_67: std::strcpy(buffer,"FEHLERFELD_67"); break;
        case Property::kFEHLERFELD_68: std::strcpy(buffer,"FEHLERFELD_68"); break;
        case Property::kFEHLERFELD_69: std::strcpy(buffer,"FEHLERFELD_69"); break;
        case Property::kFEHLERFELD_70: std::strcpy(buffer,"FEHLERFELD_70"); break;
        case Property::kFEHLERFELD_71: std::strcpy(buffer,"FEHLERFELD_71"); break;
        case Property::kFEHLERFELD_72: std::strcpy(buffer,"FEHLERFELD_72"); break;
        case Property::kFEHLERFELD_73: std::strcpy(buffer,"FEHLERFELD_73"); break;
        case Property::kFEHLERFELD_74: std::strcpy(buffer,"FEHLERFELD_74"); break;
        case Property::kFEHLERFELD_75: std::strcpy(buffer,"FEHLERFELD_75"); break;
        case Property::kFEHLERFELD_76: std::strcpy(buffer,"FEHLERFELD_76"); break;
        case Property::kFEHLERFELD_77: std::strcpy(buffer,"FEHLERFELD_77"); break;
        case Property::kFEHLERFELD_78: std::strcpy(buffer,"FEHLERFELD_78"); break;
        case Property::kFEHLERFELD_79: std::strcpy(buffer,"FEHLERFELD_79"); break;
        case Property::kFEHLERFELD_80: std::strcpy(buffer,"FEHLERFELD_80"); break;
        case Property::kFEHLERFELD_81: std::strcpy(buffer,"FEHLERFELD_81"); break;
        case Property::kFEHLERFELD_82: std::strcpy(buffer,"FEHLERFELD_82"); break;
        case Property::kFEHLERFELD_83: std::strcpy(buffer,"FEHLERFELD_83"); break;
        case Property::kFEHLERFELD_84: std::strcpy(buffer,"FEHLERFELD_84"); break;
        case Property::kFEHLERFELD_85: std::strcpy(buffer,"FEHLERFELD_85"); break;
        case Property::kFEHLERFELD_86: std::strcpy(buffer,"FEHLERFELD_86"); break;
        case Property::kFEHLERFELD_87: std::strcpy(buffer,"FEHLERFELD_87"); break;
        case Property::kFEHLERFELD_88: std::strcpy(buffer,"FEHLERFELD_88"); break;
        case Property::kFEHLERFELD_89: std::strcpy(buffer,"FEHLERFELD_89"); break;
        case Property::kFEHLERFELD_90: std::strcpy(buffer,"FEHLERFELD_90"); break;
        case Property::kFEHLERFELD_91: std::strcpy(buffer,"FEHLERFELD_91"); break;
        case Property::kFEHLERFELD_92: std::strcpy(buffer,"FEHLERFELD_92"); break;
        case Property::kFEHLERFELD_93: std::strcpy(buffer,"FEHLERFELD_93"); break;
        case Property::kFEHLERFELD_94: std::strcpy(buffer,"FEHLERFELD_94"); break;
        case Property::kFEHLERFELD_95: std::strcpy(buffer,"FEHLERFELD_95"); break;
        case Property::kFEHLERFELD_96: std::strcpy(buffer,"FEHLERFELD_96"); break;
        case Property::kFEHLERFELD_97: std::strcpy(buffer,"FEHLERFELD_97"); break;
        case Property::kFEHLERFELD_98: std::strcpy(buffer,"FEHLERFELD_98"); break;
        case Property::kFEHLERFELD_99: std::strcpy(buffer,"FEHLERFELD_99"); break;
        case Property::kFEHLERFELD_100: std::strcpy(buffer,"FEHLERFELD_100"); break;
        case Property::kFEHLERFELD_101: std::strcpy(buffer,"FEHLERFELD_101"); break;
        case Property::kFEHLERFELD_102: std::strcpy(buffer,"FEHLERFELD_102"); break;
        case Property::kFEHLERFELD_103: std::strcpy(buffer,"FEHLERFELD_103"); break;
        case Property::kFEHLERFELD_104: std::strcpy(buffer,"FEHLERFELD_104"); break;
        case Property::kFEHLERFELD_105: std::strcpy(buffer,"FEHLERFELD_105"); break;
        case Property::kFEHLERFELD_106: std::strcpy(buffer,"FEHLERFELD_106"); break;
        case Property::kFEHLERFELD_107: std::strcpy(buffer,"FEHLERFELD_107"); break;
        case Property::kFEHLERFELD_108: std::strcpy(buffer,"FEHLERFELD_108"); break;
        case Property::kFEHLERFELD_109: std::strcpy(buffer,"FEHLERFELD_109"); break;
        case Property::kFEHLERFELD_110: std::strcpy(buffer,"FEHLERFELD_110"); break;
        case Property::kFEHLERFELD_111: std::strcpy(buffer,"FEHLERFELD_111"); break;
        case Property::kFEHLERFELD_112: std::strcpy(buffer,"FEHLERFELD_112"); break;
        case Property::kFEHLERFELD_113: std::strcpy(buffer,"FEHLERFELD_113"); break;
        case Property::kFEHLERFELD_114: std::strcpy(buffer,"FEHLERFELD_114"); break;
        case Property::kFEHLERFELD_115: std::strcpy(buffer,"FEHLERFELD_115"); break;
        case Property::kFEHLERFELD_116: std::strcpy(buffer,"FEHLERFELD_116"); break;
        case Property::kFEHLERFELD_117: std::strcpy(buffer,"FEHLERFELD_117"); break;
        case Property::kFEHLERFELD_118: std::strcpy(buffer,"FEHLERFELD_118"); break;
        case Property::kFEHLERFELD_119: std::strcpy(buffer,"FEHLERFELD_119"); break;
        case Property::kFEHLERFELD_120: std::strcpy(buffer,"FEHLERFELD_120"); break;
        case Property::kFEHLERFELD_121: std::strcpy(buffer,"FEHLERFELD_121"); break;
        case Property::kFEHLERFELD_122: std::strcpy(buffer,"FEHLERFELD_122"); break;
        case Property::kFEHLERFELD_123: std::strcpy(buffer,"FEHLERFELD_123"); break;
        case Property::kFEHLERFELD_124: std::strcpy(buffer,"FEHLERFELD_124"); break;
        case Property::kFEHLERFELD_125: std::strcpy(buffer,"FEHLERFELD_125"); break;
        case Property::kFEHLERFELD_126: std::strcpy(buffer,"FEHLERFELD_126"); break;
        case Property::kFEHLERFELD_127: std::strcpy(buffer,"FEHLERFELD_127"); break;
        case Property::kFEHLERFELD_128: std::strcpy(buffer,"FEHLERFELD_128"); break;
        case Property::kFEHLERFELD_129: std::strcpy(buffer,"FEHLERFELD_129"); break;
        case Property::kFEHLERFELD_130: std::strcpy(buffer,"FEHLERFELD_130"); break;
        case Property::kFEHLERFELD_131: std::strcpy(buffer,"FEHLERFELD_131"); break;
        case Property::kFEHLERFELD_132: std::strcpy(buffer,"FEHLERFELD_132"); break;
        case Property::kFEHLERFELD_133: std::strcpy(buffer,"FEHLERFELD_133"); break;
        case Property::kFEHLERFELD_134: std::strcpy(buffer,"FEHLERFELD_134"); break;
        case Property::kFEHLERFELD_135: std::strcpy(buffer,"FEHLERFELD_135"); break;
        case Property::kFEHLERFELD_136: std::strcpy(buffer,"FEHLERFELD_136"); break;
        case Property::kFEHLERFELD_137: std::strcpy(buffer,"FEHLERFELD_137"); break;
        case Property::kFEHLERFELD_138: std::strcpy(buffer,"FEHLERFELD_138"); break;
        case Property::kFEHLERFELD_139: std::strcpy(buffer,"FEHLERFELD_139"); break;
        case Property::kFEHLERSPEICHER_FELDINDEX: std::strcpy(buffer,"FEHLERSPEICHER_FELDINDEX"); break;
        case Property::kFEHLERSPEICHER_FEHLERNUMMER: std::strcpy(buffer,"FEHLERSPEICHER_FEHLERNUMMER"); break;
        case Property::kFEHLERSPEICHER_MODULTYD: std::strcpy(buffer,"FEHLERSPEICHER_MODULTYD"); break;
        case Property::kFEHLERSPEICHER_BUSKENNUNG: std::strcpy(buffer,"FEHLERSPEICHER_BUSKENNUNG"); break;
        case Property::kFEHLERSPEICHER_SEKUNDE: std::strcpy(buffer,"FEHLERSPEICHER_SEKUNDE"); break;
        case Property::kFEHLERSPEICHER_MINUTE: std::strcpy(buffer,"FEHLERSPEICHER_MINUTE"); break;
        case Property::kFEHLERSPEICHER_STUNDE: std::strcpy(buffer,"FEHLERSPEICHER_STUNDE"); break;
        case Property::kFEHLERSPEICHER_TAG: std::strcpy(buffer,"FEHLERSPEICHER_TAG"); break;
        case Property::kFEHLERSPEICHER_MONAT: std::strcpy(buffer,"FEHLERSPEICHER_MONAT"); break;
        case Property::kFEHLERSPEICHER_JAHR: std::strcpy(buffer,"FEHLERSPEICHER_JAHR"); break;
        case Property::kESTRICHPROGRAMM_TAG_1: std::strcpy(buffer,"ESTRICHPROGRAMM_TAG_1"); break;
        case Property::kESTRICHPROGRAMM_TAG_2: std::strcpy(buffer,"ESTRICHPROGRAMM_TAG_2"); break;
        case Property::kESTRICHPROGRAMM_TAG_3: std::strcpy(buffer,"ESTRICHPROGRAMM_TAG_3"); break;
        case Property::kESTRICHPROGRAMM_TAG_4: std::strcpy(buffer,"ESTRICHPROGRAMM_TAG_4"); break;
        case Property::kESTRICHPROGRAMM_TAG_5: std::strcpy(buffer,"ESTRICHPROGRAMM_TAG_5"); break;
        case Property::kESTRICHPROGRAMM_TAG_6: std::strcpy(buffer,"ESTRICHPROGRAMM_TAG_6"); break;
        case Property::kESTRICHPROGRAMM_TAG_7: std::strcpy(buffer,"ESTRICHPROGRAMM_TAG_7"); break;
        case Property::kESTRICHPROGRAMM_TAG_8: std::strcpy(buffer,"ESTRICHPROGRAMM_TAG_8"); break;
        case Property::kESTRICHPROGRAMM_TAG_9: std::strcpy(buffer,"ESTRICHPROGRAMM_TAG_9"); break;
        case Property::kESTRICHPROGRAMM_TAG_10: std::strcpy(buffer,"ESTRICHPROGRAMM_TAG_10"); break;
        case Property::kESTRICHPROGRAMM_TAG_11: std::strcpy(buffer,"ESTRICHPROGRAMM_TAG_11"); break;
        case Property::kESTRICHPROGRAMM_TAG_12: std::strcpy(buffer,"ESTRICHPROGRAMM_TAG_12"); break;
        case Property::kESTRICHPROGRAMM_TAG_13: std::strcpy(buffer,"ESTRICHPROGRAMM_TAG_13"); break;
        case Property::kESTRICHPROGRAMM_TAG_14: std::strcpy(buffer,"ESTRICHPROGRAMM_TAG_14"); break;
        case Property::kESTRICHPROGRAMM_TAG_15: std::strcpy(buffer,"ESTRICHPROGRAMM_TAG_15"); break;
        case Property::kESTRICHPROGRAMM_TAG_16: std::strcpy(buffer,"ESTRICHPROGRAMM_TAG_16"); break;
        case Property::kESTRICHPROGRAMM_TAG_17: std::strcpy(buffer,"ESTRICHPROGRAMM_TAG_17"); break;
        case Property::kESTRICHPROGRAMM_TAG_18: std::strcpy(buffer,"ESTRICHPROGRAMM_TAG_18"); break;
        case Property::kESTRICHPROGRAMM_TAG_19: std::strcpy(buffer,"ESTRICHPROGRAMM_TAG_19"); break;
        case Property::kESTRICHPROGRAMM_TAG_20: std::strcpy(buffer,"ESTRICHPROGRAMM_TAG_20"); break;
        case Property::kESTRICHPROGRAMM_TAG_21: std::strcpy(buffer,"ESTRICHPROGRAMM_TAG_21"); break;
        case Property::kESTRICHPROGRAMM_TAG_22: std::strcpy(buffer,"ESTRICHPROGRAMM_TAG_22"); break;
        case Property::kESTRICHPROGRAMM_TAG_23: std::strcpy(buffer,"ESTRICHPROGRAMM_TAG_23"); break;
        case Property::kESTRICHPROGRAMM_TAG_24: std::strcpy(buffer,"ESTRICHPROGRAMM_TAG_24"); break;
        case Property::kESTRICHPROGRAMM_TAG_25: std::strcpy(buffer,"ESTRICHPROGRAMM_TAG_25"); break;
        case Property::kESTRICHPROGRAMM_TAG_26: std::strcpy(buffer,"ESTRICHPROGRAMM_TAG_26"); break;
        case Property::kESTRICHPROGRAMM_TAG_27: std::strcpy(buffer,"ESTRICHPROGRAMM_TAG_27"); break;
        case Property::kESTRICHPROGRAMM_TAG_28: std::strcpy(buffer,"ESTRICHPROGRAMM_TAG_28"); break;
        case Property::kESTRICHPROGRAMM_TAG_29: std::strcpy(buffer,"ESTRICHPROGRAMM_TAG_29"); break;
        case Property::kESTRICHPROGRAMM_TAG_30: std::strcpy(buffer,"ESTRICHPROGRAMM_TAG_30"); break;
        case Property::kESTRICHPROGRAMM_TAG_31: std::strcpy(buffer,"ESTRICHPROGRAMM_TAG_31"); break;
        case Property::kOT_REQUEST_CODE: std::strcpy(buffer,"OT_REQUEST_CODE"); break;
        case Property::kOT_FHB_00: std::strcpy(buffer,"OT_FHB_00"); break;
        case Property::kOT_FHB_01: std::strcpy(buffer,"OT_FHB_01"); break;
        case Property::kOT_FHB_02: std::strcpy(buffer,"OT_FHB_02"); break;
        case Property::kOT_FHB_03: std::strcpy(buffer,"OT_FHB_03"); break;
        case Property::kOT_FHB_04: std::strcpy(buffer,"OT_FHB_04"); break;
        case Property::kOT_FHB_05: std::strcpy(buffer,"OT_FHB_05"); break;
        case Property::kOT_FHB_06: std::strcpy(buffer,"OT_FHB_06"); break;
        case Property::kOT_FHB_07: std::strcpy(buffer,"OT_FHB_07"); break;
        case Property::kOT_FHB_08: std::strcpy(buffer,"OT_FHB_08"); break;
        case Property::kOT_FHB_09: std::strcpy(buffer,"OT_FHB_09"); break;
        case Property::kSTART_BEREICH_INFONUMMERN_OS: std::strcpy(buffer,"START_BEREICH_INFONUMMERN_OS"); break;
        case Property::kFERNSTEUERBETRIEB_TEMPERATURSOLLWERT: std::strcpy(buffer,"FERNSTEUERBETRIEB_TEMPERATURSOLLWERT"); break;
        case Property::kESTB_ISTTEMPERATUR: std::strcpy(buffer,"ESTB_ISTTEMPERATUR"); break;
        case Property::kFESTWERT_HEIZUNGSBETRIEB: std::strcpy(buffer,"FESTWERT_HEIZUNGSBETRIEB"); break;
        case Property::kAUSSENFUEHLERKORREKTURWERT: std::strcpy(buffer,"AUSSENFUEHLERKORREKTURWERT"); break;
        case Property::kHZK_PUMPE_DAUERLAUF: std::strcpy(buffer,"HZK_PUMPE_DAUERLAUF"); break;
        case Property::kPWM_PUMPENMODE: std::strcpy(buffer,"PWM_PUMPENMODE"); break;
        case Property::kPWM_TEMPERATURDIFFERENZREGELUNG_TV_TWEICHE: std::strcpy(buffer,"PWM_TEMPERATURDIFFERENZREGELUNG_TV_TWEICHE"); break;
        case Property::kPWM_TEMPERATURDIFFERENZREGELUNG_TV_TR: std::strcpy(buffer,"PWM_TEMPERATURDIFFERENZREGELUNG_TV_TR"); break;
        case Property::kWARTUNGSINTERVAL_STUNDEN: std::strcpy(buffer,"WARTUNGSINTERVAL_STUNDEN"); break;
        case Property::kPRUEFSTANDSBEFEHL: std::strcpy(buffer,"PRUEFSTANDSBEFEHL"); break;
        case Property::kENDE_BEREICH_INFONUMMERN_OS: std::strcpy(buffer,"ENDE_BEREICH_INFONUMMERN_OS"); break;
        case Property::kSOLAR_KOLLEKTOR_1_P_ANTEIL: std::strcpy(buffer,"SOLAR_KOLLEKTOR_1_P_ANTEIL"); break;
        case Property::kSOLAR_KOLLEKTOR_1_I_ANTEIL: std::strcpy(buffer,"SOLAR_KOLLEKTOR_1_I_ANTEIL"); break;
        case Property::kSOLAR_KOLLEKTOR_2_P_ANTEIL: std::strcpy(buffer,"SOLAR_KOLLEKTOR_2_P_ANTEIL"); break;
        case Property::kSOLAR_KOLLEKTOR_2_I_ANTEIL: std::strcpy(buffer,"SOLAR_KOLLEKTOR_2_I_ANTEIL"); break;
        case Property::kSOLAR_KOLLEKTOR_3_P_ANTEIL: std::strcpy(buffer,"SOLAR_KOLLEKTOR_3_P_ANTEIL"); break;
        case Property::kSOLAR_KOLLEKTOR_3_I_ANTEIL: std::strcpy(buffer,"SOLAR_KOLLEKTOR_3_I_ANTEIL"); break;
        case Property::kFEHLERNUMMER: std::strcpy(buffer,"FEHLERNUMMER"); break;
       // case Property::kREPEAT_MESSAGE_ALL_24H: std::strcpy(buffer,"REPEAT_MESSAGE_ALL_24H"); break; duolicate
        case Property::kLARGE_STATUS_AUSGANG: std::strcpy(buffer,"LARGE_STATUS_AUSGANG"); break;
        case Property::kLARGE_KONFIGURATION_AUSGANG: std::strcpy(buffer,"LARGE_KONFIGURATION_AUSGANG"); break;
        case Property::kLARGE_INFO_AN_BEI_AUSGANG: std::strcpy(buffer,"LARGE_INFO_AN_BEI_AUSGANG"); break;
        case Property::kLARGE_SONDERFUNKTIONEN_AUSGANG: std::strcpy(buffer,"LARGE_SONDERFUNKTIONEN_AUSGANG"); break;
        case Property::kLARGE_KONFIGURATION_EINGANG: std::strcpy(buffer,"LARGE_KONFIGURATION_EINGANG"); break;
        case Property::kLARGE_FAKTOR_EINGANG: std::strcpy(buffer,"LARGE_FAKTOR_EINGANG"); break;
        case Property::kLARGE_EINHEIT_EINGANG: std::strcpy(buffer,"LARGE_EINHEIT_EINGANG"); break;
        case Property::kLARGE_KONTAKT_GESCHLOSSEN_EINGANG: std::strcpy(buffer,"LARGE_KONTAKT_GESCHLOSSEN_EINGANG"); break;
        case Property::kLARGE_INFO_AN_BEI_EINGANG: std::strcpy(buffer,"LARGE_INFO_AN_BEI_EINGANG"); break;
        case Property::kLARGE_SMS_ZUSATZTEXT_EINGANG: std::strcpy(buffer,"LARGE_SMS_ZUSATZTEXT_EINGANG"); break;
        case Property::kLARGE_USERNAMER: std::strcpy(buffer,"LARGE_USERNAMER"); break;
        case Property::kLARGE_USERPASSWORD: std::strcpy(buffer,"LARGE_USERPASSWORD"); break;
        case Property::kLARGE_USERGROUP: std::strcpy(buffer,"LARGE_USERGROUP"); break;
        case Property::kLARGE_STATUS_EINGANG: std::strcpy(buffer,"LARGE_STATUS_EINGANG"); break;
        case Property::kLARGE_RESET_COUNTER_EINGANG: std::strcpy(buffer,"LARGE_RESET_COUNTER_EINGANG"); break;
        case Property::kLARGE_SMTP_SERVER: std::strcpy(buffer,"LARGE_SMTP_SERVER"); break;
        case Property::kLARGE_SMTP_LOGINNAME: std::strcpy(buffer,"LARGE_SMTP_LOGINNAME"); break;
        case Property::kLARGE_SMTP_PASSWORT: std::strcpy(buffer,"LARGE_SMTP_PASSWORT"); break;
        case Property::kLARGE_POP3_SERVER: std::strcpy(buffer,"LARGE_POP3_SERVER"); break;
        case Property::kLARGE_POP3_LOGINNAME: std::strcpy(buffer,"LARGE_POP3_LOGINNAME"); break;
        case Property::kLARGE_POP3_PASSWORT: std::strcpy(buffer,"LARGE_POP3_PASSWORT"); break;
        case Property::kLARGE_SMS_TEXT_ADRESSE: std::strcpy(buffer,"LARGE_SMS_TEXT_ADRESSE"); break;
        case Property::kLARGE_EMPFAEGER_KONTAKTDATEN_NAME: std::strcpy(buffer,"LARGE_EMPFAEGER_KONTAKTDATEN_NAME"); break;
        case Property::kLARGE_EMPFAEGER_KONTAKTDATEN_RUFNUMMER: std::strcpy(buffer,"LARGE_EMPFAEGER_KONTAKTDATEN_RUFNUMMER"); break;
        case Property::kLARGE_EMPFAEGER_KONTAKTDATEN_EMAIL: std::strcpy(buffer,"LARGE_EMPFAEGER_KONTAKTDATEN_EMAIL"); break;
        case Property::kLARGE_UEBERTRAGUNGSWEG: std::strcpy(buffer,"LARGE_UEBERTRAGUNGSWEG"); break;
        case Property::kLARGE_TEST_NACHRICHT_SENDEN: std::strcpy(buffer,"LARGE_TEST_NACHRICHT_SENDEN"); break;
        case Property::kGSM_SIGNAL_POWER: std::strcpy(buffer,"GSM_SIGNAL_POWER"); break;
        case Property::kGSM_CONNECTION_STATE: std::strcpy(buffer,"GSM_CONNECTION_STATE"); break;
        case Property::kGSM_SWITCH_OFF: std::strcpy(buffer,"GSM_SWITCH_OFF"); break;
        case Property::kGSM_PIN: std::strcpy(buffer,"GSM_PIN"); break;
        case Property::kGSM_PIN_OFF: std::strcpy(buffer,"GSM_PIN_OFF"); break;
        case Property::kLARGE_ACCESSPOINT: std::strcpy(buffer,"LARGE_ACCESSPOINT"); break;
        case Property::kLARGE_SMS_ADRESSTEXT: std::strcpy(buffer,"LARGE_SMS_ADRESSTEXT"); break;
        case Property::kSMS_24h_REPEAT: std::strcpy(buffer,"SMS_24h_REPEAT"); break;
        case Property::kLARGE_ALARM_KONFIGURATION_1: std::strcpy(buffer,"LARGE_ALARM_KONFIGURATION_1"); break;
        case Property::kLARGE_ALARM_KONFIGURATION_2: std::strcpy(buffer,"LARGE_ALARM_KONFIGURATION_2"); break;
        case Property::kLARGE_ALARM_KONFIGURATION_3: std::strcpy(buffer,"LARGE_ALARM_KONFIGURATION_3"); break;
        case Property::kLARGE_ALARM_KONFIGURATION_4: std::strcpy(buffer,"LARGE_ALARM_KONFIGURATION_4"); break;
        case Property::kLARGE_ALARM_KONFIGURATION_5: std::strcpy(buffer,"LARGE_ALARM_KONFIGURATION_5"); break;
        case Property::kIP_MODE: std::strcpy(buffer,"IP_MODE"); break;
        case Property::kLARGE_IP_ADRESS: std::strcpy(buffer,"LARGE_IP_ADRESS"); break;
        case Property::kLARGE_SUBNET: std::strcpy(buffer,"LARGE_SUBNET"); break;
        case Property::kLARGE_GATEWAY: std::strcpy(buffer,"LARGE_GATEWAY"); break;
        case Property::kLARGE_DEVICENAME: std::strcpy(buffer,"LARGE_DEVICENAME"); break;
        case Property::kLARGE_MAC_ADR: std::strcpy(buffer,"LARGE_MAC_ADR"); break;
        case Property::kBUS_STATUS: std::strcpy(buffer,"BUS_STATUS"); break;
        case Property::kLARGE_EWI_FILTER: std::strcpy(buffer,"LARGE_EWI_FILTER"); break;
        case Property::kLARGE_ERRORLOGDATA: std::strcpy(buffer,"LARGE_ERRORLOGDATA"); break;
        case Property::kKEEP_ALIVE: std::strcpy(buffer,"KEEP_ALIVE"); break;
        case Property::kLARGE_ERRORLOG_DATA: std::strcpy(buffer,"LARGE_ERRORLOG_DATA"); break;
        case Property::kLARGE_EWI_FILTER_CONFIG: std::strcpy(buffer,"LARGE_EWI_FILTER_CONFIG"); break;
        case Property::kLARGE_COCO_CONFIG_PARAMETER: std::strcpy(buffer,"LARGE_COCO_CONFIG_PARAMETER"); break;
        case Property::kLARGE_DATALOGGER_DATA: std::strcpy(buffer,"LARGE_DATALOGGER_DATA"); break;
        case Property::kLARGE_DATALOGGER_DATA_POINTER: std::strcpy(buffer,"LARGE_DATALOGGER_DATA_POINTER"); break;
        case Property::kWE3_TYP: std::strcpy(buffer,"WE3_TYP"); break;
        case Property::kWE4_TYP: std::strcpy(buffer,"WE4_TYP"); break;
        case Property::kSCAN_AKTIV: std::strcpy(buffer,"SCAN_AKTIV"); break;
        case Property::kRUECKLAUFISTTEMP_GES: std::strcpy(buffer,"RUECKLAUFISTTEMP_GES"); break;
        case Property::kSOLARNUTZUNG: std::strcpy(buffer,"SOLARNUTZUNG"); break;
        case Property::kMAX_MODGRAD_WW: std::strcpy(buffer,"MAX_MODGRAD_WW"); break;
        case Property::kZIRKPUMPE_BEI_ANTILEG: std::strcpy(buffer,"ZIRKPUMPE_BEI_ANTILEG"); break;
        case Property::kLARGE_USB_CONF_TCP_IP: std::strcpy(buffer,"LARGE_USB_CONF_TCP_IP"); break;
        case Property::kLARGE_USB_CONF_TCP_IP_INDEX: std::strcpy(buffer,"LARGE_USB_CONF_TCP_IP_INDEX"); break;
        case Property::kMAC_ADR_0: std::strcpy(buffer,"MAC_ADR_0"); break;
        case Property::kMAC_ADR_1: std::strcpy(buffer,"MAC_ADR_1"); break;
        case Property::kMAC_ADR_2: std::strcpy(buffer,"MAC_ADR_2"); break;
        case Property::kMAC_ADR_3: std::strcpy(buffer,"MAC_ADR_3"); break;
        case Property::kMAC_ADR_4: std::strcpy(buffer,"MAC_ADR_4"); break;
        case Property::kMAC_ADR_5: std::strcpy(buffer,"MAC_ADR_5"); break;
        case Property::kCELSIUS_FAHRENHEIT_UMSCH: std::strcpy(buffer,"CELSIUS_FAHRENHEIT_UMSCH"); break;
        case Property::kWP_VERZOEGERUNG: std::strcpy(buffer,"WP_VERZOEGERUNG"); break;
        case Property::kMAX_RL_KUEHLEN: std::strcpy(buffer,"MAX_RL_KUEHLEN"); break;
        case Property::kLARGE_DATALOGGER_HEADER: std::strcpy(buffer,"LARGE_DATALOGGER_HEADER"); break;
        case Property::kHEIZPROG_1: std::strcpy(buffer,"HEIZPROG_1"); break;
        case Property::kHEIZPROG_1_MO: std::strcpy(buffer,"HEIZPROG_1_MO"); break;
        case Property::kHEIZPROG_1_MO_SCHALT_2: std::strcpy(buffer,"HEIZPROG_1_MO_SCHALT_2"); break;
        case Property::kHEIZPROG_1_MO_SCHALT_3: std::strcpy(buffer,"HEIZPROG_1_MO_SCHALT_3"); break;
        case Property::kHEIZPROG_1_DI: std::strcpy(buffer,"HEIZPROG_1_DI"); break;
        case Property::kHEIZPROG_1_DI_SCHALT_2: std::strcpy(buffer,"HEIZPROG_1_DI_SCHALT_2"); break;
        case Property::kHEIZPROG_1_DI_SCHALT_3: std::strcpy(buffer,"HEIZPROG_1_DI_SCHALT_3"); break;
        case Property::kHEIZPROG_1_MI: std::strcpy(buffer,"HEIZPROG_1_MI"); break;
        case Property::kHEIZPROG_1_MI_SCHALT_2: std::strcpy(buffer,"HEIZPROG_1_MI_SCHALT_2"); break;
        case Property::kHEIZPROG_1_MI_SCHALT_3: std::strcpy(buffer,"HEIZPROG_1_MI_SCHALT_3"); break;
        case Property::kHEIZPROG_1_DO: std::strcpy(buffer,"HEIZPROG_1_DO"); break;
        case Property::kHEIZPROG_1_DO_SCHALT_2: std::strcpy(buffer,"HEIZPROG_1_DO_SCHALT_2"); break;
        case Property::kHEIZPROG_1_DO_SCHALT_3: std::strcpy(buffer,"HEIZPROG_1_DO_SCHALT_3"); break;
        case Property::kHEIZPROG_1_FR: std::strcpy(buffer,"HEIZPROG_1_FR"); break;
        case Property::kHEIZPROG_1_FR_SCHALT_2: std::strcpy(buffer,"HEIZPROG_1_FR_SCHALT_2"); break;
        case Property::kHEIZPROG_1_FR_SCHALT_3: std::strcpy(buffer,"HEIZPROG_1_FR_SCHALT_3"); break;
        case Property::kHEIZPROG_1_SA: std::strcpy(buffer,"HEIZPROG_1_SA"); break;
        case Property::kHEIZPROG_1_SA_SCHALT_2: std::strcpy(buffer,"HEIZPROG_1_SA_SCHALT_2"); break;
        case Property::kHEIZPROG_1_SA_SCHALT_3: std::strcpy(buffer,"HEIZPROG_1_SA_SCHALT_3"); break;
        case Property::kHEIZPROG_1_SO: std::strcpy(buffer,"HEIZPROG_1_SO"); break;
        case Property::kHEIZPROG_1_SO_SCHALT_2: std::strcpy(buffer,"HEIZPROG_1_SO_SCHALT_2"); break;
        case Property::kHEIZPROG_1_SO_SCHALT_3: std::strcpy(buffer,"HEIZPROG_1_SO_SCHALT_3"); break;
        case Property::kHEIZPROG_1_MO_FR: std::strcpy(buffer,"HEIZPROG_1_MO_FR"); break;
        case Property::kHEIZPROG_1_MO_FR_SCHALT_2: std::strcpy(buffer,"HEIZPROG_1_MO_FR_SCHALT_2"); break;
        case Property::kHEIZPROG_1_MO_FR_SCHALT_3: std::strcpy(buffer,"HEIZPROG_1_MO_FR_SCHALT_3"); break;
        case Property::kHEIZPROG_1_SA_SO: std::strcpy(buffer,"HEIZPROG_1_SA_SO"); break;
        case Property::kHEIZPROG_1_SA_SO_SCHALT_2: std::strcpy(buffer,"HEIZPROG_1_SA_SO_SCHALT_2"); break;
        case Property::kHEIZPROG_1_SA_SO_SCHALT_3: std::strcpy(buffer,"HEIZPROG_1_SA_SO_SCHALT_3"); break;
        case Property::kHEIZPROG_1_MO_SO: std::strcpy(buffer,"HEIZPROG_1_MO_SO"); break;
        case Property::kHEIZPROG_1_MO_SO_SCHALT_2: std::strcpy(buffer,"HEIZPROG_1_MO_SO_SCHALT_2"); break;
        case Property::kHEIZPROG_1_MO_SO_SCHALT_3: std::strcpy(buffer,"HEIZPROG_1_MO_SO_SCHALT_3"); break;
        case Property::kHEIZPROG_1_MO_DO: std::strcpy(buffer,"HEIZPROG_1_MO_DO"); break;
        case Property::kHEIZPROG_1_MO_DO_SCHALT_2: std::strcpy(buffer,"HEIZPROG_1_MO_DO_SCHALT_2"); break;
        case Property::kHEIZPROG_1_MO_DO_SCHALT_3: std::strcpy(buffer,"HEIZPROG_1_MO_DO_SCHALT_3"); break;
        case Property::kHEIZPROG_2: std::strcpy(buffer,"HEIZPROG_2"); break;
        case Property::kHEIZPROG_2_MO: std::strcpy(buffer,"HEIZPROG_2_MO"); break;
        case Property::kHEIZPROG_2_MO_SCHALT_2: std::strcpy(buffer,"HEIZPROG_2_MO_SCHALT_2"); break;
        case Property::kHEIZPROG_2_MO_SCHALT_3: std::strcpy(buffer,"HEIZPROG_2_MO_SCHALT_3"); break;
        case Property::kHEIZPROG_2_DI: std::strcpy(buffer,"HEIZPROG_2_DI"); break;
        case Property::kHEIZPROG_2_DI_SCHALT_2: std::strcpy(buffer,"HEIZPROG_2_DI_SCHALT_2"); break;
        case Property::kHEIZPROG_2_DI_SCHALT_3: std::strcpy(buffer,"HEIZPROG_2_DI_SCHALT_3"); break;
        case Property::kHEIZPROG_2_MI: std::strcpy(buffer,"HEIZPROG_2_MI"); break;
        case Property::kHEIZPROG_2_MI_SCHALT_2: std::strcpy(buffer,"HEIZPROG_2_MI_SCHALT_2"); break;
        case Property::kHEIZPROG_2_MI_SCHALT_3: std::strcpy(buffer,"HEIZPROG_2_MI_SCHALT_3"); break;
        case Property::kHEIZPROG_2_DO: std::strcpy(buffer,"HEIZPROG_2_DO"); break;
        case Property::kHEIZPROG_2_DO_SCHALT_2: std::strcpy(buffer,"HEIZPROG_2_DO_SCHALT_2"); break;
        case Property::kHEIZPROG_2_DO_SCHALT_3: std::strcpy(buffer,"HEIZPROG_2_DO_SCHALT_3"); break;
        case Property::kHEIZPROG_2_FR: std::strcpy(buffer,"HEIZPROG_2_FR"); break;
        case Property::kHEIZPROG_2_FR_SCHALT_2: std::strcpy(buffer,"HEIZPROG_2_FR_SCHALT_2"); break;
        case Property::kHEIZPROG_2_FR_SCHALT_3: std::strcpy(buffer,"HEIZPROG_2_FR_SCHALT_3"); break;
        case Property::kHEIZPROG_2_SA: std::strcpy(buffer,"HEIZPROG_2_SA"); break;
        case Property::kHEIZPROG_2_SA_SCHALT_2: std::strcpy(buffer,"HEIZPROG_2_SA_SCHALT_2"); break;
        case Property::kHEIZPROG_2_SA_SCHALT_3: std::strcpy(buffer,"HEIZPROG_2_SA_SCHALT_3"); break;
        case Property::kHEIZPROG_2_SO: std::strcpy(buffer,"HEIZPROG_2_SO"); break;
        case Property::kHEIZPROG_2_SO_SCHALT_2: std::strcpy(buffer,"HEIZPROG_2_SO_SCHALT_2"); break;
        case Property::kHEIZPROG_2_SO_SCHALT_3: std::strcpy(buffer,"HEIZPROG_2_SO_SCHALT_3"); break;
        case Property::kHEIZPROG_2_MO_FR: std::strcpy(buffer,"HEIZPROG_2_MO_FR"); break;
        case Property::kHEIZPROG_2_MO_FR_SCHALT_2: std::strcpy(buffer,"HEIZPROG_2_MO_FR_SCHALT_2"); break;
        case Property::kHEIZPROG_2_MO_FR_SCHALT_3: std::strcpy(buffer,"HEIZPROG_2_MO_FR_SCHALT_3"); break;
        case Property::kHEIZPROG_2_SA_SO: std::strcpy(buffer,"HEIZPROG_2_SA_SO"); break;
        case Property::kHEIZPROG_2_SA_SO_SCHALT_2: std::strcpy(buffer,"HEIZPROG_2_SA_SO_SCHALT_2"); break;
        case Property::kHEIZPROG_2_SA_SO_SCHALT_3: std::strcpy(buffer,"HEIZPROG_2_SA_SO_SCHALT_3"); break;
        case Property::kHEIZPROG_2_MO_SO: std::strcpy(buffer,"HEIZPROG_2_MO_SO"); break;
        case Property::kHEIZPROG_2_MO_SO_SCHALT_2: std::strcpy(buffer,"HEIZPROG_2_MO_SO_SCHALT_2"); break;
        case Property::kHEIZPROG_2_MO_SO_SCHALT_3: std::strcpy(buffer,"HEIZPROG_2_MO_SO_SCHALT_3"); break;
        case Property::kHEIZPROG_2_MO_DO: std::strcpy(buffer,"HEIZPROG_2_MO_DO"); break;
        case Property::kHEIZPROG_2_MO_DO_SCHALT_2: std::strcpy(buffer,"HEIZPROG_2_MO_DO_SCHALT_2"); break;
        case Property::kHEIZPROG_2_MO_DO_SCHALT_3: std::strcpy(buffer,"HEIZPROG_2_MO_DO_SCHALT_3"); break;
        case Property::kHEIZPROG_3: std::strcpy(buffer,"HEIZPROG_3"); break;
        case Property::kHEIZPROG_3_MO: std::strcpy(buffer,"HEIZPROG_3_MO"); break;
        case Property::kHEIZPROG_3_MO_SCHALT_2: std::strcpy(buffer,"HEIZPROG_3_MO_SCHALT_2"); break;
        case Property::kHEIZPROG_3_MO_SCHALT_3: std::strcpy(buffer,"HEIZPROG_3_MO_SCHALT_3"); break;
        case Property::kHEIZPROG_3_DI: std::strcpy(buffer,"HEIZPROG_3_DI"); break;
        case Property::kHEIZPROG_3_DI_SCHALT_2: std::strcpy(buffer,"HEIZPROG_3_DI_SCHALT_2"); break;
        case Property::kHEIZPROG_3_DI_SCHALT_3: std::strcpy(buffer,"HEIZPROG_3_DI_SCHALT_3"); break;
        case Property::kHEIZPROG_3_MI: std::strcpy(buffer,"HEIZPROG_3_MI"); break;
        case Property::kHEIZPROG_3_MI_SCHALT_2: std::strcpy(buffer,"HEIZPROG_3_MI_SCHALT_2"); break;
        case Property::kHEIZPROG_3_MI_SCHALT_3: std::strcpy(buffer,"HEIZPROG_3_MI_SCHALT_3"); break;
        case Property::kHEIZPROG_3_DO: std::strcpy(buffer,"HEIZPROG_3_DO"); break;
        case Property::kHEIZPROG_3_DO_SCHALT_2: std::strcpy(buffer,"HEIZPROG_3_DO_SCHALT_2"); break;
        case Property::kHEIZPROG_3_DO_SCHALT_3: std::strcpy(buffer,"HEIZPROG_3_DO_SCHALT_3"); break;
        case Property::kHEIZPROG_3_FR: std::strcpy(buffer,"HEIZPROG_3_FR"); break;
        case Property::kHEIZPROG_3_FR_SCHALT_2: std::strcpy(buffer,"HEIZPROG_3_FR_SCHALT_2"); break;
        case Property::kHEIZPROG_3_FR_SCHALT_3: std::strcpy(buffer,"HEIZPROG_3_FR_SCHALT_3"); break;
        case Property::kHEIZPROG_3_SA: std::strcpy(buffer,"HEIZPROG_3_SA"); break;
        case Property::kHEIZPROG_3_SA_SCHALT_2: std::strcpy(buffer,"HEIZPROG_3_SA_SCHALT_2"); break;
        case Property::kHEIZPROG_3_SA_SCHALT_3: std::strcpy(buffer,"HEIZPROG_3_SA_SCHALT_3"); break;
        case Property::kHEIZPROG_3_SO: std::strcpy(buffer,"HEIZPROG_3_SO"); break;
        case Property::kHEIZPROG_3_SO_SCHALT_2: std::strcpy(buffer,"HEIZPROG_3_SO_SCHALT_2"); break;
        case Property::kHEIZPROG_3_SO_SCHALT_3: std::strcpy(buffer,"HEIZPROG_3_SO_SCHALT_3"); break;
        case Property::kHEIZPROG_3_MO_FR: std::strcpy(buffer,"HEIZPROG_3_MO_FR"); break;
        case Property::kHEIZPROG_3_MO_FR_SCHALT_2: std::strcpy(buffer,"HEIZPROG_3_MO_FR_SCHALT_2"); break;
        case Property::kHEIZPROG_3_MO_FR_SCHALT_3: std::strcpy(buffer,"HEIZPROG_3_MO_FR_SCHALT_3"); break;
        case Property::kHEIZPROG_3_SA_SO: std::strcpy(buffer,"HEIZPROG_3_SA_SO"); break;
        case Property::kHEIZPROG_3_SA_SO_SCHALT_2: std::strcpy(buffer,"HEIZPROG_3_SA_SO_SCHALT_2"); break;
        case Property::kHEIZPROG_3_SA_SO_SCHALT_3: std::strcpy(buffer,"HEIZPROG_3_SA_SO_SCHALT_3"); break;
        case Property::kHEIZPROG_3_MO_SO: std::strcpy(buffer,"HEIZPROG_3_MO_SO"); break;
        case Property::kHEIZPROG_3_MO_SO_SCHALT_2: std::strcpy(buffer,"HEIZPROG_3_MO_SO_SCHALT_2"); break;
        case Property::kHEIZPROG_3_MO_SO_SCHALT_3: std::strcpy(buffer,"HEIZPROG_3_MO_SO_SCHALT_3"); break;
        case Property::kHEIZPROG_3_MO_DO: std::strcpy(buffer,"HEIZPROG_3_MO_DO"); break;
        case Property::kHEIZPROG_3_MO_DO_SCHALT_2: std::strcpy(buffer,"HEIZPROG_3_MO_DO_SCHALT_2"); break;
        case Property::kHEIZPROG_3_MO_DO_SCHALT_3: std::strcpy(buffer,"HEIZPROG_3_MO_DO_SCHALT_3"); break;
        case Property::kW_WASSERPROG_1: std::strcpy(buffer,"W_WASSERPROG_1"); break;
        case Property::kW_WASSERPROG_1_MO: std::strcpy(buffer,"W_WASSERPROG_1_MO"); break;
        case Property::kW_WASSERPROG_1_MO_SCHALT_2: std::strcpy(buffer,"W_WASSERPROG_1_MO_SCHALT_2"); break;
        case Property::kW_WASSERPROG_1_MO_SCHALT_3: std::strcpy(buffer,"W_WASSERPROG_1_MO_SCHALT_3"); break;
        case Property::kW_WASSERPROG_1_DI: std::strcpy(buffer,"W_WASSERPROG_1_DI"); break;
        case Property::kW_WASSERPROG_1_DI_SCHALT_2: std::strcpy(buffer,"W_WASSERPROG_1_DI_SCHALT_2"); break;
        case Property::kW_WASSERPROG_1_DI_SCHALT_3: std::strcpy(buffer,"W_WASSERPROG_1_DI_SCHALT_3"); break;
        case Property::kW_WASSERPROG_1_MI: std::strcpy(buffer,"W_WASSERPROG_1_MI"); break;
        case Property::kW_WASSERPROG_1_MI_SCHALT_2: std::strcpy(buffer,"W_WASSERPROG_1_MI_SCHALT_2"); break;
        case Property::kW_WASSERPROG_1_MI_SCHALT_3: std::strcpy(buffer,"W_WASSERPROG_1_MI_SCHALT_3"); break;
        case Property::kW_WASSERPROG_1_DO: std::strcpy(buffer,"W_WASSERPROG_1_DO"); break;
        case Property::kW_WASSERPROG_1_DO_SCHALT_2: std::strcpy(buffer,"W_WASSERPROG_1_DO_SCHALT_2"); break;
        case Property::kW_WASSERPROG_1_DO_SCHALT_3: std::strcpy(buffer,"W_WASSERPROG_1_DO_SCHALT_3"); break;
        case Property::kW_WASSERPROG_1_FR: std::strcpy(buffer,"W_WASSERPROG_1_FR"); break;
        case Property::kW_WASSERPROG_1_FR_SCHALT_2: std::strcpy(buffer,"W_WASSERPROG_1_FR_SCHALT_2"); break;
        case Property::kW_WASSERPROG_1_FR_SCHALT_3: std::strcpy(buffer,"W_WASSERPROG_1_FR_SCHALT_3"); break;
        case Property::kW_WASSERPROG_1_SA: std::strcpy(buffer,"W_WASSERPROG_1_SA"); break;
        case Property::kW_WASSERPROG_1_SA_SCHALT_2: std::strcpy(buffer,"W_WASSERPROG_1_SA_SCHALT_2"); break;
        case Property::kW_WASSERPROG_1_SA_SCHALT_3: std::strcpy(buffer,"W_WASSERPROG_1_SA_SCHALT_3"); break;
        case Property::kW_WASSERPROG_1_SO: std::strcpy(buffer,"W_WASSERPROG_1_SO"); break;
        case Property::kW_WASSERPROG_1_SO_SCHALT_2: std::strcpy(buffer,"W_WASSERPROG_1_SO_SCHALT_2"); break;
        case Property::kW_WASSERPROG_1_SO_SCHALT_3: std::strcpy(buffer,"W_WASSERPROG_1_SO_SCHALT_3"); break;
        case Property::kW_WASSERPROG_1_MO_FR: std::strcpy(buffer,"W_WASSERPROG_1_MO_FR"); break;
        case Property::kW_WASSERPROG_1_MO_FR_SCHALT_2: std::strcpy(buffer,"W_WASSERPROG_1_MO_FR_SCHALT_2"); break;
        case Property::kW_WASSERPROG_1_MO_FR_SCHALT_3: std::strcpy(buffer,"W_WASSERPROG_1_MO_FR_SCHALT_3"); break;
        case Property::kW_WASSERPROG_1_SA_SO: std::strcpy(buffer,"W_WASSERPROG_1_SA_SO"); break;
        case Property::kW_WASSERPROG_1_SA_SO_SCHALT_2: std::strcpy(buffer,"W_WASSERPROG_1_SA_SO_SCHALT_2"); break;
        case Property::kW_WASSERPROG_1_SA_SO_SCHALT_3: std::strcpy(buffer,"W_WASSERPROG_1_SA_SO_SCHALT_3"); break;
        case Property::kW_WASSERPROG_1_MO_SO: std::strcpy(buffer,"W_WASSERPROG_1_MO_SO"); break;
        case Property::kW_WASSERPROG_1_MO_SO_SCHALT_2: std::strcpy(buffer,"W_WASSERPROG_1_MO_SO_SCHALT_2"); break;
        case Property::kW_WASSERPROG_1_MO_SO_SCHALT_3: std::strcpy(buffer,"W_WASSERPROG_1_MO_SO_SCHALT_3"); break;
        case Property::kW_WASSERPROG_1_MO_DO: std::strcpy(buffer,"W_WASSERPROG_1_MO_DO"); break;
        case Property::kW_WASSERPROG_1_MO_DO_SCHALT_2: std::strcpy(buffer,"W_WASSERPROG_1_MO_DO_SCHALT_2"); break;
        case Property::kW_WASSERPROG_1_MO_DO_SCHALT_3: std::strcpy(buffer,"W_WASSERPROG_1_MO_DO_SCHALT_3"); break;
        case Property::kW_WASSERPROG_2: std::strcpy(buffer,"W_WASSERPROG_2"); break;
        case Property::kW_WASSERPROG_2_MO: std::strcpy(buffer,"W_WASSERPROG_2_MO"); break;
        case Property::kW_WASSERPROG_2_MO_SCHALT_2: std::strcpy(buffer,"W_WASSERPROG_2_MO_SCHALT_2"); break;
        case Property::kW_WASSERPROG_2_MO_SCHALT_3: std::strcpy(buffer,"W_WASSERPROG_2_MO_SCHALT_3"); break;
        case Property::kW_WASSERPROG_2_DI: std::strcpy(buffer,"W_WASSERPROG_2_DI"); break;
        case Property::kW_WASSERPROG_2_DI_SCHALT_2: std::strcpy(buffer,"W_WASSERPROG_2_DI_SCHALT_2"); break;
        case Property::kW_WASSERPROG_2_DI_SCHALT_3: std::strcpy(buffer,"W_WASSERPROG_2_DI_SCHALT_3"); break;
        case Property::kW_WASSERPROG_2_MI: std::strcpy(buffer,"W_WASSERPROG_2_MI"); break;
        case Property::kW_WASSERPROG_2_MI_SCHALT_2: std::strcpy(buffer,"W_WASSERPROG_2_MI_SCHALT_2"); break;
        case Property::kW_WASSERPROG_2_MI_SCHALT_3: std::strcpy(buffer,"W_WASSERPROG_2_MI_SCHALT_3"); break;
        case Property::kW_WASSERPROG_2_DO: std::strcpy(buffer,"W_WASSERPROG_2_DO"); break;
        case Property::kW_WASSERPROG_2_DO_SCHALT_2: std::strcpy(buffer,"W_WASSERPROG_2_DO_SCHALT_2"); break;
        case Property::kW_WASSERPROG_2_DO_SCHALT_3: std::strcpy(buffer,"W_WASSERPROG_2_DO_SCHALT_3"); break;
        case Property::kW_WASSERPROG_2_FR: std::strcpy(buffer,"W_WASSERPROG_2_FR"); break;
        case Property::kW_WASSERPROG_2_FR_SCHALT_2: std::strcpy(buffer,"W_WASSERPROG_2_FR_SCHALT_2"); break;
        case Property::kW_WASSERPROG_2_FR_SCHALT_3: std::strcpy(buffer,"W_WASSERPROG_2_FR_SCHALT_3"); break;
        case Property::kW_WASSERPROG_2_SA: std::strcpy(buffer,"W_WASSERPROG_2_SA"); break;
        case Property::kW_WASSERPROG_2_SA_SCHALT_2: std::strcpy(buffer,"W_WASSERPROG_2_SA_SCHALT_2"); break;
        case Property::kW_WASSERPROG_2_SA_SCHALT_3: std::strcpy(buffer,"W_WASSERPROG_2_SA_SCHALT_3"); break;
        case Property::kW_WASSERPROG_2_SO: std::strcpy(buffer,"W_WASSERPROG_2_SO"); break;
        case Property::kW_WASSERPROG_2_SO_SCHALT_2: std::strcpy(buffer,"W_WASSERPROG_2_SO_SCHALT_2"); break;
        case Property::kW_WASSERPROG_2_SO_SCHALT_3: std::strcpy(buffer,"W_WASSERPROG_2_SO_SCHALT_3"); break;
        case Property::kW_WASSERPROG_2_MO_FR: std::strcpy(buffer,"W_WASSERPROG_2_MO_FR"); break;
        case Property::kW_WASSERPROG_2_MO_FR_SCHALT_2: std::strcpy(buffer,"W_WASSERPROG_2_MO_FR_SCHALT_2"); break;
        case Property::kW_WASSERPROG_2_MO_FR_SCHALT_3: std::strcpy(buffer,"W_WASSERPROG_2_MO_FR_SCHALT_3"); break;
        case Property::kW_WASSERPROG_2_SA_SO: std::strcpy(buffer,"W_WASSERPROG_2_SA_SO"); break;
        case Property::kW_WASSERPROG_2_SA_SO_SCHALT_2: std::strcpy(buffer,"W_WASSERPROG_2_SA_SO_SCHALT_2"); break;
        case Property::kW_WASSERPROG_2_SA_SO_SCHALT_3: std::strcpy(buffer,"W_WASSERPROG_2_SA_SO_SCHALT_3"); break;
        case Property::kW_WASSERPROG_2_MO_SO: std::strcpy(buffer,"W_WASSERPROG_2_MO_SO"); break;
        case Property::kW_WASSERPROG_2_MO_SO_SCHALT_2: std::strcpy(buffer,"W_WASSERPROG_2_MO_SO_SCHALT_2"); break;
        case Property::kW_WASSERPROG_2_MO_SO_SCHALT_3: std::strcpy(buffer,"W_WASSERPROG_2_MO_SO_SCHALT_3"); break;
        case Property::kW_WASSERPROG_2_MO_DO: std::strcpy(buffer,"W_WASSERPROG_2_MO_DO"); break;
        case Property::kW_WASSERPROG_2_MO_DO_SCHALT_2: std::strcpy(buffer,"W_WASSERPROG_2_MO_DO_SCHALT_2"); break;
        case Property::kW_WASSERPROG_2_MO_DO_SCHALT_3: std::strcpy(buffer,"W_WASSERPROG_2_MO_DO_SCHALT_3"); break;
        case Property::kW_WASSERPROG_3: std::strcpy(buffer,"W_WASSERPROG_3"); break;
        case Property::kW_WASSERPROG_3_MO: std::strcpy(buffer,"W_WASSERPROG_3_MO"); break;
        case Property::kW_WASSERPROG_3_MO_SCHALT_2: std::strcpy(buffer,"W_WASSERPROG_3_MO_SCHALT_2"); break;
        case Property::kW_WASSERPROG_3_MO_SCHALT_3: std::strcpy(buffer,"W_WASSERPROG_3_MO_SCHALT_3"); break;
        case Property::kW_WASSERPROG_3_DI: std::strcpy(buffer,"W_WASSERPROG_3_DI"); break;
        case Property::kW_WASSERPROG_3_DI_SCHALT_2: std::strcpy(buffer,"W_WASSERPROG_3_DI_SCHALT_2"); break;
        case Property::kW_WASSERPROG_3_DI_SCHALT_3: std::strcpy(buffer,"W_WASSERPROG_3_DI_SCHALT_3"); break;
        case Property::kW_WASSERPROG_3_MI: std::strcpy(buffer,"W_WASSERPROG_3_MI"); break;
        case Property::kW_WASSERPROG_3_MI_SCHALT_2: std::strcpy(buffer,"W_WASSERPROG_3_MI_SCHALT_2"); break;
        case Property::kW_WASSERPROG_3_MI_SCHALT_3: std::strcpy(buffer,"W_WASSERPROG_3_MI_SCHALT_3"); break;
        case Property::kW_WASSERPROG_3_DO: std::strcpy(buffer,"W_WASSERPROG_3_DO"); break;
        case Property::kW_WASSERPROG_3_DO_SCHALT_2: std::strcpy(buffer,"W_WASSERPROG_3_DO_SCHALT_2"); break;
        case Property::kW_WASSERPROG_3_DO_SCHALT_3: std::strcpy(buffer,"W_WASSERPROG_3_DO_SCHALT_3"); break;
        case Property::kW_WASSERPROG_3_FR: std::strcpy(buffer,"W_WASSERPROG_3_FR"); break;
        case Property::kW_WASSERPROG_3_FR_SCHALT_2: std::strcpy(buffer,"W_WASSERPROG_3_FR_SCHALT_2"); break;
        case Property::kW_WASSERPROG_3_FR_SCHALT_3: std::strcpy(buffer,"W_WASSERPROG_3_FR_SCHALT_3"); break;
        case Property::kW_WASSERPROG_3_SA: std::strcpy(buffer,"W_WASSERPROG_3_SA"); break;
        case Property::kW_WASSERPROG_3_SA_SCHALT_2: std::strcpy(buffer,"W_WASSERPROG_3_SA_SCHALT_2"); break;
        case Property::kW_WASSERPROG_3_SA_SCHALT_3: std::strcpy(buffer,"W_WASSERPROG_3_SA_SCHALT_3"); break;
        case Property::kW_WASSERPROG_3_SO: std::strcpy(buffer,"W_WASSERPROG_3_SO"); break;
        case Property::kW_WASSERPROG_3_SO_SCHALT_2: std::strcpy(buffer,"W_WASSERPROG_3_SO_SCHALT_2"); break;
        case Property::kW_WASSERPROG_3_SO_SCHALT_3: std::strcpy(buffer,"W_WASSERPROG_3_SO_SCHALT_3"); break;
        case Property::kW_WASSERPROG_3_MO_FR: std::strcpy(buffer,"W_WASSERPROG_3_MO_FR"); break;
        case Property::kW_WASSERPROG_3_MO_FR_SCHALT_2: std::strcpy(buffer,"W_WASSERPROG_3_MO_FR_SCHALT_2"); break;
        case Property::kW_WASSERPROG_3_MO_FR_SCHALT_3: std::strcpy(buffer,"W_WASSERPROG_3_MO_FR_SCHALT_3"); break;
        case Property::kW_WASSERPROG_3_SA_SO: std::strcpy(buffer,"W_WASSERPROG_3_SA_SO"); break;
        case Property::kW_WASSERPROG_3_SA_SO_SCHALT_2: std::strcpy(buffer,"W_WASSERPROG_3_SA_SO_SCHALT_2"); break;
        case Property::kW_WASSERPROG_3_SA_SO_SCHALT_3: std::strcpy(buffer,"W_WASSERPROG_3_SA_SO_SCHALT_3"); break;
        case Property::kW_WASSERPROG_3_MO_SO: std::strcpy(buffer,"W_WASSERPROG_3_MO_SO"); break;
        case Property::kW_WASSERPROG_3_MO_SO_SCHALT_2: std::strcpy(buffer,"W_WASSERPROG_3_MO_SO_SCHALT_2"); break;
        case Property::kW_WASSERPROG_3_MO_SO_SCHALT_3: std::strcpy(buffer,"W_WASSERPROG_3_MO_SO_SCHALT_3"); break;
        case Property::kW_WASSERPROG_3_MO_DO: std::strcpy(buffer,"W_WASSERPROG_3_MO_DO"); break;
        case Property::kW_WASSERPROG_3_MO_DO_SCHALT_2: std::strcpy(buffer,"W_WASSERPROG_3_MO_DO_SCHALT_2"); break;
        case Property::kW_WASSERPROG_3_MO_DO_SCHALT_3: std::strcpy(buffer,"W_WASSERPROG_3_MO_DO_SCHALT_3"); break;
        case Property::kZIRKPROG_1: std::strcpy(buffer,"ZIRKPROG_1"); break;
        case Property::kZIRKPROG_1_MO: std::strcpy(buffer,"ZIRKPROG_1_MO"); break;
        case Property::kZIRKPROG_1_MO_SCHALT_2: std::strcpy(buffer,"ZIRKPROG_1_MO_SCHALT_2"); break;
        case Property::kZIRKPROG_1_MO_SCHALT_3: std::strcpy(buffer,"ZIRKPROG_1_MO_SCHALT_3"); break;
        case Property::kZIRKPROG_1_DI: std::strcpy(buffer,"ZIRKPROG_1_DI"); break;
        case Property::kZIRKPROG_1_DI_SCHALT_2: std::strcpy(buffer,"ZIRKPROG_1_DI_SCHALT_2"); break;
        case Property::kZIRKPROG_1_DI_SCHALT_3: std::strcpy(buffer,"ZIRKPROG_1_DI_SCHALT_3"); break;
        case Property::kZIRKPROG_1_MI: std::strcpy(buffer,"ZIRKPROG_1_MI"); break;
        case Property::kZIRKPROG_1_MI_SCHALT_2: std::strcpy(buffer,"ZIRKPROG_1_MI_SCHALT_2"); break;
        case Property::kZIRKPROG_1_MI_SCHALT_3: std::strcpy(buffer,"ZIRKPROG_1_MI_SCHALT_3"); break;
        case Property::kZIRKPROG_1_DO: std::strcpy(buffer,"ZIRKPROG_1_DO"); break;
        case Property::kZIRKPROG_1_DO_SCHALT_2: std::strcpy(buffer,"ZIRKPROG_1_DO_SCHALT_2"); break;
        case Property::kZIRKPROG_1_DO_SCHALT_3: std::strcpy(buffer,"ZIRKPROG_1_DO_SCHALT_3"); break;
        case Property::kZIRKPROG_1_FR: std::strcpy(buffer,"ZIRKPROG_1_FR"); break;
        case Property::kZIRKPROG_1_FR_SCHALT_2: std::strcpy(buffer,"ZIRKPROG_1_FR_SCHALT_2"); break;
        case Property::kZIRKPROG_1_FR_SCHALT_3: std::strcpy(buffer,"ZIRKPROG_1_FR_SCHALT_3"); break;
        case Property::kZIRKPROG_1_SA: std::strcpy(buffer,"ZIRKPROG_1_SA"); break;
        case Property::kZIRKPROG_1_SA_SCHALT_2: std::strcpy(buffer,"ZIRKPROG_1_SA_SCHALT_2"); break;
        case Property::kZIRKPROG_1_SA_SCHALT_3: std::strcpy(buffer,"ZIRKPROG_1_SA_SCHALT_3"); break;
        case Property::kZIRKPROG_1_SO: std::strcpy(buffer,"ZIRKPROG_1_SO"); break;
        case Property::kZIRKPROG_1_SO_SCHALT_2: std::strcpy(buffer,"ZIRKPROG_1_SO_SCHALT_2"); break;
        case Property::kZIRKPROG_1_SO_SCHALT_3: std::strcpy(buffer,"ZIRKPROG_1_SO_SCHALT_3"); break;
        case Property::kZIRKPROG_1_MO_FR: std::strcpy(buffer,"ZIRKPROG_1_MO_FR"); break;
        case Property::kZIRKPROG_1_MO_FR_SCHALT_2: std::strcpy(buffer,"ZIRKPROG_1_MO_FR_SCHALT_2"); break;
        case Property::kZIRKPROG_1_MO_FR_SCHALT_3: std::strcpy(buffer,"ZIRKPROG_1_MO_FR_SCHALT_3"); break;
        case Property::kZIRKPROG_1_SA_SO: std::strcpy(buffer,"ZIRKPROG_1_SA_SO"); break;
        case Property::kZIRKPROG_1_SA_SO_SCHALT_2: std::strcpy(buffer,"ZIRKPROG_1_SA_SO_SCHALT_2"); break;
        case Property::kZIRKPROG_1_SA_SO_SCHALT_3: std::strcpy(buffer,"ZIRKPROG_1_SA_SO_SCHALT_3"); break;
        case Property::kZIRKPROG_1_MO_SO: std::strcpy(buffer,"ZIRKPROG_1_MO_SO"); break;
        case Property::kZIRKPROG_1_MO_SO_SCHALT_2: std::strcpy(buffer,"ZIRKPROG_1_MO_SO_SCHALT_2"); break;
        case Property::kZIRKPROG_1_MO_SO_SCHALT_3: std::strcpy(buffer,"ZIRKPROG_1_MO_SO_SCHALT_3"); break;
        case Property::kZIRKPROG_1_MO_DO: std::strcpy(buffer,"ZIRKPROG_1_MO_DO"); break;
        case Property::kZIRKPROG_1_MO_DO_SCHALT_2: std::strcpy(buffer,"ZIRKPROG_1_MO_DO_SCHALT_2"); break;
        case Property::kZIRKPROG_1_MO_DO_SCHALT_3: std::strcpy(buffer,"ZIRKPROG_1_MO_DO_SCHALT_3"); break;
        case Property::kZIRKPROG_2: std::strcpy(buffer,"ZIRKPROG_2"); break;
        case Property::kZIRKPROG_2_MO: std::strcpy(buffer,"ZIRKPROG_2_MO"); break;
        case Property::kZIRKPROG_2_MO_SCHALT_2: std::strcpy(buffer,"ZIRKPROG_2_MO_SCHALT_2"); break;
        case Property::kZIRKPROG_2_MO_SCHALT_3: std::strcpy(buffer,"ZIRKPROG_2_MO_SCHALT_3"); break;
        case Property::kZIRKPROG_2_DI: std::strcpy(buffer,"ZIRKPROG_2_DI"); break;
        case Property::kZIRKPROG_2_DI_SCHALT_2: std::strcpy(buffer,"ZIRKPROG_2_DI_SCHALT_2"); break;
        case Property::kZIRKPROG_2_DI_SCHALT_3: std::strcpy(buffer,"ZIRKPROG_2_DI_SCHALT_3"); break;
        case Property::kZIRKPROG_2_MI: std::strcpy(buffer,"ZIRKPROG_2_MI"); break;
        case Property::kZIRKPROG_2_MI_SCHALT_2: std::strcpy(buffer,"ZIRKPROG_2_MI_SCHALT_2"); break;
        case Property::kZIRKPROG_2_MI_SCHALT_3: std::strcpy(buffer,"ZIRKPROG_2_MI_SCHALT_3"); break;
        case Property::kZIRKPROG_2_DO: std::strcpy(buffer,"ZIRKPROG_2_DO"); break;
        case Property::kZIRKPROG_2_DO_SCHALT_2: std::strcpy(buffer,"ZIRKPROG_2_DO_SCHALT_2"); break;
        case Property::kZIRKPROG_2_DO_SCHALT_3: std::strcpy(buffer,"ZIRKPROG_2_DO_SCHALT_3"); break;
        case Property::kZIRKPROG_2_FR: std::strcpy(buffer,"ZIRKPROG_2_FR"); break;
        case Property::kZIRKPROG_2_FR_SCHALT_2: std::strcpy(buffer,"ZIRKPROG_2_FR_SCHALT_2"); break;
        case Property::kZIRKPROG_2_FR_SCHALT_3: std::strcpy(buffer,"ZIRKPROG_2_FR_SCHALT_3"); break;
        case Property::kZIRKPROG_2_SA: std::strcpy(buffer,"ZIRKPROG_2_SA"); break;
        case Property::kZIRKPROG_2_SA_SCHALT_2: std::strcpy(buffer,"ZIRKPROG_2_SA_SCHALT_2"); break;
        case Property::kZIRKPROG_2_SA_SCHALT_3: std::strcpy(buffer,"ZIRKPROG_2_SA_SCHALT_3"); break;
        case Property::kZIRKPROG_2_SO: std::strcpy(buffer,"ZIRKPROG_2_SO"); break;
        case Property::kZIRKPROG_2_SO_SCHALT_2: std::strcpy(buffer,"ZIRKPROG_2_SO_SCHALT_2"); break;
        case Property::kZIRKPROG_2_SO_SCHALT_3: std::strcpy(buffer,"ZIRKPROG_2_SO_SCHALT_3"); break;
        case Property::kZIRKPROG_2_MO_FR: std::strcpy(buffer,"ZIRKPROG_2_MO_FR"); break;
        case Property::kZIRKPROG_2_MO_FR_SCHALT_2: std::strcpy(buffer,"ZIRKPROG_2_MO_FR_SCHALT_2"); break;
        case Property::kZIRKPROG_2_MO_FR_SCHALT_3: std::strcpy(buffer,"ZIRKPROG_2_MO_FR_SCHALT_3"); break;
        case Property::kZIRKPROG_2_SA_SO: std::strcpy(buffer,"ZIRKPROG_2_SA_SO"); break;
        case Property::kZIRKPROG_2_SA_SO_SCHALT_2: std::strcpy(buffer,"ZIRKPROG_2_SA_SO_SCHALT_2"); break;
        case Property::kZIRKPROG_2_SA_SO_SCHALT_3: std::strcpy(buffer,"ZIRKPROG_2_SA_SO_SCHALT_3"); break;
        case Property::kZIRKPROG_2_MO_SO: std::strcpy(buffer,"ZIRKPROG_2_MO_SO"); break;
        case Property::kZIRKPROG_2_MO_SO_SCHALT_2: std::strcpy(buffer,"ZIRKPROG_2_MO_SO_SCHALT_2"); break;
        case Property::kZIRKPROG_2_MO_SO_SCHALT_3: std::strcpy(buffer,"ZIRKPROG_2_MO_SO_SCHALT_3"); break;
        case Property::kZIRKPROG_2_MO_DO: std::strcpy(buffer,"ZIRKPROG_2_MO_DO"); break;
        case Property::kZIRKPROG_2_MO_DO_SCHALT_2: std::strcpy(buffer,"ZIRKPROG_2_MO_DO_SCHALT_2"); break;
        case Property::kZIRKPROG_2_MO_DO_SCHALT_3: std::strcpy(buffer,"ZIRKPROG_2_MO_DO_SCHALT_3"); break;
        case Property::kZIRKPROG_3: std::strcpy(buffer,"ZIRKPROG_3"); break;
        case Property::kZIRKPROG_3_MO: std::strcpy(buffer,"ZIRKPROG_3_MO"); break;
        case Property::kZIRKPROG_3_MO_SCHALT_2: std::strcpy(buffer,"ZIRKPROG_3_MO_SCHALT_2"); break;
        case Property::kZIRKPROG_3_MO_SCHALT_3: std::strcpy(buffer,"ZIRKPROG_3_MO_SCHALT_3"); break;
        case Property::kZIRKPROG_3_DI: std::strcpy(buffer,"ZIRKPROG_3_DI"); break;
        case Property::kZIRKPROG_3_DI_SCHALT_2: std::strcpy(buffer,"ZIRKPROG_3_DI_SCHALT_2"); break;
        case Property::kZIRKPROG_3_DI_SCHALT_3: std::strcpy(buffer,"ZIRKPROG_3_DI_SCHALT_3"); break;
        case Property::kZIRKPROG_3_MI: std::strcpy(buffer,"ZIRKPROG_3_MI"); break;
        case Property::kZIRKPROG_3_MI_SCHALT_2: std::strcpy(buffer,"ZIRKPROG_3_MI_SCHALT_2"); break;
        case Property::kZIRKPROG_3_MI_SCHALT_3: std::strcpy(buffer,"ZIRKPROG_3_MI_SCHALT_3"); break;
        case Property::kZIRKPROG_3_DO: std::strcpy(buffer,"ZIRKPROG_3_DO"); break;
        case Property::kZIRKPROG_3_DO_SCHALT_2: std::strcpy(buffer,"ZIRKPROG_3_DO_SCHALT_2"); break;
        case Property::kZIRKPROG_3_DO_SCHALT_3: std::strcpy(buffer,"ZIRKPROG_3_DO_SCHALT_3"); break;
        case Property::kZIRKPROG_3_FR: std::strcpy(buffer,"ZIRKPROG_3_FR"); break;
        case Property::kZIRKPROG_3_FR_SCHALT_2: std::strcpy(buffer,"ZIRKPROG_3_FR_SCHALT_2"); break;
        case Property::kZIRKPROG_3_FR_SCHALT_3: std::strcpy(buffer,"ZIRKPROG_3_FR_SCHALT_3"); break;
        case Property::kZIRKPROG_3_SA: std::strcpy(buffer,"ZIRKPROG_3_SA"); break;
        case Property::kZIRKPROG_3_SA_SCHALT_2: std::strcpy(buffer,"ZIRKPROG_3_SA_SCHALT_2"); break;
        case Property::kZIRKPROG_3_SA_SCHALT_3: std::strcpy(buffer,"ZIRKPROG_3_SA_SCHALT_3"); break;
        case Property::kZIRKPROG_3_SO: std::strcpy(buffer,"ZIRKPROG_3_SO"); break;
        case Property::kZIRKPROG_3_SO_SCHALT_2: std::strcpy(buffer,"ZIRKPROG_3_SO_SCHALT_2"); break;
        case Property::kZIRKPROG_3_SO_SCHALT_3: std::strcpy(buffer,"ZIRKPROG_3_SO_SCHALT_3"); break;
        case Property::kZIRKPROG_3_MO_FR: std::strcpy(buffer,"ZIRKPROG_3_MO_FR"); break;
        case Property::kZIRKPROG_3_MO_FR_SCHALT_2: std::strcpy(buffer,"ZIRKPROG_3_MO_FR_SCHALT_2"); break;
        case Property::kZIRKPROG_3_MO_FR_SCHALT_3: std::strcpy(buffer,"ZIRKPROG_3_MO_FR_SCHALT_3"); break;
        case Property::kZIRKPROG_3_SA_SO: std::strcpy(buffer,"ZIRKPROG_3_SA_SO"); break;
        case Property::kZIRKPROG_3_SA_SO_SCHALT_2: std::strcpy(buffer,"ZIRKPROG_3_SA_SO_SCHALT_2"); break;
        case Property::kZIRKPROG_3_SA_SO_SCHALT_3: std::strcpy(buffer,"ZIRKPROG_3_SA_SO_SCHALT_3"); break;
        case Property::kZIRKPROG_3_MO_SO: std::strcpy(buffer,"ZIRKPROG_3_MO_SO"); break;
        case Property::kZIRKPROG_3_MO_SO_SCHALT_2: std::strcpy(buffer,"ZIRKPROG_3_MO_SO_SCHALT_2"); break;
        case Property::kZIRKPROG_3_MO_SO_SCHALT_3: std::strcpy(buffer,"ZIRKPROG_3_MO_SO_SCHALT_3"); break;
        case Property::kZIRKPROG_3_MO_DO: std::strcpy(buffer,"ZIRKPROG_3_MO_DO"); break;
        case Property::kZIRKPROG_3_MO_DO_SCHALT_2: std::strcpy(buffer,"ZIRKPROG_3_MO_DO_SCHALT_2"); break;
        case Property::kZIRKPROG_3_MO_DO_SCHALT_3: std::strcpy(buffer,"ZIRKPROG_3_MO_DO_SCHALT_3"); break;
        case Property::kZBV_PROG_1: std::strcpy(buffer,"ZBV_PROG_1"); break;
        case Property::kZBV_PROG_1_MO: std::strcpy(buffer,"ZBV_PROG_1_MO"); break;
        case Property::kZBV_PROG_1_MO_SCHALT_2: std::strcpy(buffer,"ZBV_PROG_1_MO_SCHALT_2"); break;
        case Property::kZBV_PROG_1_MO_SCHALT_3: std::strcpy(buffer,"ZBV_PROG_1_MO_SCHALT_3"); break;
        case Property::kZBV_PROG_1_DI: std::strcpy(buffer,"ZBV_PROG_1_DI"); break;
        case Property::kZBV_PROG_1_DI_SCHALT_2: std::strcpy(buffer,"ZBV_PROG_1_DI_SCHALT_2"); break;
        case Property::kZBV_PROG_1_DI_SCHALT_3: std::strcpy(buffer,"ZBV_PROG_1_DI_SCHALT_3"); break;
        case Property::kZBV_PROG_1_MI: std::strcpy(buffer,"ZBV_PROG_1_MI"); break;
        case Property::kZBV_PROG_1_MI_SCHALT_2: std::strcpy(buffer,"ZBV_PROG_1_MI_SCHALT_2"); break;
        case Property::kZBV_PROG_1_MI_SCHALT_3: std::strcpy(buffer,"ZBV_PROG_1_MI_SCHALT_3"); break;
        case Property::kZBV_PROG_1_DO: std::strcpy(buffer,"ZBV_PROG_1_DO"); break;
        case Property::kZBV_PROG_1_DO_SCHALT_2: std::strcpy(buffer,"ZBV_PROG_1_DO_SCHALT_2"); break;
        case Property::kZBV_PROG_1_DO_SCHALT_3: std::strcpy(buffer,"ZBV_PROG_1_DO_SCHALT_3"); break;
        case Property::kZBV_PROG_1_FR: std::strcpy(buffer,"ZBV_PROG_1_FR"); break;
        case Property::kZBV_PROG_1_FR_SCHALT_2: std::strcpy(buffer,"ZBV_PROG_1_FR_SCHALT_2"); break;
        case Property::kZBV_PROG_1_FR_SCHALT_3: std::strcpy(buffer,"ZBV_PROG_1_FR_SCHALT_3"); break;
        case Property::kZBV_PROG_1_SA: std::strcpy(buffer,"ZBV_PROG_1_SA"); break;
        case Property::kZBV_PROG_1_SA_SCHALT_2: std::strcpy(buffer,"ZBV_PROG_1_SA_SCHALT_2"); break;
        case Property::kZBV_PROG_1_SA_SCHALT_3: std::strcpy(buffer,"ZBV_PROG_1_SA_SCHALT_3"); break;
        case Property::kZBV_PROG_1_SO: std::strcpy(buffer,"ZBV_PROG_1_SO"); break;
        case Property::kZBV_PROG_1_SO_SCHALT_2: std::strcpy(buffer,"ZBV_PROG_1_SO_SCHALT_2"); break;
        case Property::kZBV_PROG_1_SO_SCHALT_3: std::strcpy(buffer,"ZBV_PROG_1_SO_SCHALT_3"); break;
        case Property::kZBV_PROG_1_MO_FR: std::strcpy(buffer,"ZBV_PROG_1_MO_FR"); break;
        case Property::kZBV_PROG_1_MO_FR_SCHALT_2: std::strcpy(buffer,"ZBV_PROG_1_MO_FR_SCHALT_2"); break;
        case Property::kZBV_PROG_1_MO_FR_SCHALT_3: std::strcpy(buffer,"ZBV_PROG_1_MO_FR_SCHALT_3"); break;
        case Property::kZBV_PROG_1_SA_SO: std::strcpy(buffer,"ZBV_PROG_1_SA_SO"); break;
        case Property::kZBV_PROG_1_SA_SO_SCHALT_2: std::strcpy(buffer,"ZBV_PROG_1_SA_SO_SCHALT_2"); break;
        case Property::kZBV_PROG_1_SA_SO_SCHALT_3: std::strcpy(buffer,"ZBV_PROG_1_SA_SO_SCHALT_3"); break;
        case Property::kZBV_PROG_1_MO_SO: std::strcpy(buffer,"ZBV_PROG_1_MO_SO"); break;
        case Property::kZBV_PROG_1_MO_SO_SCHALT_2: std::strcpy(buffer,"ZBV_PROG_1_MO_SO_SCHALT_2"); break;
        case Property::kZBV_PROG_1_MO_SO_SCHALT_3: std::strcpy(buffer,"ZBV_PROG_1_MO_SO_SCHALT_3"); break;
        case Property::kZBV_PROG_1_MO_DO: std::strcpy(buffer,"ZBV_PROG_1_MO_DO"); break;
        case Property::kZBV_PROG_1_MO_DO_SCHALT_2: std::strcpy(buffer,"ZBV_PROG_1_MO_DO_SCHALT_2"); break;
        case Property::kZBV_PROG_1_MO_DO_SCHALT_3: std::strcpy(buffer,"ZBV_PROG_1_MO_DO_SCHALT_3"); break;
        case Property::kZBV_PROG_2: std::strcpy(buffer,"ZBV_PROG_2"); break;
        case Property::kZBV_PROG_2_MO: std::strcpy(buffer,"ZBV_PROG_2_MO"); break;
        case Property::kZBV_PROG_2_MO_SCHALT_2: std::strcpy(buffer,"ZBV_PROG_2_MO_SCHALT_2"); break;
        case Property::kZBV_PROG_2_MO_SCHALT_3: std::strcpy(buffer,"ZBV_PROG_2_MO_SCHALT_3"); break;
        case Property::kZBV_PROG_2_DI: std::strcpy(buffer,"ZBV_PROG_2_DI"); break;
        case Property::kZBV_PROG_2_DI_SCHALT_2: std::strcpy(buffer,"ZBV_PROG_2_DI_SCHALT_2"); break;
        case Property::kZBV_PROG_2_DI_SCHALT_3: std::strcpy(buffer,"ZBV_PROG_2_DI_SCHALT_3"); break;
        case Property::kZBV_PROG_2_MI: std::strcpy(buffer,"ZBV_PROG_2_MI"); break;
        case Property::kZBV_PROG_2_MI_SCHALT_2: std::strcpy(buffer,"ZBV_PROG_2_MI_SCHALT_2"); break;
        case Property::kZBV_PROG_2_MI_SCHALT_3: std::strcpy(buffer,"ZBV_PROG_2_MI_SCHALT_3"); break;
        case Property::kZBV_PROG_2_DO: std::strcpy(buffer,"ZBV_PROG_2_DO"); break;
        case Property::kZBV_PROG_2_DO_SCHALT_2: std::strcpy(buffer,"ZBV_PROG_2_DO_SCHALT_2"); break;
        case Property::kZBV_PROG_2_DO_SCHALT_3: std::strcpy(buffer,"ZBV_PROG_2_DO_SCHALT_3"); break;
        case Property::kZBV_PROG_2_FR: std::strcpy(buffer,"ZBV_PROG_2_FR"); break;
        case Property::kZBV_PROG_2_FR_SCHALT_2: std::strcpy(buffer,"ZBV_PROG_2_FR_SCHALT_2"); break;
        case Property::kZBV_PROG_2_FR_SCHALT_3: std::strcpy(buffer,"ZBV_PROG_2_FR_SCHALT_3"); break;
        case Property::kZBV_PROG_2_SA: std::strcpy(buffer,"ZBV_PROG_2_SA"); break;
        case Property::kZBV_PROG_2_SA_SCHALT_2: std::strcpy(buffer,"ZBV_PROG_2_SA_SCHALT_2"); break;
        case Property::kZBV_PROG_2_SA_SCHALT_3: std::strcpy(buffer,"ZBV_PROG_2_SA_SCHALT_3"); break;
        case Property::kZBV_PROG_2_SO: std::strcpy(buffer,"ZBV_PROG_2_SO"); break;
        case Property::kZBV_PROG_2_SO_SCHALT_2: std::strcpy(buffer,"ZBV_PROG_2_SO_SCHALT_2"); break;
        case Property::kZBV_PROG_2_SO_SCHALT_3: std::strcpy(buffer,"ZBV_PROG_2_SO_SCHALT_3"); break;
        case Property::kZBV_PROG_2_MO_FR: std::strcpy(buffer,"ZBV_PROG_2_MO_FR"); break;
        case Property::kZBV_PROG_2_MO_FR_SCHALT_2: std::strcpy(buffer,"ZBV_PROG_2_MO_FR_SCHALT_2"); break;
        case Property::kZBV_PROG_2_MO_FR_SCHALT_3: std::strcpy(buffer,"ZBV_PROG_2_MO_FR_SCHALT_3"); break;
        case Property::kZBV_PROG_2_SA_SO: std::strcpy(buffer,"ZBV_PROG_2_SA_SO"); break;
        case Property::kZBV_PROG_2_SA_SO_SCHALT_2: std::strcpy(buffer,"ZBV_PROG_2_SA_SO_SCHALT_2"); break;
        case Property::kZBV_PROG_2_SA_SO_SCHALT_3: std::strcpy(buffer,"ZBV_PROG_2_SA_SO_SCHALT_3"); break;
        case Property::kZBV_PROG_2_MO_SO: std::strcpy(buffer,"ZBV_PROG_2_MO_SO"); break;
        case Property::kZBV_PROG_2_MO_SO_SCHALT_2: std::strcpy(buffer,"ZBV_PROG_2_MO_SO_SCHALT_2"); break;
        case Property::kZBV_PROG_2_MO_SO_SCHALT_3: std::strcpy(buffer,"ZBV_PROG_2_MO_SO_SCHALT_3"); break;
        case Property::kZBV_PROG_2_MO_DO: std::strcpy(buffer,"ZBV_PROG_2_MO_DO"); break;
        case Property::kZBV_PROG_2_MO_DO_SCHALT_2: std::strcpy(buffer,"ZBV_PROG_2_MO_DO_SCHALT_2"); break;
        case Property::kZBV_PROG_2_MO_DO_SCHALT_3: std::strcpy(buffer,"ZBV_PROG_2_MO_DO_SCHALT_3"); break;
        case Property::kHEIZPROG_1_SCHALTPKT_1: std::strcpy(buffer,"HEIZPROG_1_SCHALTPKT_1"); break;
        case Property::kHEIZPROG_1_SCHALTPKT_2: std::strcpy(buffer,"HEIZPROG_1_SCHALTPKT_2"); break;
        case Property::kHEIZPROG_1_SCHALTPKT_3: std::strcpy(buffer,"HEIZPROG_1_SCHALTPKT_3"); break;
        case Property::kHEIZPROG_1_SCHALTPKT_4: std::strcpy(buffer,"HEIZPROG_1_SCHALTPKT_4"); break;
        case Property::kHEIZPROG_1_SCHALTPKT_5: std::strcpy(buffer,"HEIZPROG_1_SCHALTPKT_5"); break;
        case Property::kHEIZPROG_1_SCHALTPKT_6: std::strcpy(buffer,"HEIZPROG_1_SCHALTPKT_6"); break;
        case Property::kHEIZPROG_1_SCHALTPKT_7: std::strcpy(buffer,"HEIZPROG_1_SCHALTPKT_7"); break;
        case Property::kHEIZPROG_1_SCHALTPKT_8: std::strcpy(buffer,"HEIZPROG_1_SCHALTPKT_8"); break;
        case Property::kHEIZPROG_1_SCHALTPKT_9: std::strcpy(buffer,"HEIZPROG_1_SCHALTPKT_9"); break;
        case Property::kHEIZPROG_1_SCHALTPKT_10: std::strcpy(buffer,"HEIZPROG_1_SCHALTPKT_10"); break;
        case Property::kHEIZPROG_1_SCHALTPKT_11: std::strcpy(buffer,"HEIZPROG_1_SCHALTPKT_11"); break;
        case Property::kHEIZPROG_1_SCHALTPKT_12: std::strcpy(buffer,"HEIZPROG_1_SCHALTPKT_12"); break;
        case Property::kHEIZPROG_1_SCHALTPKT_13: std::strcpy(buffer,"HEIZPROG_1_SCHALTPKT_13"); break;
        case Property::kHEIZPROG_1_SCHALTPKT_14: std::strcpy(buffer,"HEIZPROG_1_SCHALTPKT_14"); break;
        case Property::kHEIZPROG_2_SCHALTPKT_1: std::strcpy(buffer,"HEIZPROG_2_SCHALTPKT_1"); break;
        case Property::kHEIZPROG_2_SCHALTPKT_2: std::strcpy(buffer,"HEIZPROG_2_SCHALTPKT_2"); break;
        case Property::kHEIZPROG_2_SCHALTPKT_3: std::strcpy(buffer,"HEIZPROG_2_SCHALTPKT_3"); break;
        case Property::kHEIZPROG_2_SCHALTPKT_4: std::strcpy(buffer,"HEIZPROG_2_SCHALTPKT_4"); break;
        case Property::kHEIZPROG_2_SCHALTPKT_5: std::strcpy(buffer,"HEIZPROG_2_SCHALTPKT_5"); break;
        case Property::kHEIZPROG_2_SCHALTPKT_6: std::strcpy(buffer,"HEIZPROG_2_SCHALTPKT_6"); break;
        case Property::kHEIZPROG_2_SCHALTPKT_7: std::strcpy(buffer,"HEIZPROG_2_SCHALTPKT_7"); break;
        case Property::kHEIZPROG_2_SCHALTPKT_8: std::strcpy(buffer,"HEIZPROG_2_SCHALTPKT_8"); break;
        case Property::kHEIZPROG_2_SCHALTPKT_9: std::strcpy(buffer,"HEIZPROG_2_SCHALTPKT_9"); break;
        case Property::kHEIZPROG_2_SCHALTPKT_10: std::strcpy(buffer,"HEIZPROG_2_SCHALTPKT_10"); break;
        case Property::kHEIZPROG_2_SCHALTPKT_11: std::strcpy(buffer,"HEIZPROG_2_SCHALTPKT_11"); break;
        case Property::kHEIZPROG_2_SCHALTPKT_12: std::strcpy(buffer,"HEIZPROG_2_SCHALTPKT_12"); break;
        case Property::kHEIZPROG_2_SCHALTPKT_13: std::strcpy(buffer,"HEIZPROG_2_SCHALTPKT_13"); break;
        case Property::kHEIZPROG_2_SCHALTPKT_14: std::strcpy(buffer,"HEIZPROG_2_SCHALTPKT_14"); break;
        case Property::kHEIZPROG_3_SCHALTPKT_1: std::strcpy(buffer,"HEIZPROG_3_SCHALTPKT_1"); break;
        case Property::kHEIZPROG_3_SCHALTPKT_2: std::strcpy(buffer,"HEIZPROG_3_SCHALTPKT_2"); break;
        case Property::kHEIZPROG_3_SCHALTPKT_3: std::strcpy(buffer,"HEIZPROG_3_SCHALTPKT_3"); break;
        case Property::kHEIZPROG_3_SCHALTPKT_4: std::strcpy(buffer,"HEIZPROG_3_SCHALTPKT_4"); break;
        case Property::kHEIZPROG_3_SCHALTPKT_5: std::strcpy(buffer,"HEIZPROG_3_SCHALTPKT_5"); break;
        case Property::kHEIZPROG_3_SCHALTPKT_6: std::strcpy(buffer,"HEIZPROG_3_SCHALTPKT_6"); break;
        case Property::kHEIZPROG_3_SCHALTPKT_7: std::strcpy(buffer,"HEIZPROG_3_SCHALTPKT_7"); break;
        case Property::kHEIZPROG_3_SCHALTPKT_8: std::strcpy(buffer,"HEIZPROG_3_SCHALTPKT_8"); break;
        case Property::kHEIZPROG_3_SCHALTPKT_9: std::strcpy(buffer,"HEIZPROG_3_SCHALTPKT_9"); break;
        case Property::kHEIZPROG_3_SCHALTPKT_10: std::strcpy(buffer,"HEIZPROG_3_SCHALTPKT_10"); break;
        case Property::kHEIZPROG_3_SCHALTPKT_11: std::strcpy(buffer,"HEIZPROG_3_SCHALTPKT_11"); break;
        case Property::kHEIZPROG_3_SCHALTPKT_12: std::strcpy(buffer,"HEIZPROG_3_SCHALTPKT_12"); break;
        case Property::kHEIZPROG_3_SCHALTPKT_13: std::strcpy(buffer,"HEIZPROG_3_SCHALTPKT_13"); break;
        case Property::kHEIZPROG_3_SCHALTPKT_14: std::strcpy(buffer,"HEIZPROG_3_SCHALTPKT_14"); break;
        case Property::kWWROG_1_SCHALTPKT_1: std::strcpy(buffer,"WWROG_1_SCHALTPKT_1"); break;
        case Property::kWWROG_1_SCHALTPKT_2: std::strcpy(buffer,"WWROG_1_SCHALTPKT_2"); break;
        case Property::kWWROG_1_SCHALTPKT_3: std::strcpy(buffer,"WWROG_1_SCHALTPKT_3"); break;
        case Property::kWWROG_1_SCHALTPKT_4: std::strcpy(buffer,"WWROG_1_SCHALTPKT_4"); break;
        case Property::kWWROG_1_SCHALTPKT_5: std::strcpy(buffer,"WWROG_1_SCHALTPKT_5"); break;
        case Property::kWWROG_1_SCHALTPKT_6: std::strcpy(buffer,"WWROG_1_SCHALTPKT_6"); break;
        case Property::kWWROG_1_SCHALTPKT_7: std::strcpy(buffer,"WWROG_1_SCHALTPKT_7"); break;
        case Property::kWWROG_1_SCHALTPKT_8: std::strcpy(buffer,"WWROG_1_SCHALTPKT_8"); break;
        case Property::kWWROG_1_SCHALTPKT_9: std::strcpy(buffer,"WWROG_1_SCHALTPKT_9"); break;
        case Property::kWWROG_1_SCHALTPKT_10: std::strcpy(buffer,"WWROG_1_SCHALTPKT_10"); break;
        case Property::kWWROG_1_SCHALTPKT_11: std::strcpy(buffer,"WWROG_1_SCHALTPKT_11"); break;
        case Property::kWWROG_1_SCHALTPKT_12: std::strcpy(buffer,"WWROG_1_SCHALTPKT_12"); break;
        case Property::kWWROG_1_SCHALTPKT_13: std::strcpy(buffer,"WWROG_1_SCHALTPKT_13"); break;
        case Property::kWWROG_1_SCHALTPKT_14: std::strcpy(buffer,"WWROG_1_SCHALTPKT_14"); break;
        case Property::kWWROG_2_SCHALTPKT_1: std::strcpy(buffer,"WWROG_2_SCHALTPKT_1"); break;
        case Property::kWWROG_2_SCHALTPKT_2: std::strcpy(buffer,"WWROG_2_SCHALTPKT_2"); break;
        case Property::kWWROG_2_SCHALTPKT_3: std::strcpy(buffer,"WWROG_2_SCHALTPKT_3"); break;
        case Property::kWWROG_2_SCHALTPKT_4: std::strcpy(buffer,"WWROG_2_SCHALTPKT_4"); break;
        case Property::kWWROG_2_SCHALTPKT_5: std::strcpy(buffer,"WWROG_2_SCHALTPKT_5"); break;
        case Property::kWWROG_2_SCHALTPKT_6: std::strcpy(buffer,"WWROG_2_SCHALTPKT_6"); break;
        case Property::kWWROG_2_SCHALTPKT_7: std::strcpy(buffer,"WWROG_2_SCHALTPKT_7"); break;
        case Property::kWWROG_2_SCHALTPKT_8: std::strcpy(buffer,"WWROG_2_SCHALTPKT_8"); break;
        case Property::kWWROG_2_SCHALTPKT_9: std::strcpy(buffer,"WWROG_2_SCHALTPKT_9"); break;
        case Property::kWWROG_2_SCHALTPKT_10: std::strcpy(buffer,"WWROG_2_SCHALTPKT_10"); break;
        case Property::kWWROG_2_SCHALTPKT_11: std::strcpy(buffer,"WWROG_2_SCHALTPKT_11"); break;
        case Property::kWWROG_2_SCHALTPKT_12: std::strcpy(buffer,"WWROG_2_SCHALTPKT_12"); break;
        case Property::kWWROG_2_SCHALTPKT_13: std::strcpy(buffer,"WWROG_2_SCHALTPKT_13"); break;
        case Property::kWWROG_2_SCHALTPKT_14: std::strcpy(buffer,"WWROG_2_SCHALTPKT_14"); break;
        case Property::kWWROG_3_SCHALTPKT_1: std::strcpy(buffer,"WWROG_3_SCHALTPKT_1"); break;
        case Property::kWWROG_3_SCHALTPKT_2: std::strcpy(buffer,"WWROG_3_SCHALTPKT_2"); break;
        case Property::kWWROG_3_SCHALTPKT_3: std::strcpy(buffer,"WWROG_3_SCHALTPKT_3"); break;
        case Property::kWWROG_3_SCHALTPKT_4: std::strcpy(buffer,"WWROG_3_SCHALTPKT_4"); break;
        case Property::kWWROG_3_SCHALTPKT_5: std::strcpy(buffer,"WWROG_3_SCHALTPKT_5"); break;
        case Property::kWWROG_3_SCHALTPKT_6: std::strcpy(buffer,"WWROG_3_SCHALTPKT_6"); break;
        case Property::kWWROG_3_SCHALTPKT_7: std::strcpy(buffer,"WWROG_3_SCHALTPKT_7"); break;
        case Property::kWWROG_3_SCHALTPKT_8: std::strcpy(buffer,"WWROG_3_SCHALTPKT_8"); break;
        case Property::kWWROG_3_SCHALTPKT_9: std::strcpy(buffer,"WWROG_3_SCHALTPKT_9"); break;
        case Property::kWWROG_3_SCHALTPKT_10: std::strcpy(buffer,"WWROG_3_SCHALTPKT_10"); break;
        case Property::kWWROG_3_SCHALTPKT_11: std::strcpy(buffer,"WWROG_3_SCHALTPKT_11"); break;
        case Property::kWWROG_3_SCHALTPKT_12: std::strcpy(buffer,"WWROG_3_SCHALTPKT_12"); break;
        case Property::kWWROG_3_SCHALTPKT_13: std::strcpy(buffer,"WWROG_3_SCHALTPKT_13"); break;
        case Property::kWWROG_3_SCHALTPKT_14: std::strcpy(buffer,"WWROG_3_SCHALTPKT_14"); break;
        case Property::kZIRKROG_1_SCHALTPKT_1: std::strcpy(buffer,"ZIRKROG_1_SCHALTPKT_1"); break;
        case Property::kZIRKROG_1_SCHALTPKT_2: std::strcpy(buffer,"ZIRKROG_1_SCHALTPKT_2"); break;
        case Property::kZIRKROG_1_SCHALTPKT_3: std::strcpy(buffer,"ZIRKROG_1_SCHALTPKT_3"); break;
        case Property::kZIRKROG_1_SCHALTPKT_4: std::strcpy(buffer,"ZIRKROG_1_SCHALTPKT_4"); break;
        case Property::kZIRKROG_1_SCHALTPKT_5: std::strcpy(buffer,"ZIRKROG_1_SCHALTPKT_5"); break;
        case Property::kZIRKROG_1_SCHALTPKT_6: std::strcpy(buffer,"ZIRKROG_1_SCHALTPKT_6"); break;
        case Property::kZIRKROG_1_SCHALTPKT_7: std::strcpy(buffer,"ZIRKROG_1_SCHALTPKT_7"); break;
        case Property::kZIRKROG_1_SCHALTPKT_8: std::strcpy(buffer,"ZIRKROG_1_SCHALTPKT_8"); break;
        case Property::kZIRKROG_1_SCHALTPKT_9: std::strcpy(buffer,"ZIRKROG_1_SCHALTPKT_9"); break;
        case Property::kZIRKROG_1_SCHALTPKT_10: std::strcpy(buffer,"ZIRKROG_1_SCHALTPKT_10"); break;
        case Property::kZIRKROG_1_SCHALTPKT_11: std::strcpy(buffer,"ZIRKROG_1_SCHALTPKT_11"); break;
        case Property::kZIRKROG_1_SCHALTPKT_12: std::strcpy(buffer,"ZIRKROG_1_SCHALTPKT_12"); break;
        case Property::kZIRKROG_1_SCHALTPKT_13: std::strcpy(buffer,"ZIRKROG_1_SCHALTPKT_13"); break;
        case Property::kZIRKROG_1_SCHALTPKT_14: std::strcpy(buffer,"ZIRKROG_1_SCHALTPKT_14"); break;
        case Property::kZIRKROG_2_SCHALTPKT_1: std::strcpy(buffer,"ZIRKROG_2_SCHALTPKT_1"); break;
        case Property::kZIRKROG_2_SCHALTPKT_2: std::strcpy(buffer,"ZIRKROG_2_SCHALTPKT_2"); break;
        case Property::kZIRKROG_2_SCHALTPKT_3: std::strcpy(buffer,"ZIRKROG_2_SCHALTPKT_3"); break;
        case Property::kZIRKROG_2_SCHALTPKT_4: std::strcpy(buffer,"ZIRKROG_2_SCHALTPKT_4"); break;
        case Property::kZIRKROG_2_SCHALTPKT_5: std::strcpy(buffer,"ZIRKROG_2_SCHALTPKT_5"); break;
        case Property::kZIRKROG_2_SCHALTPKT_6: std::strcpy(buffer,"ZIRKROG_2_SCHALTPKT_6"); break;
        case Property::kZIRKROG_2_SCHALTPKT_7: std::strcpy(buffer,"ZIRKROG_2_SCHALTPKT_7"); break;
        case Property::kZIRKROG_2_SCHALTPKT_8: std::strcpy(buffer,"ZIRKROG_2_SCHALTPKT_8"); break;
        case Property::kZIRKROG_2_SCHALTPKT_9: std::strcpy(buffer,"ZIRKROG_2_SCHALTPKT_9"); break;
        case Property::kZIRKROG_2_SCHALTPKT_10: std::strcpy(buffer,"ZIRKROG_2_SCHALTPKT_10"); break;
        case Property::kZIRKROG_2_SCHALTPKT_11: std::strcpy(buffer,"ZIRKROG_2_SCHALTPKT_11"); break;
        case Property::kZIRKROG_2_SCHALTPKT_12: std::strcpy(buffer,"ZIRKROG_2_SCHALTPKT_12"); break;
        case Property::kZIRKROG_2_SCHALTPKT_13: std::strcpy(buffer,"ZIRKROG_2_SCHALTPKT_13"); break;
        case Property::kZIRKROG_2_SCHALTPKT_14: std::strcpy(buffer,"ZIRKROG_2_SCHALTPKT_14"); break;
        case Property::kZIRKROG_3_SCHALTPKT_1: std::strcpy(buffer,"ZIRKROG_3_SCHALTPKT_1"); break;
        case Property::kZIRKROG_3_SCHALTPKT_2: std::strcpy(buffer,"ZIRKROG_3_SCHALTPKT_2"); break;
        case Property::kZIRKROG_3_SCHALTPKT_3: std::strcpy(buffer,"ZIRKROG_3_SCHALTPKT_3"); break;
        case Property::kZIRKROG_3_SCHALTPKT_4: std::strcpy(buffer,"ZIRKROG_3_SCHALTPKT_4"); break;
        case Property::kZIRKROG_3_SCHALTPKT_5: std::strcpy(buffer,"ZIRKROG_3_SCHALTPKT_5"); break;
        case Property::kZIRKROG_3_SCHALTPKT_6: std::strcpy(buffer,"ZIRKROG_3_SCHALTPKT_6"); break;
        case Property::kZIRKROG_3_SCHALTPKT_7: std::strcpy(buffer,"ZIRKROG_3_SCHALTPKT_7"); break;
        case Property::kZIRKROG_3_SCHALTPKT_8: std::strcpy(buffer,"ZIRKROG_3_SCHALTPKT_8"); break;
        case Property::kZIRKROG_3_SCHALTPKT_9: std::strcpy(buffer,"ZIRKROG_3_SCHALTPKT_9"); break;
        case Property::kZIRKROG_3_SCHALTPKT_10: std::strcpy(buffer,"ZIRKROG_3_SCHALTPKT_10"); break;
        case Property::kZIRKROG_3_SCHALTPKT_11: std::strcpy(buffer,"ZIRKROG_3_SCHALTPKT_11"); break;
        case Property::kZIRKROG_3_SCHALTPKT_12: std::strcpy(buffer,"ZIRKROG_3_SCHALTPKT_12"); break;
        case Property::kZIRKROG_3_SCHALTPKT_13: std::strcpy(buffer,"ZIRKROG_3_SCHALTPKT_13"); break;
        case Property::kZIRKROG_3_SCHALTPKT_14: std::strcpy(buffer,"ZIRKROG_3_SCHALTPKT_14"); break;
        case Property::kZEITPROG_1: std::strcpy(buffer,"ZEITPROG_1"); break;
        case Property::kZEITPROG_1_MO: std::strcpy(buffer,"ZEITPROG_1_MO"); break;
        case Property::kZEITPROG_1_MO_SCHALT_2: std::strcpy(buffer,"ZEITPROG_1_MO_SCHALT_2"); break;
        case Property::kZEITPROG_1_MO_SCHALT_3: std::strcpy(buffer,"ZEITPROG_1_MO_SCHALT_3"); break;
        case Property::kZEITPROG_1_DI: std::strcpy(buffer,"ZEITPROG_1_DI"); break;
        case Property::kZEITPROG_1_DI_SCHALT_2: std::strcpy(buffer,"ZEITPROG_1_DI_SCHALT_2"); break;
        case Property::kZEITPROG_1_DI_SCHALT_3: std::strcpy(buffer,"ZEITPROG_1_DI_SCHALT_3"); break;
        case Property::kZEITPROG_1_MI: std::strcpy(buffer,"ZEITPROG_1_MI"); break;
        case Property::kZEITPROG_1_MI_SCHALT_2: std::strcpy(buffer,"ZEITPROG_1_MI_SCHALT_2"); break;
        case Property::kZEITPROG_1_MI_SCHALT_3: std::strcpy(buffer,"ZEITPROG_1_MI_SCHALT_3"); break;
        case Property::kZEITPROG_1_DO: std::strcpy(buffer,"ZEITPROG_1_DO"); break;
        case Property::kZEITPROG_1_DO_SCHALT_2: std::strcpy(buffer,"ZEITPROG_1_DO_SCHALT_2"); break;
        case Property::kZEITPROG_1_DO_SCHALT_3: std::strcpy(buffer,"ZEITPROG_1_DO_SCHALT_3"); break;
        case Property::kZEITPROG_1_FR: std::strcpy(buffer,"ZEITPROG_1_FR"); break;
        case Property::kZEITPROG_1_FR_SCHALT_2: std::strcpy(buffer,"ZEITPROG_1_FR_SCHALT_2"); break;
        case Property::kZEITPROG_1_FR_SCHALT_3: std::strcpy(buffer,"ZEITPROG_1_FR_SCHALT_3"); break;
        case Property::kZEITPROG_1_SA: std::strcpy(buffer,"ZEITPROG_1_SA"); break;
        case Property::kZEITPROG_1_SA_SCHALT_2: std::strcpy(buffer,"ZEITPROG_1_SA_SCHALT_2"); break;
        case Property::kZEITPROG_1_SA_SCHALT_3: std::strcpy(buffer,"ZEITPROG_1_SA_SCHALT_3"); break;
        case Property::kZEITPROG_1_SO: std::strcpy(buffer,"ZEITPROG_1_SO"); break;
        case Property::kZEITPROG_1_SO_SCHALT_2: std::strcpy(buffer,"ZEITPROG_1_SO_SCHALT_2"); break;
        case Property::kZEITPROG_1_SO_SCHALT_3: std::strcpy(buffer,"ZEITPROG_1_SO_SCHALT_3"); break;
        case Property::kZEITPROG_1_MO_FR: std::strcpy(buffer,"ZEITPROG_1_MO_FR"); break;
        case Property::kZEITPROG_1_MO_FR_SCHALT_2: std::strcpy(buffer,"ZEITPROG_1_MO_FR_SCHALT_2"); break;
        case Property::kZEITPROG_1_MO_FR_SCHALT_3: std::strcpy(buffer,"ZEITPROG_1_MO_FR_SCHALT_3"); break;
        case Property::kZEITPROG_1_SA_SO: std::strcpy(buffer,"ZEITPROG_1_SA_SO"); break;
        case Property::kZEITPROG_1_SA_SO_SCHALT_2: std::strcpy(buffer,"ZEITPROG_1_SA_SO_SCHALT_2"); break;
        case Property::kZEITPROG_1_SA_SO_SCHALT_3: std::strcpy(buffer,"ZEITPROG_1_SA_SO_SCHALT_3"); break;
        case Property::kZEITPROG_1_MO_SO: std::strcpy(buffer,"ZEITPROG_1_MO_SO"); break;
        case Property::kZEITPROG_1_MO_SO_SCHALT_2: std::strcpy(buffer,"ZEITPROG_1_MO_SO_SCHALT_2"); break;
        case Property::kZEITPROG_1_MO_SO_SCHALT_3: std::strcpy(buffer,"ZEITPROG_1_MO_SO_SCHALT_3"); break;
        case Property::kZEITPROG_1_MO_DO: std::strcpy(buffer,"ZEITPROG_1_MO_DO"); break;
        case Property::kZEITPROG_1_MO_DO_SCHALT_2: std::strcpy(buffer,"ZEITPROG_1_MO_DO_SCHALT_2"); break;
        case Property::kZEITPROG_1_MO_DO_SCHALT_3: std::strcpy(buffer,"ZEITPROG_1_MO_DO_SCHALT_3"); break;
        case Property::kZEITPROG_2: std::strcpy(buffer,"ZEITPROG_2"); break;
        case Property::kZEITPROG_2_MO: std::strcpy(buffer,"ZEITPROG_2_MO"); break;
        case Property::kZEITPROG_2_MO_SCHALT_2: std::strcpy(buffer,"ZEITPROG_2_MO_SCHALT_2"); break;
        case Property::kZEITPROG_2_MO_SCHALT_3: std::strcpy(buffer,"ZEITPROG_2_MO_SCHALT_3"); break;
        case Property::kZEITPROG_2_DI: std::strcpy(buffer,"ZEITPROG_2_DI"); break;
        case Property::kZEITPROG_2_DI_SCHALT_2: std::strcpy(buffer,"ZEITPROG_2_DI_SCHALT_2"); break;
        case Property::kZEITPROG_2_DI_SCHALT_3: std::strcpy(buffer,"ZEITPROG_2_DI_SCHALT_3"); break;
        case Property::kZEITPROG_2_MI: std::strcpy(buffer,"ZEITPROG_2_MI"); break;
        case Property::kZEITPROG_2_MI_SCHALT_2: std::strcpy(buffer,"ZEITPROG_2_MI_SCHALT_2"); break;
        case Property::kZEITPROG_2_MI_SCHALT_3: std::strcpy(buffer,"ZEITPROG_2_MI_SCHALT_3"); break;
        case Property::kZEITPROG_2_DO: std::strcpy(buffer,"ZEITPROG_2_DO"); break;
        case Property::kZEITPROG_2_DO_SCHALT_2: std::strcpy(buffer,"ZEITPROG_2_DO_SCHALT_2"); break;
        case Property::kZEITPROG_2_DO_SCHALT_3: std::strcpy(buffer,"ZEITPROG_2_DO_SCHALT_3"); break;
        case Property::kZEITPROG_2_FR: std::strcpy(buffer,"ZEITPROG_2_FR"); break;
        case Property::kZEITPROG_2_FR_SCHALT_2: std::strcpy(buffer,"ZEITPROG_2_FR_SCHALT_2"); break;
        case Property::kZEITPROG_2_FR_SCHALT_3: std::strcpy(buffer,"ZEITPROG_2_FR_SCHALT_3"); break;
        case Property::kZEITPROG_2_SA: std::strcpy(buffer,"ZEITPROG_2_SA"); break;
        case Property::kZEITPROG_2_SA_SCHALT_2: std::strcpy(buffer,"ZEITPROG_2_SA_SCHALT_2"); break;
        case Property::kZEITPROG_2_SA_SCHALT_3: std::strcpy(buffer,"ZEITPROG_2_SA_SCHALT_3"); break;
        case Property::kZEITPROG_2_SO: std::strcpy(buffer,"ZEITPROG_2_SO"); break;
        case Property::kZEITPROG_2_SO_SCHALT_2: std::strcpy(buffer,"ZEITPROG_2_SO_SCHALT_2"); break;
        case Property::kZEITPROG_2_SO_SCHALT_3: std::strcpy(buffer,"ZEITPROG_2_SO_SCHALT_3"); break;
        case Property::kZEITPROG_2_MO_FR: std::strcpy(buffer,"ZEITPROG_2_MO_FR"); break;
        case Property::kZEITPROG_2_MO_FR_SCHALT_2: std::strcpy(buffer,"ZEITPROG_2_MO_FR_SCHALT_2"); break;
        case Property::kZEITPROG_2_MO_FR_SCHALT_3: std::strcpy(buffer,"ZEITPROG_2_MO_FR_SCHALT_3"); break;
        case Property::kZEITPROG_2_SA_SO: std::strcpy(buffer,"ZEITPROG_2_SA_SO"); break;
        case Property::kZEITPROG_2_SA_SO_SCHALT_2: std::strcpy(buffer,"ZEITPROG_2_SA_SO_SCHALT_2"); break;
        case Property::kZEITPROG_2_SA_SO_SCHALT_3: std::strcpy(buffer,"ZEITPROG_2_SA_SO_SCHALT_3"); break;
        case Property::kZEITPROG_2_MO_SO: std::strcpy(buffer,"ZEITPROG_2_MO_SO"); break;
        case Property::kZEITPROG_2_MO_SO_SCHALT_2: std::strcpy(buffer,"ZEITPROG_2_MO_SO_SCHALT_2"); break;
        case Property::kZEITPROG_2_MO_SO_SCHALT_3: std::strcpy(buffer,"ZEITPROG_2_MO_SO_SCHALT_3"); break;
        case Property::kZEITPROG_2_MO_DO: std::strcpy(buffer,"ZEITPROG_2_MO_DO"); break;
        case Property::kZEITPROG_2_MO_DO_SCHALT_2: std::strcpy(buffer,"ZEITPROG_2_MO_DO_SCHALT_2"); break;
        case Property::kZEITPROG_2_MO_DO_SCHALT_3: std::strcpy(buffer,"ZEITPROG_2_MO_DO_SCHALT_3"); break;
        case Property::kZEITPROG_3: std::strcpy(buffer,"ZEITPROG_3"); break;
        case Property::kZEITPROG_3_MO: std::strcpy(buffer,"ZEITPROG_3_MO"); break;
        case Property::kZEITPROG_3_MO_SCHALT_2: std::strcpy(buffer,"ZEITPROG_3_MO_SCHALT_2"); break;
        case Property::kZEITPROG_3_MO_SCHALT_3: std::strcpy(buffer,"ZEITPROG_3_MO_SCHALT_3"); break;
        case Property::kZEITPROG_3_DI: std::strcpy(buffer,"ZEITPROG_3_DI"); break;
        case Property::kZEITPROG_3_DI_SCHALT_2: std::strcpy(buffer,"ZEITPROG_3_DI_SCHALT_2"); break;
        case Property::kZEITPROG_3_DI_SCHALT_3: std::strcpy(buffer,"ZEITPROG_3_DI_SCHALT_3"); break;
        case Property::kZEITPROG_3_MI: std::strcpy(buffer,"ZEITPROG_3_MI"); break;
        case Property::kZEITPROG_3_MI_SCHALT_2: std::strcpy(buffer,"ZEITPROG_3_MI_SCHALT_2"); break;
        case Property::kZEITPROG_3_MI_SCHALT_3: std::strcpy(buffer,"ZEITPROG_3_MI_SCHALT_3"); break;
        case Property::kZEITPROG_3_DO: std::strcpy(buffer,"ZEITPROG_3_DO"); break;
        case Property::kZEITPROG_3_DO_SCHALT_2: std::strcpy(buffer,"ZEITPROG_3_DO_SCHALT_2"); break;
        case Property::kZEITPROG_3_DO_SCHALT_3: std::strcpy(buffer,"ZEITPROG_3_DO_SCHALT_3"); break;
        case Property::kZEITPROG_3_FR: std::strcpy(buffer,"ZEITPROG_3_FR"); break;
        case Property::kZEITPROG_3_FR_SCHALT_2: std::strcpy(buffer,"ZEITPROG_3_FR_SCHALT_2"); break;
        case Property::kZEITPROG_3_FR_SCHALT_3: std::strcpy(buffer,"ZEITPROG_3_FR_SCHALT_3"); break;
        case Property::kZEITPROG_3_SA: std::strcpy(buffer,"ZEITPROG_3_SA"); break;
        case Property::kZEITPROG_3_SA_SCHALT_2: std::strcpy(buffer,"ZEITPROG_3_SA_SCHALT_2"); break;
        case Property::kZEITPROG_3_SA_SCHALT_3: std::strcpy(buffer,"ZEITPROG_3_SA_SCHALT_3"); break;
        case Property::kZEITPROG_3_SO: std::strcpy(buffer,"ZEITPROG_3_SO"); break;
        case Property::kZEITPROG_3_SO_SCHALT_2: std::strcpy(buffer,"ZEITPROG_3_SO_SCHALT_2"); break;
        case Property::kZEITPROG_3_SO_SCHALT_3: std::strcpy(buffer,"ZEITPROG_3_SO_SCHALT_3"); break;
        case Property::kZEITPROG_3_MO_FR: std::strcpy(buffer,"ZEITPROG_3_MO_FR"); break;
        case Property::kZEITPROG_3_MO_FR_SCHALT_2: std::strcpy(buffer,"ZEITPROG_3_MO_FR_SCHALT_2"); break;
        case Property::kZEITPROG_3_MO_FR_SCHALT_3: std::strcpy(buffer,"ZEITPROG_3_MO_FR_SCHALT_3"); break;
        case Property::kZEITPROG_3_SA_SO: std::strcpy(buffer,"ZEITPROG_3_SA_SO"); break;
        case Property::kZEITPROG_3_SA_SO_SCHALT_2: std::strcpy(buffer,"ZEITPROG_3_SA_SO_SCHALT_2"); break;
        case Property::kZEITPROG_3_SA_SO_SCHALT_3: std::strcpy(buffer,"ZEITPROG_3_SA_SO_SCHALT_3"); break;
        case Property::kZEITPROG_3_MO_SO: std::strcpy(buffer,"ZEITPROG_3_MO_SO"); break;
        case Property::kZEITPROG_3_MO_SO_SCHALT_2: std::strcpy(buffer,"ZEITPROG_3_MO_SO_SCHALT_2"); break;
        case Property::kZEITPROG_3_MO_SO_SCHALT_3: std::strcpy(buffer,"ZEITPROG_3_MO_SO_SCHALT_3"); break;
        case Property::kZEITPROG_3_MO_DO: std::strcpy(buffer,"ZEITPROG_3_MO_DO"); break;
        case Property::kZEITPROG_3_MO_DO_SCHALT_2: std::strcpy(buffer,"ZEITPROG_3_MO_DO_SCHALT_2"); break;
        case Property::kZEITPROG_3_MO_DO_SCHALT_3: std::strcpy(buffer,"ZEITPROG_3_MO_DO_SCHALT_3"); break;
        case Property::kZEITPROG_4: std::strcpy(buffer,"ZEITPROG_4"); break;
        case Property::kZEITPROG_4_MO: std::strcpy(buffer,"ZEITPROG_4_MO"); break;
        case Property::kZEITPROG_4_MO_SCHALT_2: std::strcpy(buffer,"ZEITPROG_4_MO_SCHALT_2"); break;
        case Property::kZEITPROG_4_MO_SCHALT_3: std::strcpy(buffer,"ZEITPROG_4_MO_SCHALT_3"); break;
        case Property::kZEITPROG_4_DI: std::strcpy(buffer,"ZEITPROG_4_DI"); break;
        case Property::kZEITPROG_4_DI_SCHALT_2: std::strcpy(buffer,"ZEITPROG_4_DI_SCHALT_2"); break;
        case Property::kZEITPROG_4_DI_SCHALT_3: std::strcpy(buffer,"ZEITPROG_4_DI_SCHALT_3"); break;
        case Property::kZEITPROG_4_MI: std::strcpy(buffer,"ZEITPROG_4_MI"); break;
        case Property::kZEITPROG_4_MI_SCHALT_2: std::strcpy(buffer,"ZEITPROG_4_MI_SCHALT_2"); break;
        case Property::kZEITPROG_4_MI_SCHALT_3: std::strcpy(buffer,"ZEITPROG_4_MI_SCHALT_3"); break;
        case Property::kZEITPROG_4_DO: std::strcpy(buffer,"ZEITPROG_4_DO"); break;
        case Property::kZEITPROG_4_DO_SCHALT_2: std::strcpy(buffer,"ZEITPROG_4_DO_SCHALT_2"); break;
        case Property::kZEITPROG_4_DO_SCHALT_3: std::strcpy(buffer,"ZEITPROG_4_DO_SCHALT_3"); break;
        case Property::kZEITPROG_4_FR: std::strcpy(buffer,"ZEITPROG_4_FR"); break;
        case Property::kZEITPROG_4_FR_SCHALT_2: std::strcpy(buffer,"ZEITPROG_4_FR_SCHALT_2"); break;
        case Property::kZEITPROG_4_FR_SCHALT_3: std::strcpy(buffer,"ZEITPROG_4_FR_SCHALT_3"); break;
        case Property::kZEITPROG_4_SA: std::strcpy(buffer,"ZEITPROG_4_SA"); break;
        case Property::kZEITPROG_4_SA_SCHALT_2: std::strcpy(buffer,"ZEITPROG_4_SA_SCHALT_2"); break;
        case Property::kZEITPROG_4_SA_SCHALT_3: std::strcpy(buffer,"ZEITPROG_4_SA_SCHALT_3"); break;
        case Property::kZEITPROG_4_SO: std::strcpy(buffer,"ZEITPROG_4_SO"); break;
        case Property::kZEITPROG_4_SO_SCHALT_2: std::strcpy(buffer,"ZEITPROG_4_SO_SCHALT_2"); break;
        case Property::kZEITPROG_4_SO_SCHALT_3: std::strcpy(buffer,"ZEITPROG_4_SO_SCHALT_3"); break;
        case Property::kZEITPROG_4_MO_FR: std::strcpy(buffer,"ZEITPROG_4_MO_FR"); break;
        case Property::kZEITPROG_4_MO_FR_SCHALT_2: std::strcpy(buffer,"ZEITPROG_4_MO_FR_SCHALT_2"); break;
        case Property::kZEITPROG_4_MO_FR_SCHALT_3: std::strcpy(buffer,"ZEITPROG_4_MO_FR_SCHALT_3"); break;
        case Property::kZEITPROG_4_SA_SO: std::strcpy(buffer,"ZEITPROG_4_SA_SO"); break;
        case Property::kZEITPROG_4_SA_SO_SCHALT_2: std::strcpy(buffer,"ZEITPROG_4_SA_SO_SCHALT_2"); break;
        case Property::kZEITPROG_4_SA_SO_SCHALT_3: std::strcpy(buffer,"ZEITPROG_4_SA_SO_SCHALT_3"); break;
        case Property::kZEITPROG_4_MO_SO: std::strcpy(buffer,"ZEITPROG_4_MO_SO"); break;
        case Property::kZEITPROG_4_MO_SO_SCHALT_2: std::strcpy(buffer,"ZEITPROG_4_MO_SO_SCHALT_2"); break;
        case Property::kZEITPROG_4_MO_SO_SCHALT_3: std::strcpy(buffer,"ZEITPROG_4_MO_SO_SCHALT_3"); break;
        case Property::kZEITPROG_4_MO_DO: std::strcpy(buffer,"ZEITPROG_4_MO_DO"); break;
        case Property::kZEITPROG_4_MO_DO_SCHALT_2: std::strcpy(buffer,"ZEITPROG_4_MO_DO_SCHALT_2"); break;
        case Property::kZEITPROG_4_MO_DO_SCHALT_3: std::strcpy(buffer,"ZEITPROG_4_MO_DO_SCHALT_3"); break;
        case Property::kLEISTUNG_AUSLEGUNG_HEIZUNG: std::strcpy(buffer,"LEISTUNG_AUSLEGUNG_HEIZUNG"); break;
        case Property::kVERDICHTER_STARTS: std::strcpy(buffer,"VERDICHTER_STARTS"); break;
        case Property::kVERDICHTER_STARTS_K: std::strcpy(buffer,"VERDICHTER_STARTS_K"); break;
        case Property::kHF_MONITOR_TYP: std::strcpy(buffer,"HF_MONITOR_TYP"); break;
        case Property::kSTART_BEREICH_SOFTWARE_SIMULATION: std::strcpy(buffer,"START_BEREICH_SOFTWARE_SIMULATION"); break;
        case Property::kBETRIEBS_STATUS_2: std::strcpy(buffer,"kBETRIEBS_STATUS_2"); break;        
        case Property::kENDE_BEREICH_SOFTWARE_SIMULATION: std::strcpy(buffer,"ENDE_BEREICH_SOFTWARE_SIMULATION"); break;
        case Property::kSTART_CHAR_BEREICH: std::strcpy(buffer,"START_CHAR_BEREICH"); break;
        case Property::kMODE_MULTIFUNKTIONSAUSGANG_2: std::strcpy(buffer,"MODE_MULTIFUNKTIONSAUSGANG_2"); break;
        case Property::kWECHSELANZEIGE: std::strcpy(buffer,"WECHSELANZEIGE"); break;
        case Property::kSCHNELLAUFHEIZUNG: std::strcpy(buffer,"SCHNELLAUFHEIZUNG"); break;
        case Property::kFEHLERANZAHL: std::strcpy(buffer,"FEHLERANZAHL"); break;
        case Property::kANZEIGESTATUS: std::strcpy(buffer,"ANZEIGESTATUS"); break;
        case Property::kBUSKONTROLLE: std::strcpy(buffer,"BUSKONTROLLE"); break;
        case Property::kZWEITER_WE_STATUS: std::strcpy(buffer,"ZWEITER_WE_STATUS"); break;
        case Property::kWP_EVU: std::strcpy(buffer,"WP_EVU"); break;
        case Property::kWP_PUMPENSTATUS: std::strcpy(buffer,"WP_PUMPENSTATUS"); break;
        case Property::kWP_STATUS: std::strcpy(buffer,"WP_STATUS"); break;
        case Property::kDAUERLAUF_PUFFERLADEPUMPE: std::strcpy(buffer,"DAUERLAUF_PUFFERLADEPUMPE"); break;
        case Property::kSCHALTWERKDYNAMIKZEIT: std::strcpy(buffer,"SCHALTWERKDYNAMIKZEIT"); break;
        case Property::kPUMPENZYKLEN: std::strcpy(buffer,"PUMPENZYKLEN"); break;
        case Property::kGEBAEUDEART: std::strcpy(buffer,"GEBAEUDEART"); break;
        case Property::kSOMMERBETRIEB: std::strcpy(buffer,"SOMMERBETRIEB"); break;
        case Property::kIMPULSRATE: std::strcpy(buffer,"IMPULSRATE"); break;
        case Property::kSOLARBETRIEB: std::strcpy(buffer,"SOLARBETRIEB"); break;
        case Property::kWAERMEMENGE: std::strcpy(buffer,"WAERMEMENGE"); break;
        case Property::kAUTOMATIK_WARMWASSER: std::strcpy(buffer,"AUTOMATIK_WARMWASSER"); break;
        case Property::kWPSTUFEN_WW: std::strcpy(buffer,"WPSTUFEN_WW"); break;
        case Property::kWW_MIT_2WE: std::strcpy(buffer,"WW_MIT_2WE"); break;
        case Property::kSPERREN_2WE: std::strcpy(buffer,"SPERREN_2WE"); break;
        case Property::kFREIGABE_2WE: std::strcpy(buffer,"FREIGABE_2WE"); break;
        case Property::kDYNAMIK: std::strcpy(buffer,"DYNAMIK"); break;
        case Property::kPARTYSTUNDEN: std::strcpy(buffer,"PARTYSTUNDEN"); break;
        case Property::kMANUELLES_ABTAUEN: std::strcpy(buffer,"MANUELLES_ABTAUEN"); break;
        case Property::kHEIZKREIS_PROGRAMMSCHALTER: std::strcpy(buffer,"HEIZKREIS_PROGRAMMSCHALTER"); break;
        case Property::kMODE_EINGANG2: std::strcpy(buffer,"MODE_EINGANG2"); break;
        case Property::kFUEHLERKENNLINIE: std::strcpy(buffer,"FUEHLERKENNLINIE"); break;
        case Property::kWARTUNG_JAHR: std::strcpy(buffer,"WARTUNG_JAHR"); break;
        case Property::kWARTUNG_MONAT: std::strcpy(buffer,"WARTUNG_MONAT"); break;
        case Property::kWARTUNG_TAG: std::strcpy(buffer,"WARTUNG_TAG"); break;
        case Property::kTHERMOSTATEINGANG_WW: std::strcpy(buffer,"THERMOSTATEINGANG_WW"); break;
        case Property::kBETRIEBSART_HZK_PUMPE: std::strcpy(buffer,"BETRIEBSART_HZK_PUMPE"); break;
        case Property::kANNAHME_LEISTUNGSZWANG: std::strcpy(buffer,"ANNAHME_LEISTUNGSZWANG"); break;
        case Property::kKESSELFOLGE1_1: std::strcpy(buffer,"KESSELFOLGE1_1"); break;
        case Property::kKESSELFOLGE1_2: std::strcpy(buffer,"KESSELFOLGE1_2"); break;
        case Property::kKESSELFOLGE1_3: std::strcpy(buffer,"KESSELFOLGE1_3"); break;
        case Property::kKESSELFOLGE1_4: std::strcpy(buffer,"KESSELFOLGE1_4"); break;
        case Property::kKESSELFOLGE1_5: std::strcpy(buffer,"KESSELFOLGE1_5"); break;
        case Property::kKESSELFOLGE1_6: std::strcpy(buffer,"KESSELFOLGE1_6"); break;
        case Property::kKESSELFOLGE1_7: std::strcpy(buffer,"KESSELFOLGE1_7"); break;
        case Property::kKESSELFOLGE1_8: std::strcpy(buffer,"KESSELFOLGE1_8"); break;
        case Property::kKESSELFOLGE1_9: std::strcpy(buffer,"KESSELFOLGE1_9"); break;
        case Property::kKESSELFOLGE1_10: std::strcpy(buffer,"KESSELFOLGE1_10"); break;
        case Property::kKESSELFOLGE2_1: std::strcpy(buffer,"KESSELFOLGE2_1"); break;
        case Property::kKESSELFOLGE2_2: std::strcpy(buffer,"KESSELFOLGE2_2"); break;
        case Property::kKESSELFOLGE2_3: std::strcpy(buffer,"KESSELFOLGE2_3"); break;
        case Property::kKESSELFOLGE2_4: std::strcpy(buffer,"KESSELFOLGE2_4"); break;
        case Property::kKESSELFOLGE2_5: std::strcpy(buffer,"KESSELFOLGE2_5"); break;
        case Property::kKESSELFOLGE2_6: std::strcpy(buffer,"KESSELFOLGE2_6"); break;
        case Property::kKESSELFOLGE2_7: std::strcpy(buffer,"KESSELFOLGE2_7"); break;
        case Property::kKESSELFOLGE2_8: std::strcpy(buffer,"KESSELFOLGE2_8"); break;
        case Property::kKESSELFOLGE2_9: std::strcpy(buffer,"KESSELFOLGE2_9"); break;
      //  case Property::kKESSELFOLGE2_10: std::strcpy(buffer,"KESSELFOLGE2_10"); break; duplicate
        case Property::kTAG_SOMMER_BEGIN: std::strcpy(buffer,"TAG_SOMMER_BEGIN"); break;
        case Property::kMONAT_SOMMER_BEGIN: std::strcpy(buffer,"MONAT_SOMMER_BEGIN"); break;
        case Property::kTAG_SOMMER_ENDE: std::strcpy(buffer,"TAG_SOMMER_ENDE"); break;
        case Property::kMONAT_SOMMER_ENDE: std::strcpy(buffer,"MONAT_SOMMER_ENDE"); break;
        case Property::kSCHALTHYST_PUFFER: std::strcpy(buffer,"SCHALTHYST_PUFFER"); break;
        case Property::kPUFFERUEBERHOEHUNG: std::strcpy(buffer,"PUFFERUEBERHOEHUNG"); break;
        case Property::kMAX_PUFFERTEMP: std::strcpy(buffer,"MAX_PUFFERTEMP"); break;
        case Property::kMIN_PUFFERTEMP: std::strcpy(buffer,"MIN_PUFFERTEMP"); break;
        case Property::kMAX_SAMMLERTEMP: std::strcpy(buffer,"MAX_SAMMLERTEMP"); break;
        case Property::kMIN_SAMMLERTEMP: std::strcpy(buffer,"MIN_SAMMLERTEMP"); break;
        case Property::kSAMMLERUEBERHOEHUNG: std::strcpy(buffer,"SAMMLERUEBERHOEHUNG"); break;
        case Property::kABREGELPARAMETER: std::strcpy(buffer,"ABREGELPARAMETER"); break;
        case Property::kMAX_MODGRAD: std::strcpy(buffer,"MAX_MODGRAD"); break;
        case Property::kMIN_MODGRAD: std::strcpy(buffer,"MIN_MODGRAD"); break;
        case Property::kFOLGEWECHSEL_STD: std::strcpy(buffer,"FOLGEWECHSEL_STD"); break;
        case Property::kFOLGEWECHSELMODUS: std::strcpy(buffer,"FOLGEWECHSELMODUS"); break;
        case Property::kSONDERNIVEAU_TEMP: std::strcpy(buffer,"SONDERNIVEAU_TEMP"); break;
        case Property::kMODE_EINGANG1: std::strcpy(buffer,"MODE_EINGANG1"); break;
        case Property::kSTATUS_VARIABLER_AUSGANG: std::strcpy(buffer,"STATUS_VARIABLER_AUSGANG"); break;
        case Property::kMODE_VARIABLER_AUSGANG: std::strcpy(buffer,"MODE_VARIABLER_AUSGANG"); break;
        case Property::kSTATUS_MULTIFUNKTIONSAUSGANG: std::strcpy(buffer,"STATUS_MULTIFUNKTIONSAUSGANG"); break;
        case Property::kMODE_MULTIFUNKTIONSAUSGANG: std::strcpy(buffer,"MODE_MULTIFUNKTIONSAUSGANG"); break;
        case Property::kANTILEGIONELLEN_ZEITPUNKT: std::strcpy(buffer,"ANTILEGIONELLEN_ZEITPUNKT"); break;
        case Property::kSOFORT_AUS: std::strcpy(buffer,"SOFORT_AUS"); break;
        case Property::kPROGSTELL_UHR_SONNE_BEREIT: std::strcpy(buffer,"PROGSTELL_UHR_SONNE_BEREIT"); break;
        case Property::kBM_GEFUNDEN: std::strcpy(buffer,"BM_GEFUNDEN"); break;
        case Property::kHEIZTHERME: std::strcpy(buffer,"HEIZTHERME"); break;
        case Property::kRAUMSOLLTEMP_VERSTELLUNG: std::strcpy(buffer,"RAUMSOLLTEMP_VERSTELLUNG"); break;
        case Property::kFUELLSTAND: std::strcpy(buffer,"FUELLSTAND"); break;
        case Property::kBUSVERSORGUNG: std::strcpy(buffer,"BUSVERSORGUNG"); break;
        case Property::kSOLARSYSTEMAUSWAHL: std::strcpy(buffer,"SOLARSYSTEMAUSWAHL"); break;
        case Property::kFUELLSTANDSGEBER: std::strcpy(buffer,"FUELLSTANDSGEBER"); break;
        case Property::kKESSELTYP: std::strcpy(buffer,"KESSELTYP"); break;
        case Property::kMOD_KLAPPENSTATUS: std::strcpy(buffer,"MOD_KLAPPENSTATUS"); break;
        case Property::kENDE_CHAR_BEREICH: std::strcpy(buffer,"ENDE_CHAR_BEREICH"); break;
        case Property::kINFOBLOCK_1: std::strcpy(buffer,"INFOBLOCK_1"); break;
        case Property::kINFOBLOCK_2: std::strcpy(buffer,"INFOBLOCK_2"); break;
        case Property::kINFOBLOCK_3: std::strcpy(buffer,"INFOBLOCK_3"); break;
        case Property::kINFOBLOCK_4: std::strcpy(buffer,"INFOBLOCK_4"); break;
        case Property::kINFOBLOCK_5: std::strcpy(buffer,"INFOBLOCK_5"); break;
        case Property::kINFOBLOCK_6: std::strcpy(buffer,"INFOBLOCK_6"); break;

        case Property::kABLUFT_TEMP: std::strcpy(buffer,"ABLUFT_TEMP"); break;
        case Property::kABLUFT_LUFTFEUCHTIGKEIT: std::strcpy(buffer,"ABLUFT_LUFTFEUCHTIGKEIT"); break;
        case Property::kABLUFT_TAUPUNKT: std::strcpy(buffer,"ABLUFT_TAUPUNKT"); break;
        case Property::kLUEFT_STUFE_BEREITSCHAFT: std::strcpy(buffer,"LUEFT_STUFE_BEREITSCHAFT"); break;
        default: std::strcpy(buffer, "Unknown");
    }
    return buffer;
}
#endif
